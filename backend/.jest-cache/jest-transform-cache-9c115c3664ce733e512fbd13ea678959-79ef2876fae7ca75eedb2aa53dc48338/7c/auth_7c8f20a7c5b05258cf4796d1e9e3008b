53c13962ff14471de65aa7b7784a5b4c
"use strict";

/* istanbul ignore next */
function cov_14gunxtpen() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\utils\\auth.ts";
  var hash = "8e729cba2e00b6f817b134f9fce0c8857de9bdbe";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\utils\\auth.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 221
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 23
        },
        end: {
          line: 8,
          column: 63
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 44
        }
      },
      "7": {
        start: {
          line: 15,
          column: 21
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "8": {
        start: {
          line: 16,
          column: 23
        },
        end: {
          line: 16,
          column: 25
        }
      },
      "9": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 55
        }
      },
      "10": {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "11": {
        start: {
          line: 26,
          column: 24
        },
        end: {
          line: 28,
          column: 1
        }
      },
      "12": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 52
        }
      },
      "13": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 29,
          column: 42
        }
      },
      "14": {
        start: {
          line: 36,
          column: 22
        },
        end: {
          line: 38,
          column: 1
        }
      },
      "15": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 91
        }
      },
      "16": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 38
        }
      },
      "17": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 47,
          column: 1
        }
      },
      "18": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 76
        }
      },
      "19": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 48,
          column: 34
        }
      },
      "20": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 56,
          column: 1
        }
      },
      "21": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 104
        }
      },
      "22": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 57,
          column: 52
        }
      },
      "23": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 65,
          column: 1
        }
      },
      "24": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 83
        }
      },
      "25": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 66,
          column: 48
        }
      },
      "26": {
        start: {
          line: 72,
          column: 33
        },
        end: {
          line: 76,
          column: 1
        }
      },
      "27": {
        start: {
          line: 74,
          column: 26
        },
        end: {
          line: 74,
          column: 96
        }
      },
      "28": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 40
        }
      },
      "29": {
        start: {
          line: 77,
          column: 0
        },
        end: {
          line: 77,
          column: 60
        }
      },
      "30": {
        start: {
          line: 83,
          column: 22
        },
        end: {
          line: 86,
          column: 1
        }
      },
      "31": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 51
        }
      },
      "32": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 34
        }
      },
      "33": {
        start: {
          line: 87,
          column: 0
        },
        end: {
          line: 87,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 15,
            column: 22
          }
        },
        loc: {
          start: {
            line: 15,
            column: 41
          },
          end: {
            line: 18,
            column: 1
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 24
          },
          end: {
            line: 26,
            column: 25
          }
        },
        loc: {
          start: {
            line: 26,
            column: 50
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 22
          },
          end: {
            line: 36,
            column: 23
          }
        },
        loc: {
          start: {
            line: 36,
            column: 53
          },
          end: {
            line: 38,
            column: 1
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 20
          },
          end: {
            line: 45,
            column: 21
          }
        },
        loc: {
          start: {
            line: 45,
            column: 31
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 54,
            column: 30
          }
        },
        loc: {
          start: {
            line: 54,
            column: 42
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 63,
            column: 28
          }
        },
        loc: {
          start: {
            line: 63,
            column: 38
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 63
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 72,
            column: 33
          },
          end: {
            line: 72,
            column: 34
          }
        },
        loc: {
          start: {
            line: 72,
            column: 47
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 72
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 83,
            column: 22
          },
          end: {
            line: 83,
            column: 23
          }
        },
        loc: {
          start: {
            line: 83,
            column: 33
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 83
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 36,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 36,
            column: 44
          },
          end: {
            line: 36,
            column: 48
          }
        }],
        line: 36
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0]
    },
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\utils\\auth.ts",
      mappings: ";;;;;;AAAA,oDAA4B;AAC5B,gEAA+B;AAC/B,6CAA0C;AAE1C;;;;GAIG;AACI,MAAM,YAAY,GAAG,KAAK,EAAE,QAAgB,EAAmB,EAAE;IACtE,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,OAAO,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC3C,CAAC,CAAC;AAHW,QAAA,YAAY,gBAGvB;AAEF;;;;;GAKG;AACI,MAAM,eAAe,GAAG,KAAK,EAAE,QAAgB,EAAE,IAAY,EAAoB,EAAE;IACxF,OAAO,gBAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACxC,CAAC,CAAC;AAFW,QAAA,eAAe,mBAE1B;AAEF;;;;;GAKG;AACI,MAAM,aAAa,GAAG,CAAC,OAAe,EAAE,YAAoB,IAAI,EAAU,EAAE;IACjF,OAAO,sBAAG,CAAC,IAAI,CAAC,OAAO,EAAE,eAAM,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,SAAS,EAAqB,CAAC,CAAC;AAChF,CAAC,CAAC;AAFW,QAAA,aAAa,iBAExB;AAEF;;;;GAIG;AACI,MAAM,WAAW,GAAG,CAAC,KAAa,EAAO,EAAE;IAChD,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,eAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAC9C,CAAC,CAAC;AAFW,QAAA,WAAW,eAEtB;AAEF;;;;GAIG;AACI,MAAM,oBAAoB,GAAG,CAAC,OAAe,EAAU,EAAE;IAC9D,OAAO,sBAAG,CAAC,IAAI,CAAC,OAAO,EAAE,eAAM,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAqB,CAAC,CAAC;AAC7F,CAAC,CAAC;AAFW,QAAA,oBAAoB,wBAE/B;AAEF;;;;GAIG;AACI,MAAM,kBAAkB,GAAG,CAAC,KAAa,EAAO,EAAE;IACvD,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,eAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACrD,CAAC,CAAC;AAFW,QAAA,kBAAkB,sBAE7B;AAEF;;;;GAIG;AACI,MAAM,wBAAwB,GAAG,CAAC,QAAgB,EAAW,EAAE;IACpE,wGAAwG;IACxG,MAAM,aAAa,GAAG,sEAAsE,CAAC;IAC7F,OAAO,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC,CAAC;AAJW,QAAA,wBAAwB,4BAInC;AAEF;;;;GAIG;AACI,MAAM,aAAa,GAAG,CAAC,KAAa,EAAW,EAAE;IACtD,MAAM,UAAU,GAAG,4BAA4B,CAAC;IAChD,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC,CAAC;AAHW,QAAA,aAAa,iBAGxB",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\utils\\auth.ts"],
      sourcesContent: ["import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { config } from '../config/config';\r\n\r\n/**\r\n * Gera um hash da senha usando bcrypt\r\n * @param password - Senha em texto plano\r\n * @returns Promise com o hash da senha\r\n */\r\nexport const hashPassword = async (password: string): Promise<string> => {\r\n  const saltRounds = 12;\r\n  return bcrypt.hash(password, saltRounds);\r\n};\r\n\r\n/**\r\n * Compara uma senha em texto plano com um hash\r\n * @param password - Senha em texto plano\r\n * @param hash - Hash da senha\r\n * @returns Promise com resultado da compara\xE7\xE3o\r\n */\r\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\r\n  return bcrypt.compare(password, hash);\r\n};\r\n\r\n/**\r\n * Gera um token JWT\r\n * @param payload - Dados a serem inclu\xEDdos no token\r\n * @param expiresIn - Tempo de expira\xE7\xE3o do token (padr\xE3o: 1h)\r\n * @returns Token JWT\r\n */\r\nexport const generateToken = (payload: object, expiresIn: string = '1h'): string => {\r\n  return jwt.sign(payload, config.jwt.secret, { expiresIn } as jwt.SignOptions);\r\n};\r\n\r\n/**\r\n * Verifica e decodifica um token JWT\r\n * @param token - Token JWT a ser verificado\r\n * @returns Payload decodificado do token\r\n */\r\nexport const verifyToken = (token: string): any => {\r\n  return jwt.verify(token, config.jwt.secret);\r\n};\r\n\r\n/**\r\n * Gera um refresh token JWT\r\n * @param payload - Dados a serem inclu\xEDdos no token\r\n * @returns Refresh token JWT\r\n */\r\nexport const generateRefreshToken = (payload: object): string => {\r\n  return jwt.sign(payload, config.jwt.refreshSecret, { expiresIn: '7d' } as jwt.SignOptions);\r\n};\r\n\r\n/**\r\n * Verifica um refresh token JWT\r\n * @param token - Refresh token a ser verificado\r\n * @returns Payload decodificado do refresh token\r\n */\r\nexport const verifyRefreshToken = (token: string): any => {\r\n  return jwt.verify(token, config.jwt.refreshSecret);\r\n};\r\n\r\n/**\r\n * Valida a for\xE7a de uma senha\r\n * @param password - Senha a ser validada\r\n * @returns true se a senha for forte, false caso contr\xE1rio\r\n */\r\nexport const validatePasswordStrength = (password: string): boolean => {\r\n  // M\xEDnimo 8 caracteres, pelo menos uma letra mai\xFAscula, uma min\xFAscula, um n\xFAmero e um caractere especial\r\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n  return passwordRegex.test(password);\r\n};\r\n\r\n/**\r\n * Valida formato de email\r\n * @param email - Email a ser validado\r\n * @returns true se o email for v\xE1lido, false caso contr\xE1rio\r\n */\r\nexport const validateEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8e729cba2e00b6f817b134f9fce0c8857de9bdbe"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14gunxtpen = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14gunxtpen();
var __importDefault =
/* istanbul ignore next */
(cov_14gunxtpen().s[0]++,
/* istanbul ignore next */
(cov_14gunxtpen().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_14gunxtpen().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_14gunxtpen().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_14gunxtpen().f[0]++;
  cov_14gunxtpen().s[1]++;
  return /* istanbul ignore next */(cov_14gunxtpen().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_14gunxtpen().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_14gunxtpen().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_14gunxtpen().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_14gunxtpen().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_14gunxtpen().s[3]++;
exports.validateEmail = exports.validatePasswordStrength = exports.verifyRefreshToken = exports.generateRefreshToken = exports.verifyToken = exports.generateToken = exports.comparePassword = exports.hashPassword = void 0;
const bcrypt_1 =
/* istanbul ignore next */
(cov_14gunxtpen().s[4]++, __importDefault(require("bcrypt")));
const jsonwebtoken_1 =
/* istanbul ignore next */
(cov_14gunxtpen().s[5]++, __importDefault(require("jsonwebtoken")));
const config_1 =
/* istanbul ignore next */
(cov_14gunxtpen().s[6]++, require("../config/config"));
/**
 * Gera um hash da senha usando bcrypt
 * @param password - Senha em texto plano
 * @returns Promise com o hash da senha
 */
/* istanbul ignore next */
cov_14gunxtpen().s[7]++;
const hashPassword = async password => {
  /* istanbul ignore next */
  cov_14gunxtpen().f[1]++;
  const saltRounds =
  /* istanbul ignore next */
  (cov_14gunxtpen().s[8]++, 12);
  /* istanbul ignore next */
  cov_14gunxtpen().s[9]++;
  return bcrypt_1.default.hash(password, saltRounds);
};
/* istanbul ignore next */
cov_14gunxtpen().s[10]++;
exports.hashPassword = hashPassword;
/**
 * Compara uma senha em texto plano com um hash
 * @param password - Senha em texto plano
 * @param hash - Hash da senha
 * @returns Promise com resultado da comparação
 */
/* istanbul ignore next */
cov_14gunxtpen().s[11]++;
const comparePassword = async (password, hash) => {
  /* istanbul ignore next */
  cov_14gunxtpen().f[2]++;
  cov_14gunxtpen().s[12]++;
  return bcrypt_1.default.compare(password, hash);
};
/* istanbul ignore next */
cov_14gunxtpen().s[13]++;
exports.comparePassword = comparePassword;
/**
 * Gera um token JWT
 * @param payload - Dados a serem incluídos no token
 * @param expiresIn - Tempo de expiração do token (padrão: 1h)
 * @returns Token JWT
 */
/* istanbul ignore next */
cov_14gunxtpen().s[14]++;
const generateToken = (payload, expiresIn =
/* istanbul ignore next */
(cov_14gunxtpen().b[3][0]++, '1h')) => {
  /* istanbul ignore next */
  cov_14gunxtpen().f[3]++;
  cov_14gunxtpen().s[15]++;
  return jsonwebtoken_1.default.sign(payload, config_1.config.jwt.secret, {
    expiresIn
  });
};
/* istanbul ignore next */
cov_14gunxtpen().s[16]++;
exports.generateToken = generateToken;
/**
 * Verifica e decodifica um token JWT
 * @param token - Token JWT a ser verificado
 * @returns Payload decodificado do token
 */
/* istanbul ignore next */
cov_14gunxtpen().s[17]++;
const verifyToken = token => {
  /* istanbul ignore next */
  cov_14gunxtpen().f[4]++;
  cov_14gunxtpen().s[18]++;
  return jsonwebtoken_1.default.verify(token, config_1.config.jwt.secret);
};
/* istanbul ignore next */
cov_14gunxtpen().s[19]++;
exports.verifyToken = verifyToken;
/**
 * Gera um refresh token JWT
 * @param payload - Dados a serem incluídos no token
 * @returns Refresh token JWT
 */
/* istanbul ignore next */
cov_14gunxtpen().s[20]++;
const generateRefreshToken = payload => {
  /* istanbul ignore next */
  cov_14gunxtpen().f[5]++;
  cov_14gunxtpen().s[21]++;
  return jsonwebtoken_1.default.sign(payload, config_1.config.jwt.refreshSecret, {
    expiresIn: '7d'
  });
};
/* istanbul ignore next */
cov_14gunxtpen().s[22]++;
exports.generateRefreshToken = generateRefreshToken;
/**
 * Verifica um refresh token JWT
 * @param token - Refresh token a ser verificado
 * @returns Payload decodificado do refresh token
 */
/* istanbul ignore next */
cov_14gunxtpen().s[23]++;
const verifyRefreshToken = token => {
  /* istanbul ignore next */
  cov_14gunxtpen().f[6]++;
  cov_14gunxtpen().s[24]++;
  return jsonwebtoken_1.default.verify(token, config_1.config.jwt.refreshSecret);
};
/* istanbul ignore next */
cov_14gunxtpen().s[25]++;
exports.verifyRefreshToken = verifyRefreshToken;
/**
 * Valida a força de uma senha
 * @param password - Senha a ser validada
 * @returns true se a senha for forte, false caso contrário
 */
/* istanbul ignore next */
cov_14gunxtpen().s[26]++;
const validatePasswordStrength = password => {
  /* istanbul ignore next */
  cov_14gunxtpen().f[7]++;
  // Mínimo 8 caracteres, pelo menos uma letra maiúscula, uma minúscula, um número e um caractere especial
  const passwordRegex =
  /* istanbul ignore next */
  (cov_14gunxtpen().s[27]++, /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/);
  /* istanbul ignore next */
  cov_14gunxtpen().s[28]++;
  return passwordRegex.test(password);
};
/* istanbul ignore next */
cov_14gunxtpen().s[29]++;
exports.validatePasswordStrength = validatePasswordStrength;
/**
 * Valida formato de email
 * @param email - Email a ser validado
 * @returns true se o email for válido, false caso contrário
 */
/* istanbul ignore next */
cov_14gunxtpen().s[30]++;
const validateEmail = email => {
  /* istanbul ignore next */
  cov_14gunxtpen().f[8]++;
  const emailRegex =
  /* istanbul ignore next */
  (cov_14gunxtpen().s[31]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
  /* istanbul ignore next */
  cov_14gunxtpen().s[32]++;
  return emailRegex.test(email);
};
/* istanbul ignore next */
cov_14gunxtpen().s[33]++;
exports.validateEmail = validateEmail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
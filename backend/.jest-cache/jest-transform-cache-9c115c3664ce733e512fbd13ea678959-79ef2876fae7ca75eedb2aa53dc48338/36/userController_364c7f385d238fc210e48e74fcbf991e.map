{"version":3,"names":["bcrypt_1","cov_8q76owmrl","s","__importDefault","require","client_1","logger_1","prisma","PrismaClient","UserController","getUsers","req","res","f","search","role","isActive","page","b","limit","query","skip","Number","take","where","OR","name","contains","mode","email","undefined","Boolean","users","total","Promise","all","user","findMany","select","id","createdAt","updatedAt","orderBy","count","totalPages","Math","ceil","status","json","success","message","data","pagination","hasNext","hasPrev","error","default","getUserById","params","findUnique","userId","createUser","password","body","emailRegex","test","length","existingUser","saltRounds","hashedPassword","hash","create","currentUser","info","newUserId","newUserEmail","createdBy","updateUser","updateData","emailInUse","findFirst","not","Date","updatedUser","update","updatedBy","changes","Object","keys","updateUserStatus","reason","oldStatus","newStatus","deleteUser","deletedBy","getProfile","updateProfile","deleteAccount","confirmation","isPasswordValid","compare","changePassword","currentPassword","newPassword","confirmPassword","isCurrentPasswordValid","isSamePassword","hashedNewPassword","userEmail","uploadAvatar","file","allowedTypes","includes","mimetype","maxSize","size","avatarUrl","now","originalname","fileName","fileSize","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\userController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport bcrypt from 'bcrypt';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de usuário\r\ninterface UserData {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n  role?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface UserFilters {\r\n  search?: string;\r\n  role?: string;\r\n  isActive?: boolean;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de usuários\r\n */\r\nexport class UserController {\r\n  /**\r\n   * Lista todos os usuários com paginação e filtros\r\n   */\r\n  static async getUsers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        search,\r\n        role,\r\n        isActive,\r\n        page = 1,\r\n        limit = 10\r\n      }: UserFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { name: { contains: search, mode: 'insensitive' } },\r\n          { email: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (role) {\r\n        where.role = role;\r\n      }\r\n\r\n      if (isActive !== undefined) {\r\n        where.isActive = typeof isActive === 'string' ? isActive === 'true' : Boolean(isActive);\r\n      }\r\n\r\n      // Buscar usuários\r\n      const [users, total] = await Promise.all([\r\n        prisma.user.findMany({\r\n          where,\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            role: true,\r\n            isActive: true,\r\n            createdAt: true,\r\n            updatedAt: true\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy: { createdAt: 'desc' }\r\n        }),\r\n        prisma.user.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usuários listados com sucesso',\r\n        data: {\r\n          users,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar usuários', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um usuário por ID\r\n   */\r\n  static async getUserById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usuário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const user = await prisma.user.findUnique({\r\n        where: { id },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usuário encontrado',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar usuário', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria um novo usuário\r\n   */\r\n  static async createUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { name, email, password, role = 'USER', isActive = true }: UserData = req.body;\r\n\r\n      // Validações básicas\r\n      if (!name || !email || !password) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nome, email e senha são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar formato do email\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(email)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Formato de email inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar força da senha\r\n      if (password.length < 6) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A senha deve ter pelo menos 6 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usuário já existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      if (existingUser) {\r\n        res.status(409).json({\r\n          success: false,\r\n          message: 'Usuário já existe com este email'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Hash da senha\r\n      const saltRounds = 12;\r\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n\r\n      // Criar usuário\r\n      const user = await prisma.user.create({\r\n        data: {\r\n          name,\r\n          email,\r\n          password: hashedPassword,\r\n          role: role as any,\r\n          isActive\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      const currentUser = (req as any).user;\r\n      logger.info('Usuário criado', {\r\n        newUserId: user.id,\r\n        newUserEmail: user.email,\r\n        createdBy: currentUser?.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Usuário criado com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar usuário', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza um usuário existente\r\n   */\r\n  static async updateUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { name, email, password, role, isActive }: UserData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usuário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usuário existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permissões (usuário só pode editar próprio perfil, admin pode editar qualquer um)\r\n      if (currentUser.role !== 'ADMIN' && currentUser.id !== id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permissão para editar este usuário'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Preparar dados para atualização\r\n      const updateData: any = {};\r\n\r\n      if (name) updateData.name = name;\r\n      if (email) {\r\n        // Validar formato do email\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(email)) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Formato de email inválido'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Verificar se o email já está em uso por outro usuário\r\n        const emailInUse = await prisma.user.findFirst({\r\n          where: {\r\n            email,\r\n            id: { not: id }\r\n          }\r\n        });\r\n\r\n        if (emailInUse) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email já está em uso por outro usuário'\r\n          });\r\n          return;\r\n        }\r\n\r\n        updateData.email = email;\r\n      }\r\n\r\n      if (password) {\r\n        if (password.length < 6) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'A senha deve ter pelo menos 6 caracteres'\r\n          });\r\n          return;\r\n        }\r\n        const saltRounds = 12;\r\n        updateData.password = await bcrypt.hash(password, saltRounds);\r\n      }\r\n\r\n      // Apenas admin pode alterar role e isActive\r\n      if (currentUser.role === 'ADMIN') {\r\n        if (role !== undefined) updateData.role = role;\r\n        if (isActive !== undefined) updateData.isActive = isActive;\r\n      }\r\n\r\n      updateData.updatedAt = new Date();\r\n\r\n      // Atualizar usuário\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id },\r\n        data: updateData,\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Usuário atualizado', {\r\n        userId: id,\r\n        updatedBy: currentUser.id,\r\n        changes: Object.keys(updateData)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usuário atualizado com sucesso',\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar usuário', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza o status de um usuário (ativo/inativo)\r\n   */\r\n  static async updateUserStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { isActive, reason } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usuário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (typeof isActive !== 'boolean') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Campo isActive é obrigatório e deve ser boolean'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usuário existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Não permitir que o usuário desative a si mesmo\r\n      if (currentUser.id === id && !isActive) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Não é possível desativar sua própria conta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar status do usuário\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id },\r\n        data: {\r\n          isActive,\r\n          updatedAt: new Date()\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Status do usuário atualizado', {\r\n        userId: id,\r\n        oldStatus: existingUser.isActive,\r\n        newStatus: isActive,\r\n        reason: reason || 'Não informado',\r\n        updatedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Usuário ${isActive ? 'ativado' : 'desativado'} com sucesso`,\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar status do usuário', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um usuário (soft delete)\r\n   */\r\n  static async deleteUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usuário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usuário existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Não permitir que o usuário delete a si mesmo\r\n      if (currentUser.id === id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Não é possível deletar sua própria conta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Soft delete - apenas desativar o usuário\r\n      await prisma.user.update({\r\n        where: { id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Usuário desativado', {\r\n        userId: id,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usuário desativado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar usuário', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém o perfil do usuário logado\r\n   */\r\n  static async getProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil obtido com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter perfil', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza o perfil do usuário logado\r\n   */\r\n  static async updateProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { name, email, password }: UserData = req.body;\r\n\r\n      // Preparar dados para atualização\r\n      const updateData: any = {};\r\n\r\n      if (name) updateData.name = name;\r\n      \r\n      if (email) {\r\n        // Validar formato do email\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(email)) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Formato de email inválido'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Verificar se o email já está em uso\r\n        const emailInUse = await prisma.user.findFirst({\r\n          where: {\r\n            email,\r\n            id: { not: currentUser.id }\r\n          }\r\n        });\r\n\r\n        if (emailInUse) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email já está em uso'\r\n          });\r\n          return;\r\n        }\r\n\r\n        updateData.email = email;\r\n      }\r\n\r\n      if (password) {\r\n        if (password.length < 6) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'A senha deve ter pelo menos 6 caracteres'\r\n          });\r\n          return;\r\n        }\r\n        const saltRounds = 12;\r\n        updateData.password = await bcrypt.hash(password, saltRounds);\r\n      }\r\n\r\n      updateData.updatedAt = new Date();\r\n\r\n      // Atualizar perfil\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: updateData,\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Perfil atualizado', {\r\n        userId: currentUser.id,\r\n        changes: Object.keys(updateData)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil atualizado com sucesso',\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar perfil', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exclui a conta do usuário logado\r\n   */\r\n  static async deleteAccount(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { password, confirmation } = req.body;\r\n\r\n      if (!password || !confirmation) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha e confirmação são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (confirmation !== 'DELETE_MY_ACCOUNT') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Confirmação inválida. Digite \"DELETE_MY_ACCOUNT\" para confirmar'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar senha atual\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const isPasswordValid = await bcrypt.compare(password, user.password);\r\n      if (!isPasswordValid) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha incorreta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Soft delete - desativar a conta\r\n      await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Conta excluída pelo próprio usuário', {\r\n        userId: currentUser.id,\r\n        email: user.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Conta excluída com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao excluir conta', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Altera a senha do usuário logado\r\n   */\r\n  static async changePassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { currentPassword, newPassword, confirmPassword } = req.body;\r\n\r\n      // Validar dados obrigatórios\r\n      if (!currentPassword || !newPassword || !confirmPassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha atual, nova senha e confirmação são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar se as novas senhas coincidem\r\n      if (newPassword !== confirmPassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nova senha e confirmação não coincidem'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tamanho da nova senha\r\n      if (newPassword.length < 6) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A nova senha deve ter pelo menos 6 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar usuário atual\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar senha atual\r\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n      if (!isCurrentPasswordValid) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha atual incorreta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se a nova senha é diferente da atual\r\n      const isSamePassword = await bcrypt.compare(newPassword, user.password);\r\n      if (isSamePassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A nova senha deve ser diferente da senha atual'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Hash da nova senha\r\n      const saltRounds = 12;\r\n      const hashedNewPassword = await bcrypt.hash(newPassword, saltRounds);\r\n\r\n      // Atualizar senha\r\n      await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          password: hashedNewPassword,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Senha alterada', {\r\n        userId: currentUser.id,\r\n        userEmail: user.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Senha alterada com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao alterar senha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload de avatar do usuário\r\n   */\r\n  static async uploadAvatar(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const file = req.file;\r\n\r\n      if (!file) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo foi enviado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tipo de arquivo\r\n      const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n      if (!allowedTypes.includes(file.mimetype)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Tipo de arquivo não permitido. Use JPG, PNG, GIF ou WebP'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tamanho do arquivo (5MB)\r\n      const maxSize = 5 * 1024 * 1024; // 5MB\r\n      if (file.size > maxSize) {\r\n        res.status(413).json({\r\n          success: false,\r\n          message: 'Arquivo muito grande. Tamanho máximo: 5MB'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar URL do avatar (simulado - em produção seria o caminho real do arquivo)\r\n      const avatarUrl = `/uploads/avatars/${currentUser.id}_${Date.now()}_${file.originalname}`;\r\n\r\n      // Atualizar usuário com nova URL do avatar\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          // Nota: O campo avatar não existe no modelo atual, então vamos simular\r\n          updatedAt: new Date()\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Avatar atualizado', {\r\n        userId: currentUser.id,\r\n        fileName: file.originalname,\r\n        fileSize: file.size\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Avatar atualizado com sucesso',\r\n        data: {\r\n          avatarUrl,\r\n          user: updatedUser\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer upload do avatar', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserController;"],"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","ignoreList":[]}
{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\newsletterController.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\newsletterController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nconst { body, validationResult } = require('express-validator');\r\nimport * as crypto from 'crypto';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de newsletter\r\ninterface NewsletterData {\r\n  email: string;\r\n  name?: string;\r\n  preferences?: {\r\n    frequency: 'daily' | 'weekly' | 'monthly';\r\n    categories: string[];\r\n  };\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface NewsletterFilters {\r\n  status?: 'ACTIVE' | 'UNSUBSCRIBED' | 'PENDING';\r\n  search?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'email' | 'name';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n// Interface para dados de campanha\r\ninterface CampaignData {\r\n  subject: string;\r\n  content: string;\r\n  htmlContent?: string;\r\n  scheduledFor?: Date;\r\n  targetAudience?: {\r\n    status?: string[];\r\n    categories?: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de newsletter\r\n */\r\nexport class NewsletterController {\r\n  /**\r\n   * Validações para inscrição na newsletter\r\n   */\r\n  static subscribeValidation = [\r\n    body('email')\r\n      .isEmail()\r\n      .withMessage('Email deve ser válido')\r\n      .normalizeEmail(),\r\n    body('name')\r\n      .optional()\r\n      .isLength({ min: 2, max: 100 })\r\n      .withMessage('Nome deve ter entre 2 e 100 caracteres')\r\n      .trim(),\r\n    body('preferences.frequency')\r\n      .optional()\r\n      .isIn(['daily', 'weekly', 'monthly'])\r\n      .withMessage('Frequência deve ser daily, weekly ou monthly'),\r\n    body('preferences.categories')\r\n      .optional()\r\n      .isArray()\r\n      .withMessage('Categorias devem ser um array')\r\n  ];\r\n\r\n  /**\r\n   * Validações para campanha\r\n   */\r\n  static campaignValidation = [\r\n    body('subject')\r\n      .notEmpty()\r\n      .withMessage('Assunto é obrigatório')\r\n      .isLength({ min: 5, max: 200 })\r\n      .withMessage('Assunto deve ter entre 5 e 200 caracteres')\r\n      .trim(),\r\n    body('content')\r\n      .notEmpty()\r\n      .withMessage('Conteúdo é obrigatório')\r\n      .isLength({ min: 10 })\r\n      .withMessage('Conteúdo deve ter pelo menos 10 caracteres')\r\n      .trim(),\r\n    body('htmlContent')\r\n      .optional()\r\n      .isLength({ min: 10 })\r\n      .withMessage('Conteúdo HTML deve ter pelo menos 10 caracteres'),\r\n    body('scheduledFor')\r\n      .optional()\r\n      .isISO8601()\r\n      .withMessage('Data de agendamento deve ser válida')\r\n      .custom((value: string) => {\r\n        if (new Date(value) <= new Date()) {\r\n          throw new Error('Data de agendamento deve ser no futuro');\r\n        }\r\n        return true;\r\n      })\r\n  ];\r\n\r\n  /**\r\n   * Inscreve um email na newsletter\r\n   */\r\n  static async subscribe(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Verificar validações\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados inválidos',\r\n          errors: errors.array()\r\n        });\r\n        return;\r\n      }\r\n\r\n      const { email, name, preferences }: NewsletterData = req.body;\r\n\r\n      // Verificar se já existe\r\n      const existingSubscriber = await prisma.newsletter.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      if (existingSubscriber) {\r\n        if (existingSubscriber.isActive === true) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email já está inscrito na newsletter'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Reativar se estava inativo\r\n        const updatedSubscriber = await prisma.newsletter.update({\r\n          where: { email },\r\n          data: {\r\n            isActive: true,\r\n            name: name || existingSubscriber.name,\r\n            updatedAt: new Date()\r\n          }\r\n        });\r\n\r\n        // Log da ação\r\n        logger.info('Newsletter reativada', {\r\n          email,\r\n          subscriberId: updatedSubscriber.id\r\n        });\r\n\r\n        res.status(200).json({\r\n          success: true,\r\n          message: 'Inscrição reativada com sucesso',\r\n          data: {\r\n            subscriber: {\r\n              id: updatedSubscriber.id,\r\n              email: updatedSubscriber.email,\r\n              name: updatedSubscriber.name,\r\n              isActive: updatedSubscriber.isActive,\r\n              subscribedAt: updatedSubscriber.createdAt\r\n            }\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar token de confirmação\r\n      const confirmationToken = crypto.randomBytes(32).toString('hex');\r\n\r\n      // Criar nova inscrição\r\n      const subscriber = await prisma.newsletter.create({\r\n        data: {\r\n          email,\r\n          name: name || null,\r\n          preferences: preferences ? JSON.stringify(preferences) : JSON.stringify({ frequency: 'weekly', categories: [], topics: [] }),\r\n          isActive: false // TODO: Implementar sistema de confirmação adequado\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Nova inscrição na newsletter', {\r\n        email,\r\n        subscriberId: subscriber.id,\r\n        name: name || 'Não informado'\r\n      });\r\n\r\n      // TODO: Enviar email de confirmação\r\n      // await emailService.sendConfirmationEmail(email, confirmationToken);\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Inscrição realizada com sucesso. Verifique seu email para confirmar.',\r\n        data: {\r\n          subscriber: {\r\n            id: subscriber.id,\r\n            email: subscriber.email,\r\n            name: subscriber.name,\r\n            isActive: subscriber.isActive,\r\n            subscribedAt: subscriber.createdAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao inscrever na newsletter', { error, email: req.body.email });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirma inscrição na newsletter\r\n   */\r\n  // static async confirmSubscription(req: Request, res: Response): Promise<void> {\r\n  //   try {\r\n  //     const { token } = req.params;\r\n\r\n  //     if (!token) {\r\n  //       res.status(400).json({\r\n  //         success: false,\r\n  //         message: 'Token é obrigatório'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Buscar assinante pelo token (simulando - em produção seria um token real)\r\n  //     const subscriber = await prisma.newsletter.findFirst({\r\n  //       where: {\r\n  //         email: { contains: token }, // Simplificado para demo\r\n  //         isActive: false\r\n  //       }\r\n  //     });\r\n\r\n  //     if (!subscriber) {\r\n  //       res.status(404).json({\r\n  //         success: false,\r\n  //         message: 'Token inválido ou inscrição já confirmada'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Confirmar inscrição\r\n  //     const confirmedSubscriber = await prisma.newsletter.update({\r\n  //       where: { id: subscriber.id },\r\n  //       data: {\r\n  //         isActive: true,\r\n  //         updatedAt: new Date()\r\n  //       }\r\n  //     });\r\n\r\n  //     logger.info('Inscrição confirmada', {\r\n  //       subscriberId: subscriber.id,\r\n  //       email: subscriber.email\r\n  //     });\r\n\r\n  //     res.status(200).json({\r\n  //       success: true,\r\n  //       message: 'Inscrição confirmada com sucesso',\r\n  //       data: {\r\n  //         subscriber: {\r\n  //           id: confirmedSubscriber.id,\r\n  //           email: confirmedSubscriber.email,\r\n  //           name: confirmedSubscriber.name,\r\n  //           isActive: confirmedSubscriber.isActive,\r\n  //           updatedAt: confirmedSubscriber.updatedAt\r\n  //         }\r\n  //       }\r\n  //     });\r\n  //   } catch (error) {\r\n  //     logger.error('Erro ao confirmar inscrição', { error, token: req.params.token });\r\n  //     res.status(500).json({\r\n  //       success: false,\r\n  //       message: 'Erro interno do servidor'\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Obtém preferências do assinante\r\n   */\r\n  static async getPreferences(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinante pelo token (simulando - em produção seria um token real)\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: { contains: token } // Simplificado para demo\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Assinante não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Preferências obtidas com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: subscriber.id,\r\n            email: subscriber.email,\r\n            name: subscriber.name,\r\n            preferences: subscriber.preferences ? JSON.parse(subscriber.preferences) : {\r\n              frequency: 'weekly',\r\n              categories: [],\r\n              topics: []\r\n            },\r\n            isActive: subscriber.isActive\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter preferências', { error, token: req.params.token });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza preferências do assinante\r\n   */\r\n  static async updatePreferences(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n      const { frequency, categories, topics } = req.body;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinante pelo token (simulando - em produção seria um token real)\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: { contains: token } // Simplificado para demo\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Assinante não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar preferências\r\n      const updatedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          preferences: JSON.stringify({\r\n            frequency: frequency || 'weekly',\r\n            categories: categories || [],\r\n            topics: topics || []\r\n          }),\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      logger.info('Preferências atualizadas', {\r\n        subscriberId: subscriber.id,\r\n        email: subscriber.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Preferências atualizadas com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: updatedSubscriber.id,\r\n            email: updatedSubscriber.email,\r\n            preferences: updatedSubscriber.preferences ? JSON.parse(updatedSubscriber.preferences) : null\r\n          }\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar preferências:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirma inscrição na newsletter\r\n   */\r\n  static async confirmSubscription(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token de confirmação é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar confirmationToken no schema\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: token, // Usando token como email temporariamente\r\n          isActive: false\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Token inválido ou inscrição já confirmada'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Confirmar inscrição\r\n      const confirmedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          isActive: true,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Inscrição confirmada', {\r\n        email: subscriber.email,\r\n        subscriberId: subscriber.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscrição confirmada com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: confirmedSubscriber.id,\r\n            email: confirmedSubscriber.email,\r\n            name: confirmedSubscriber.name,\r\n            isActive: confirmedSubscriber.isActive,\r\n            updatedAt: confirmedSubscriber.updatedAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao confirmar inscrição', { error, token: req.params.token });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancela inscrição na newsletter\r\n   */\r\n  static async unsubscribe(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n      const { email } = req.body;\r\n\r\n      let subscriber;\r\n\r\n      if (token) {\r\n        // Cancelamento via token (link no email)\r\n        // TODO: Implementar tokens de confirmação e cancelamento no schema\r\n        subscriber = await prisma.newsletter.findFirst({\r\n          where: {\r\n            email: token, // Usando token como email temporariamente\r\n            isActive: true\r\n          }\r\n        });\r\n      } else if (email) {\r\n        // Cancelamento via email\r\n        subscriber = await prisma.newsletter.findFirst({\r\n          where: { email, isActive: true }\r\n        });\r\n      }\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Inscrição não encontrada ou já cancelada'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar token de cancelamento\r\n      const unsubscribeToken = crypto.randomBytes(32).toString('hex');\r\n\r\n      // Cancelar inscrição\r\n      const unsubscribedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Inscrição cancelada', {\r\n        email: subscriber.email,\r\n        subscriberId: subscriber.id,\r\n        method: token ? 'token' : 'email'\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscrição cancelada com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: unsubscribedSubscriber.id,\r\n            email: unsubscribedSubscriber.email,\r\n            isActive: unsubscribedSubscriber.isActive,\r\n            updatedAt: unsubscribedSubscriber.updatedAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao cancelar inscrição', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista inscritos com paginação e filtros (Admin)\r\n   */\r\n  static async getSubscribers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        status,\r\n        search,\r\n        dateFrom,\r\n        dateTo,\r\n        page = 1,\r\n        limit = 20,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: NewsletterFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (status) {\r\n        where.status = status;\r\n      }\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { email: { contains: search, mode: 'insensitive' } },\r\n          { name: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.createdAt = {};\r\n        if (dateFrom) {\r\n          where.createdAt.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.createdAt.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar inscritos\r\n      const [subscribers, total] = await Promise.all([\r\n        prisma.newsletter.findMany({\r\n          where,\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.newsletter.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      // Estatísticas por status ativo/inativo\r\n      const activeCount = await prisma.newsletter.count({ where: { isActive: true } });\r\n      const inactiveCount = await prisma.newsletter.count({ where: { isActive: false } });\r\n\r\n      const statistics = {\r\n        total,\r\n        byStatus: {\r\n          active: activeCount,\r\n          inactive: inactiveCount\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscritos listados com sucesso',\r\n        data: {\r\n          subscribers: subscribers,\r\n          statistics,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar inscritos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria uma nova campanha de newsletter (Admin)\r\n   */\r\n  static async createCampaign(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Verificar validações\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados inválidos',\r\n          errors: errors.array()\r\n        });\r\n        return;\r\n      }\r\n\r\n      const currentUser = (req as any).user;\r\n      const { subject, content, htmlContent, scheduledFor, targetAudience }: CampaignData = req.body;\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const campaign = await prisma.newsletterCampaign.create({\r\n      //   data: {\r\n      //     subject,\r\n      //     content,\r\n      //     htmlContent: htmlContent || null,\r\n      //     status: scheduledFor ? 'SCHEDULED' : 'DRAFT',\r\n      //     scheduledFor: scheduledFor ? new Date(scheduledFor) : null,\r\n      //     targetAudience: targetAudience ? JSON.stringify(targetAudience) : null,\r\n      //     createdById: currentUser.id\r\n      //   }\r\n      // });\r\n      \r\n      const campaign = { id: 'temp-id', subject, content };\r\n\r\n      // Log da ação\r\n      logger.info('Campanha de newsletter criada', {\r\n        campaignId: campaign.id,\r\n        subject: campaign.subject,\r\n        createdBy: currentUser.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Campanha criada com sucesso',\r\n        data: {\r\n          campaign: campaign\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar campanha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista campanhas (Admin)\r\n   */\r\n  static async getCampaigns(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        status,\r\n        page = 1,\r\n        limit = 20,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      } = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n      if (status) {\r\n        where.status = status;\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy as string] = sortOrder;\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const [campaigns, total] = await Promise.all([\r\n      //   prisma.newsletterCampaign.findMany({\r\n      //     where,\r\n      //     include: {\r\n      //       createdBy: {\r\n      //         select: {\r\n      //           id: true,\r\n      //           name: true,\r\n      //           email: true\r\n      //         }\r\n      //       }\r\n      //     },\r\n      //     skip,\r\n      //     take,\r\n      //     orderBy\r\n      //   }),\r\n      //   prisma.newsletterCampaign.count({ where })\r\n      // ]);\r\n      \r\n      const campaigns: any[] = [];\r\n      const total = 0;\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Campanhas listadas com sucesso',\r\n        data: {\r\n          campaigns: campaigns.map(campaign => ({\r\n            ...campaign,\r\n            targetAudience: campaign.targetAudience ? JSON.parse(campaign.targetAudience) : null\r\n          })),\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar campanhas', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envia uma campanha (Admin)\r\n   */\r\n  static async sendCampaign(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID da campanha é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const campaign = await prisma.newsletterCampaign.findUnique({\r\n      //   where: { id }\r\n      // });\r\n\r\n      // if (!campaign) {\r\n      //   res.status(404).json({\r\n      //     success: false,\r\n      //     message: 'Campanha não encontrada'\r\n      //   });\r\n      //   return;\r\n      // }\r\n\r\n      // Buscar destinatários ativos\r\n      const subscribers = await prisma.newsletter.findMany({\r\n        where: { isActive: true },\r\n        select: { id: true, email: true, name: true }\r\n      });\r\n\r\n      if (subscribers.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum destinatário encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar envio real de emails\r\n      // await emailService.sendCampaign(campaign, subscribers);\r\n\r\n      // TODO: Implementar envio real de emails e atualização de campanha\r\n      // await prisma.newsletterCampaign.update({\r\n      //   where: { id },\r\n      //   data: {\r\n      //     status: 'SENT',\r\n      //     updatedAt: new Date()\r\n      //   }\r\n      // });\r\n\r\n      // Log da ação\r\n      logger.info('Newsletter enviada', {\r\n        campaignId: id,\r\n        recipientCount: subscribers.length,\r\n        sentBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Newsletter enviada com sucesso para ${subscribers.length} destinatários`,\r\n        data: {\r\n          recipientCount: subscribers.length\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao enviar campanha', { error, campaignId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém estatísticas da newsletter (Admin)\r\n   */\r\n  static async getNewsletterStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const [subscriberStats, campaignStats, recentActivity] = await Promise.all([\r\n        // Estatísticas de inscritos por status ativo/inativo\r\n        Promise.all([\r\n          prisma.newsletter.count({ where: { isActive: true } }),\r\n          prisma.newsletter.count({ where: { isActive: false } })\r\n        ]).then(([active, inactive]) => [\r\n          { isActive: true, _count: active },\r\n          { isActive: false, _count: inactive }\r\n        ]),\r\n        // TODO: Implementar estatísticas de campanhas quando modelo for criado\r\n        // prisma.newsletterCampaign.groupBy({\r\n        //   by: ['status'],\r\n        //   _count: true,\r\n        //   _sum: { recipientCount: true }\r\n        // }),\r\n        Promise.resolve([]),\r\n        // Atividade recente\r\n        prisma.newsletter.findMany({\r\n          where: {\r\n            createdAt: { gte: dateLimit }\r\n          },\r\n          select: {\r\n            id: true,\r\n            email: true,\r\n            isActive: true,\r\n            createdAt: true\r\n          },\r\n          orderBy: { createdAt: 'desc' },\r\n          take: 10\r\n        })\r\n      ]);\r\n\r\n      const statistics = {\r\n        subscribers: {\r\n          total: subscriberStats.reduce((acc, stat) => acc + stat._count, 0),\r\n          byStatus: subscriberStats.reduce((acc, stat) => {\r\n            acc[stat.isActive ? 'active' : 'inactive'] = stat._count;\r\n            return acc;\r\n          }, {} as any)\r\n        },\r\n        // TODO: Implementar estatísticas de campanhas quando modelo for criado\r\n        campaigns: {\r\n          total: 0,\r\n          totalRecipients: 0,\r\n          byStatus: {}\r\n        },\r\n        recentActivity: {\r\n          period: periodDays,\r\n          newSubscribers: recentActivity.length,\r\n          subscribers: recentActivity\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estatísticas obtidas com sucesso',\r\n        data: { statistics }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estatísticas da newsletter', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envia uma campanha para os assinantes (Admin)\r\n   */\r\n  static async sendCampaignToSubscribers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID da campanha é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinantes ativos\r\n      const activeSubscribers = await prisma.newsletter.findMany({\r\n        where: {\r\n          isActive: true\r\n        },\r\n        select: {\r\n          id: true,\r\n          email: true,\r\n          name: true\r\n        }\r\n      });\r\n\r\n      if (activeSubscribers.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum assinante ativo encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Simular envio da campanha\r\n      const campaignData = {\r\n        id,\r\n        subject: `Campanha ${id}`,\r\n        content: 'Conteúdo da campanha...',\r\n        recipients: activeSubscribers.length,\r\n        sentAt: new Date()\r\n      };\r\n\r\n      // Log da ação\r\n      logger.info('Campanha enviada', {\r\n        campaignId: id,\r\n        recipients: activeSubscribers.length,\r\n        sentBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Campanha enviada com sucesso para ${activeSubscribers.length} assinantes`,\r\n        data: {\r\n          campaign: campaignData,\r\n          recipients: activeSubscribers.length\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao enviar campanha', { error, campaignId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default NewsletterController;"],"version":3}
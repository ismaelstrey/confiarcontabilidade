{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\server.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\server.ts"],"sourcesContent":["import express from 'express';\r\nimport dotenv from 'dotenv';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { setupSwagger } from './docs/swagger';\r\nimport { cacheService } from './services/cacheService';\r\n\r\n// Importar middlewares personalizados\r\nimport { errorHandler } from './middlewares/errorHandler';\r\nimport { logger } from './middlewares/logger';\r\nimport { requestLogger } from './middlewares/requestLogger';\r\nimport {\r\n  corsMiddleware,\r\n  helmetMiddleware,\r\n  generalRateLimit,\r\n  authRateLimit,\r\n  apiRateLimit,\r\n  uploadRateLimit,\r\n  compressionMiddleware,\r\n  customSecurityHeaders,\r\n  securityLogger\r\n} from './middlewares/security';\r\n\r\n// Importar rotas\r\nimport authRoutes from './routes/authRoutes';\r\nimport userRoutes from './routes/userRoutes';\r\nimport articleRoutes from './routes/articleRoutes';\r\nimport contactRoutes from './routes/contactRoutes';\r\nimport calculatorRoutes from './routes/calculatorRoutes';\r\nimport newsletterRoutes from './routes/newsletterRoutes';\r\nimport uploadRoutes from './routes/uploadRoutes';\r\nimport adminRoutes from './routes/adminRoutes';\r\nimport cacheRoutes from './routes/cacheRoutes';\r\n\r\n// Carregar variáveis de ambiente\r\ndotenv.config();\r\n\r\n// Inicializar Prisma Client\r\nexport const prisma = new PrismaClient({\r\n  log: process.env.NODE_ENV === 'development' ? ['query', 'info', 'warn', 'error'] : ['error'],\r\n});\r\n\r\n// Criar aplicação Express\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3001;\r\nconst API_VERSION = process.env.API_VERSION || 'v1';\r\n\r\n// Configuração do Swagger será feita através do módulo dedicado\r\n\r\n// Middlewares de segurança\r\napp.use(customSecurityHeaders);\r\napp.use(helmetMiddleware);\r\napp.use(corsMiddleware);\r\napp.use(compressionMiddleware);\r\napp.use(generalRateLimit);\r\napp.use(securityLogger);\r\n\r\n// Middlewares de parsing\r\napp.use(express.json({ limit: '10mb' }));\r\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n// Middleware de logging\r\napp.use(requestLogger);\r\n\r\n// Configurar documentação da API\r\nsetupSwagger(app);\r\n\r\n// Health check endpoint\r\napp.get('/health', async (req, res) => {\r\n  try {\r\n    // Verificar conexão com o banco de dados\r\n    await prisma.$queryRaw`SELECT 1`;\r\n    \r\n    // Verificar conexão com o Redis\r\n    const redisStatus = cacheService.isRedisConnected() ? 'connected' : 'disconnected';\r\n    \r\n    const healthStatus = {\r\n      status: 'healthy',\r\n      timestamp: new Date().toISOString(),\r\n      uptime: process.uptime(),\r\n      environment: process.env.NODE_ENV || 'development',\r\n      version: process.env.npm_package_version || '1.0.0',\r\n      database: 'connected',\r\n      cache: redisStatus,\r\n      memory: {\r\n        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',\r\n        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'\r\n      }\r\n    };\r\n    \r\n    res.status(200).json(healthStatus);\r\n  } catch (error) {\r\n    res.status(503).json({\r\n      status: 'unhealthy',\r\n      timestamp: new Date().toISOString(),\r\n      error: 'Database connection failed'\r\n    });\r\n  }\r\n});\r\n\r\n// Rotas da API\r\nconst apiRouter = express.Router();\r\n\r\n// Registrar rotas com rate limiting específico\r\napiRouter.use('/auth', authRateLimit, authRoutes);\r\napiRouter.use('/users', apiRateLimit, userRoutes);\r\napiRouter.use('/articles', apiRateLimit, articleRoutes);\r\napiRouter.use('/contact', apiRateLimit, contactRoutes);\r\napiRouter.use('/calculator', apiRateLimit, calculatorRoutes);\r\napiRouter.use('/newsletter', apiRateLimit, newsletterRoutes);\r\napiRouter.use('/upload', uploadRateLimit, uploadRoutes);\r\napiRouter.use('/admin', apiRateLimit, adminRoutes);\r\napiRouter.use('/cache', apiRateLimit, cacheRoutes);\r\n\r\n// Usar o roteador da API\r\napp.use(`/api/${API_VERSION}`, apiRouter);\r\n\r\n// Rota raiz\r\napp.get('/', (req, res) => {\r\n  res.json({\r\n    message: 'Contabilidade Igrejinha API',\r\n    version: process.env.SWAGGER_VERSION || '1.0.0',\r\n    documentation: `/api-docs`,\r\n    health: '/health',\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n});\r\n\r\n// Middleware para rotas não encontradas\r\napp.use('*', (req, res) => {\r\n  res.status(404).json({\r\n    error: 'Rota não encontrada',\r\n    message: `A rota ${req.originalUrl} não existe nesta API`,\r\n    availableRoutes: {\r\n      documentation: '/api-docs',\r\n      health: '/health',\r\n      api: `/api/${API_VERSION}`,\r\n    },\r\n  });\r\n});\r\n\r\n// Middleware de tratamento de erros (deve ser o último)\r\napp.use(errorHandler);\r\n\r\n// Função para inicializar o servidor\r\nconst startServer = async () => {\r\n  try {\r\n    // Conectar ao banco de dados\r\n    await prisma.$connect();\r\n    logger.info('Conectado ao banco de dados PostgreSQL');\r\n\r\n    // Conectar ao Redis (cache)\r\n    try {\r\n      await cacheService.connect();\r\n      logger.info('✅ Redis cache connected successfully');\r\n    } catch (error) {\r\n      logger.warn('⚠️ Redis cache connection failed, continuing without cache:', error);\r\n    }\r\n\r\n    // Iniciar servidor\r\n    app.listen(PORT, () => {\r\n      logger.info(`🚀 Servidor rodando na porta ${PORT}`);\r\n      logger.info(`📚 Documentação disponível em http://localhost:${PORT}/api-docs`);\r\n      logger.info(`🏥 Health check disponível em http://localhost:${PORT}/health`);\r\n      logger.info(`🌍 Ambiente: ${process.env.NODE_ENV}`);\r\n    });\r\n  } catch (error) {\r\n    logger.error('Erro ao inicializar o servidor:', error);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n// Tratamento de sinais de encerramento\r\nprocess.on('SIGINT', async () => {\r\n  logger.info('Recebido SIGINT. Encerrando servidor graciosamente...');\r\n  await cacheService.disconnect();\r\n  await prisma.$disconnect();\r\n  process.exit(0);\r\n});\r\n\r\nprocess.on('SIGTERM', async () => {\r\n  logger.info('Recebido SIGTERM. Encerrando servidor graciosamente...');\r\n  await cacheService.disconnect();\r\n  await prisma.$disconnect();\r\n  process.exit(0);\r\n});\r\n\r\n// Tratamento de erros não capturados\r\nprocess.on('uncaughtException', (error) => {\r\n  logger.error('Erro não capturado:', error);\r\n  process.exit(1);\r\n});\r\n\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  logger.error('Promise rejeitada não tratada:', { reason, promise });\r\n  process.exit(1);\r\n});\r\n\r\n// Inicializar servidor\r\nif (require.main === module) {\r\n  startServer();\r\n}\r\n\r\nexport default app;\r\nexport { app };"],"version":3}
f03d133f9729432e401066ff4f5a61d1
"use strict";

/* istanbul ignore next */
function cov_114288k73u() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\requestLogger.ts";
  var hash = "77df7398d675498286a790c3972d2fb13bb52902";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\requestLogger.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 89
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 78,
          column: 1
        }
      },
      "4": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 32
        }
      },
      "5": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 15,
          column: 5
        }
      },
      "6": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 19,
          column: 5
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 41
        }
      },
      "8": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 31
        }
      },
      "9": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 65,
          column: 6
        }
      },
      "10": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 34
        }
      },
      "11": {
        start: {
          line: 24,
          column: 29
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 48
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 48
        }
      },
      "14": {
        start: {
          line: 28,
          column: 36
        },
        end: {
          line: 28,
          column: 61
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 104
        }
      },
      "16": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 29
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "18": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 30
        }
      },
      "19": {
        start: {
          line: 35,
          column: 13
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "20": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 31
        }
      },
      "21": {
        start: {
          line: 39,
          column: 24
        },
        end: {
          line: 39,
          column: 112
        }
      },
      "22": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      },
      "23": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "24": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 53,
          column: 15
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 61,
          column: 15
        }
      },
      "27": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 65
        }
      },
      "28": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "29": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "30": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "31": {
        start: {
          line: 79,
          column: 0
        },
        end: {
          line: 79,
          column: 38
        }
      },
      "32": {
        start: {
          line: 81,
          column: 26
        },
        end: {
          line: 103,
          column: 1
        }
      },
      "33": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "34": {
        start: {
          line: 84,
          column: 32
        },
        end: {
          line: 84,
          column: 87
        }
      },
      "35": {
        start: {
          line: 85,
          column: 21
        },
        end: {
          line: 85,
          column: 36
        }
      },
      "36": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "37": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "38": {
        start: {
          line: 88,
          column: 46
        },
        end: {
          line: 88,
          column: 79
        }
      },
      "39": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 41
        }
      },
      "40": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "41": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "42": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 102,
          column: 11
        }
      },
      "43": {
        start: {
          line: 104,
          column: 0
        },
        end: {
          line: 104,
          column: 46
        }
      },
      "44": {
        start: {
          line: 106,
          column: 28
        },
        end: {
          line: 128,
          column: 1
        }
      },
      "45": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 126,
          column: 5
        }
      },
      "46": {
        start: {
          line: 108,
          column: 33
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "47": {
        start: {
          line: 116,
          column: 32
        },
        end: {
          line: 116,
          column: 127
        }
      },
      "48": {
        start: {
          line: 116,
          column: 106
        },
        end: {
          line: 116,
          column: 125
        }
      },
      "49": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "50": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "51": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "52": {
        start: {
          line: 129,
          column: 0
        },
        end: {
          line: 129,
          column: 50
        }
      },
      "53": {
        start: {
          line: 130,
          column: 0
        },
        end: {
          line: 130,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 22
          },
          end: {
            line: 6,
            column: 23
          }
        },
        loc: {
          start: {
            line: 6,
            column: 42
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 14
          },
          end: {
            line: 22,
            column: 15
          }
        },
        loc: {
          start: {
            line: 22,
            column: 51
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 81,
            column: 26
          },
          end: {
            line: 81,
            column: 27
          }
        },
        loc: {
          start: {
            line: 81,
            column: 46
          },
          end: {
            line: 103,
            column: 1
          }
        },
        line: 81
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 87,
            column: 34
          },
          end: {
            line: 87,
            column: 35
          }
        },
        loc: {
          start: {
            line: 87,
            column: 41
          },
          end: {
            line: 91,
            column: 9
          }
        },
        line: 87
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 88,
            column: 37
          },
          end: {
            line: 88,
            column: 38
          }
        },
        loc: {
          start: {
            line: 88,
            column: 46
          },
          end: {
            line: 88,
            column: 79
          }
        },
        line: 88
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 106,
            column: 28
          },
          end: {
            line: 106,
            column: 29
          }
        },
        loc: {
          start: {
            line: 106,
            column: 48
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 106
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 116,
            column: 91
          },
          end: {
            line: 116,
            column: 92
          }
        },
        loc: {
          start: {
            line: 116,
            column: 106
          },
          end: {
            line: 116,
            column: 125
          }
        },
        line: 116
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 13
          },
          end: {
            line: 11,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 13
          },
          end: {
            line: 11,
            column: 28
          }
        }, {
          start: {
            line: 11,
            column: 32
          },
          end: {
            line: 11,
            column: 39
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 18
          }
        }, {
          start: {
            line: 12,
            column: 22
          },
          end: {
            line: 12,
            column: 46
          }
        }, {
          start: {
            line: 12,
            column: 50
          },
          end: {
            line: 12,
            column: 59
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 36
          },
          end: {
            line: 29,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 58
          },
          end: {
            line: 29,
            column: 91
          }
        }, {
          start: {
            line: 29,
            column: 94
          },
          end: {
            line: 29,
            column: 103
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: 35,
            column: 13
          },
          end: {
            line: 37,
            column: 9
          }
        }],
        line: 32
      },
      "5": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 32,
            column: 33
          }
        }, {
          start: {
            line: 32,
            column: 37
          },
          end: {
            line: 32,
            column: 57
          }
        }],
        line: 32
      },
      "6": {
        loc: {
          start: {
            line: 35,
            column: 13
          },
          end: {
            line: 37,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 13
          },
          end: {
            line: 37,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "7": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "8": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "9": {
        loc: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "10": {
        loc: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "11": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 82,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 82,
            column: 46
          }
        }, {
          start: {
            line: 82,
            column: 50
          },
          end: {
            line: 82,
            column: 78
          }
        }],
        line: 82
      },
      "12": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "13": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "14": {
        loc: {
          start: {
            line: 96,
            column: 21
          },
          end: {
            line: 96,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 21
          },
          end: {
            line: 96,
            column: 36
          }
        }, {
          start: {
            line: 96,
            column: 40
          },
          end: {
            line: 96,
            column: 47
          }
        }],
        line: 96
      },
      "15": {
        loc: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "16": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 46
          }
        }, {
          start: {
            line: 107,
            column: 50
          },
          end: {
            line: 107,
            column: 78
          }
        }],
        line: 107
      },
      "17": {
        loc: {
          start: {
            line: 111,
            column: 29
          },
          end: {
            line: 111,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 56
          },
          end: {
            line: 111,
            column: 67
          }
        }, {
          start: {
            line: 111,
            column: 70
          },
          end: {
            line: 111,
            column: 85
          }
        }],
        line: 111
      },
      "18": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "19": {
        loc: {
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 36
          }
        }, {
          start: {
            line: 121,
            column: 40
          },
          end: {
            line: 121,
            column: 47
          }
        }],
        line: 121
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\requestLogger.ts",
      mappings: ";;;AACA,qCAAkC;AAelC,yCAAyC;AAClC,MAAM,aAAa,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC/E,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,+BAA+B;IAC/B,MAAM,WAAW,GAAmB;QAClC,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,GAAG,EAAE,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,GAAG;QAC/B,EAAE,EAAE,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,MAAM,CAAC,aAAa,IAAI,SAAS;QACnD,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;QAChC,OAAO,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC;KAC5B,CAAC;IAEF,oDAAoD;IACpD,IAAK,GAAW,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;QAC1B,WAAW,CAAC,MAAM,GAAI,GAAW,CAAC,IAAI,CAAC,EAAE,CAAC;IAC5C,CAAC;IAED,6DAA6D;IAC7D,MAAM,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;IAC5B,GAAG,CAAC,GAAG,GAAG,UAAU,KAAW,EAAE,QAAwC,EAAE,QAAqB;QAC9F,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC3B,MAAM,YAAY,GAAG,OAAO,GAAG,SAAS,CAAC;QAEzC,oBAAoB;QACpB,WAAW,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;QACxC,WAAW,CAAC,YAAY,GAAG,YAAY,CAAC;QACxC,MAAM,mBAAmB,GAAG,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACtD,WAAW,CAAC,aAAa,GAAG,mBAAmB,CAAC,CAAC,CAAC,QAAQ,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAEhG,iDAAiD;QACjD,IAAI,QAAQ,GAA8B,MAAM,CAAC;QACjD,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;YAClD,QAAQ,GAAG,MAAM,CAAC;QACpB,CAAC;aAAM,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE,CAAC;YACjC,QAAQ,GAAG,OAAO,CAAC;QACrB,CAAC;QAED,wBAAwB;QACxB,MAAM,OAAO,GAAG,GAAG,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,UAAU,MAAM,YAAY,IAAI,CAAC;QAEzG,oBAAoB;QACpB,eAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE;YAC5B,IAAI,EAAE,SAAS;YACf,GAAG,WAAW;YACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;QAEH,sDAAsD;QACtD,IAAI,YAAY,GAAG,IAAI,EAAE,CAAC;YACxB,eAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBACnC,IAAI,EAAE,aAAa;gBACnB,GAAG,WAAW;gBACd,SAAS,EAAE,QAAQ;gBACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;QACL,CAAC;QAED,+BAA+B;QAC/B,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE,CAAC;YAC1B,eAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE;gBACpC,IAAI,EAAE,cAAc;gBACpB,GAAG,WAAW;gBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;QACL,CAAC;QAED,2BAA2B;QAC3B,OAAQ,WAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACpE,CAAC,CAAC;IAEF,mDAAmD;IACnD,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,MAAM,EAAE,CAAC;QACjC,eAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE;YAC/B,IAAI,EAAE,eAAe;YACrB,MAAM,EAAE,WAAW,CAAC,MAAM;YAC1B,GAAG,EAAE,WAAW,CAAC,GAAG;YACpB,EAAE,EAAE,WAAW,CAAC,EAAE;YAClB,SAAS,EAAE,WAAW,CAAC,SAAS;YAChC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC;IACL,CAAC;IAED,IAAI,EAAE,CAAC;AACT,CAAC,CAAC;AAnFW,QAAA,aAAa,iBAmFxB;AAEF,4EAA4E;AACrE,MAAM,iBAAiB,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACnF,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,MAAM,EAAE,CAAC;QAC3E,qCAAqC;QACrC,MAAM,eAAe,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC;QAChF,MAAM,IAAI,GAAG,EAAE,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QAE7B,2BAA2B;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC9B,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;gBACrE,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;YAC3B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACjC,eAAM,CAAC,KAAK,CAAC,cAAc,EAAE;gBAC3B,IAAI,EAAE,cAAc;gBACpB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,GAAG,EAAE,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,GAAG;gBAC/B,IAAI;gBACJ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,IAAI,EAAE,CAAC;AACT,CAAC,CAAC;AAzBW,QAAA,iBAAiB,qBAyB5B;AAEF,iDAAiD;AAC1C,MAAM,mBAAmB,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IACrF,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,MAAM,EAAE,CAAC;QAC3E,MAAM,gBAAgB,GAAG;YACvB,cAAc,EAAE,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC;YACvC,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC;YAC3B,eAAe,EAAE,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,eAAe;YACzE,iBAAiB,EAAE,GAAG,CAAC,GAAG,CAAC,iBAAiB,CAAC;YAC7C,WAAW,EAAE,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC;SAClC,CAAC;QAEF,4BAA4B;QAC5B,MAAM,eAAe,GAAG,MAAM,CAAC,WAAW,CACxC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,SAAS,CAAC,CAC5E,CAAC;QAEF,IAAI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5C,eAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE;gBAC9B,IAAI,EAAE,iBAAiB;gBACvB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,GAAG,EAAE,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,GAAG;gBAC/B,OAAO,EAAE,eAAe;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,IAAI,EAAE,CAAC;AACT,CAAC,CAAC;AA3BW,QAAA,mBAAmB,uBA2B9B;AAEF,kBAAe,qBAAa,CAAC",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\requestLogger.ts"],
      sourcesContent: ["import type { Request, Response, NextFunction } from 'express';\r\nimport { logger } from './logger';\r\n\r\n// Interface para dados da requisi\xE7\xE3o\r\ninterface RequestLogData {\r\n  method: string;\r\n  url: string;\r\n  ip: string;\r\n  userAgent?: string | undefined;\r\n  userId?: string;\r\n  statusCode?: number;\r\n  responseTime?: number;\r\n  contentLength?: number | undefined;\r\n  referer?: string | undefined;\r\n}\r\n\r\n// Middleware para logging de requisi\xE7\xF5es\r\nexport const requestLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  const startTime = Date.now();\r\n  \r\n  // Capturar dados da requisi\xE7\xE3o\r\n  const requestData: RequestLogData = {\r\n    method: req.method,\r\n    url: req.originalUrl || req.url,\r\n    ip: req.ip || req.socket.remoteAddress || 'unknown',\r\n    userAgent: req.get('User-Agent'),\r\n    referer: req.get('Referer'),\r\n  };\r\n\r\n  // Capturar userId se dispon\xEDvel (ap\xF3s autentica\xE7\xE3o)\r\n  if ((req as any).user?.id) {\r\n    requestData.userId = (req as any).user.id;\r\n  }\r\n\r\n  // Override do m\xE9todo res.end para capturar dados da resposta\r\n  const originalEnd = res.end;\r\n  res.end = function (chunk?: any, encoding?: BufferEncoding | (() => void), callback?: () => void) {\r\n    const endTime = Date.now();\r\n    const responseTime = endTime - startTime;\r\n    \r\n    // Dados da resposta\r\n    requestData.statusCode = res.statusCode;\r\n    requestData.responseTime = responseTime;\r\n    const contentLengthHeader = res.get('Content-Length');\r\n    requestData.contentLength = contentLengthHeader ? parseInt(contentLengthHeader, 10) : undefined;\r\n\r\n    // Determinar n\xEDvel do log baseado no status code\r\n    let logLevel: 'info' | 'warn' | 'error' = 'info';\r\n    if (res.statusCode >= 400 && res.statusCode < 500) {\r\n      logLevel = 'warn';\r\n    } else if (res.statusCode >= 500) {\r\n      logLevel = 'error';\r\n    }\r\n\r\n    // Criar mensagem de log\r\n    const message = `${requestData.method} ${requestData.url} ${requestData.statusCode} - ${responseTime}ms`;\r\n    \r\n    // Log da requisi\xE7\xE3o\r\n    logger.log(logLevel, message, {\r\n      type: 'request',\r\n      ...requestData,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    // Log adicional para requisi\xE7\xF5es lentas (> 1 segundo)\r\n    if (responseTime > 1000) {\r\n      logger.warn('Slow Request Detected', {\r\n        type: 'performance',\r\n        ...requestData,\r\n        threshold: '1000ms',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Log adicional para erros 5xx\r\n    if (res.statusCode >= 500) {\r\n      logger.error('Server Error Response', {\r\n        type: 'server_error',\r\n        ...requestData,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Chamar o m\xE9todo original\r\n    return (originalEnd as any).call(this, chunk, encoding, callback);\r\n  };\r\n\r\n  // Log inicial da requisi\xE7\xE3o (apenas em modo debug)\r\n  if (process.env.DEBUG === 'true') {\r\n    logger.debug('Incoming Request', {\r\n      type: 'request_start',\r\n      method: requestData.method,\r\n      url: requestData.url,\r\n      ip: requestData.ip,\r\n      userAgent: requestData.userAgent,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  }\r\n\r\n  next();\r\n};\r\n\r\n// Middleware para logging de body da requisi\xE7\xE3o (apenas em desenvolvimento)\r\nexport const requestBodyLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  if (process.env.NODE_ENV === 'development' && process.env.DEBUG === 'true') {\r\n    // N\xE3o logar senhas e dados sens\xEDveis\r\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'authorization'];\r\n    const body = { ...req.body };\r\n    \r\n    // Remover campos sens\xEDveis\r\n    Object.keys(body).forEach(key => {\r\n      if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {\r\n        body[key] = '[REDACTED]';\r\n      }\r\n    });\r\n\r\n    if (Object.keys(body).length > 0) {\r\n      logger.debug('Request Body', {\r\n        type: 'request_body',\r\n        method: req.method,\r\n        url: req.originalUrl || req.url,\r\n        body,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\n// Middleware para logging de headers espec\xEDficos\r\nexport const requestHeaderLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  if (process.env.NODE_ENV === 'development' && process.env.DEBUG === 'true') {\r\n    const importantHeaders = {\r\n      'content-type': req.get('Content-Type'),\r\n      'accept': req.get('Accept'),\r\n      'authorization': req.get('Authorization') ? '[PRESENT]' : '[NOT_PRESENT]',\r\n      'x-forwarded-for': req.get('X-Forwarded-For'),\r\n      'x-real-ip': req.get('X-Real-IP'),\r\n    };\r\n\r\n    // Filtrar headers undefined\r\n    const filteredHeaders = Object.fromEntries(\r\n      Object.entries(importantHeaders).filter(([, value]) => value !== undefined)\r\n    );\r\n\r\n    if (Object.keys(filteredHeaders).length > 0) {\r\n      logger.debug('Request Headers', {\r\n        type: 'request_headers',\r\n        method: req.method,\r\n        url: req.originalUrl || req.url,\r\n        headers: filteredHeaders,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\nexport default requestLogger;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "77df7398d675498286a790c3972d2fb13bb52902"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_114288k73u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_114288k73u();
cov_114288k73u().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_114288k73u().s[1]++;
exports.requestHeaderLogger = exports.requestBodyLogger = exports.requestLogger = void 0;
const logger_1 =
/* istanbul ignore next */
(cov_114288k73u().s[2]++, require("./logger"));
// Middleware para logging de requisições
/* istanbul ignore next */
cov_114288k73u().s[3]++;
const requestLogger = (req, res, next) => {
  /* istanbul ignore next */
  cov_114288k73u().f[0]++;
  const startTime =
  /* istanbul ignore next */
  (cov_114288k73u().s[4]++, Date.now());
  // Capturar dados da requisição
  const requestData =
  /* istanbul ignore next */
  (cov_114288k73u().s[5]++, {
    method: req.method,
    url:
    /* istanbul ignore next */
    (cov_114288k73u().b[0][0]++, req.originalUrl) ||
    /* istanbul ignore next */
    (cov_114288k73u().b[0][1]++, req.url),
    ip:
    /* istanbul ignore next */
    (cov_114288k73u().b[1][0]++, req.ip) ||
    /* istanbul ignore next */
    (cov_114288k73u().b[1][1]++, req.socket.remoteAddress) ||
    /* istanbul ignore next */
    (cov_114288k73u().b[1][2]++, 'unknown'),
    userAgent: req.get('User-Agent'),
    referer: req.get('Referer')
  });
  // Capturar userId se disponível (após autenticação)
  /* istanbul ignore next */
  cov_114288k73u().s[6]++;
  if (req.user?.id) {
    /* istanbul ignore next */
    cov_114288k73u().b[2][0]++;
    cov_114288k73u().s[7]++;
    requestData.userId = req.user.id;
  } else
  /* istanbul ignore next */
  {
    cov_114288k73u().b[2][1]++;
  }
  // Override do método res.end para capturar dados da resposta
  const originalEnd =
  /* istanbul ignore next */
  (cov_114288k73u().s[8]++, res.end);
  /* istanbul ignore next */
  cov_114288k73u().s[9]++;
  res.end = function (chunk, encoding, callback) {
    /* istanbul ignore next */
    cov_114288k73u().f[1]++;
    const endTime =
    /* istanbul ignore next */
    (cov_114288k73u().s[10]++, Date.now());
    const responseTime =
    /* istanbul ignore next */
    (cov_114288k73u().s[11]++, endTime - startTime);
    // Dados da resposta
    /* istanbul ignore next */
    cov_114288k73u().s[12]++;
    requestData.statusCode = res.statusCode;
    /* istanbul ignore next */
    cov_114288k73u().s[13]++;
    requestData.responseTime = responseTime;
    const contentLengthHeader =
    /* istanbul ignore next */
    (cov_114288k73u().s[14]++, res.get('Content-Length'));
    /* istanbul ignore next */
    cov_114288k73u().s[15]++;
    requestData.contentLength = contentLengthHeader ?
    /* istanbul ignore next */
    (cov_114288k73u().b[3][0]++, parseInt(contentLengthHeader, 10)) :
    /* istanbul ignore next */
    (cov_114288k73u().b[3][1]++, undefined);
    // Determinar nível do log baseado no status code
    let logLevel =
    /* istanbul ignore next */
    (cov_114288k73u().s[16]++, 'info');
    /* istanbul ignore next */
    cov_114288k73u().s[17]++;
    if (
    /* istanbul ignore next */
    (cov_114288k73u().b[5][0]++, res.statusCode >= 400) &&
    /* istanbul ignore next */
    (cov_114288k73u().b[5][1]++, res.statusCode < 500)) {
      /* istanbul ignore next */
      cov_114288k73u().b[4][0]++;
      cov_114288k73u().s[18]++;
      logLevel = 'warn';
    } else {
      /* istanbul ignore next */
      cov_114288k73u().b[4][1]++;
      cov_114288k73u().s[19]++;
      if (res.statusCode >= 500) {
        /* istanbul ignore next */
        cov_114288k73u().b[6][0]++;
        cov_114288k73u().s[20]++;
        logLevel = 'error';
      } else
      /* istanbul ignore next */
      {
        cov_114288k73u().b[6][1]++;
      }
    }
    // Criar mensagem de log
    const message =
    /* istanbul ignore next */
    (cov_114288k73u().s[21]++, `${requestData.method} ${requestData.url} ${requestData.statusCode} - ${responseTime}ms`);
    // Log da requisição
    /* istanbul ignore next */
    cov_114288k73u().s[22]++;
    logger_1.logger.log(logLevel, message, {
      type: 'request',
      ...requestData,
      timestamp: new Date().toISOString()
    });
    // Log adicional para requisições lentas (> 1 segundo)
    /* istanbul ignore next */
    cov_114288k73u().s[23]++;
    if (responseTime > 1000) {
      /* istanbul ignore next */
      cov_114288k73u().b[7][0]++;
      cov_114288k73u().s[24]++;
      logger_1.logger.warn('Slow Request Detected', {
        type: 'performance',
        ...requestData,
        threshold: '1000ms',
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_114288k73u().b[7][1]++;
    }
    // Log adicional para erros 5xx
    cov_114288k73u().s[25]++;
    if (res.statusCode >= 500) {
      /* istanbul ignore next */
      cov_114288k73u().b[8][0]++;
      cov_114288k73u().s[26]++;
      logger_1.logger.error('Server Error Response', {
        type: 'server_error',
        ...requestData,
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_114288k73u().b[8][1]++;
    }
    // Chamar o método original
    cov_114288k73u().s[27]++;
    return originalEnd.call(this, chunk, encoding, callback);
  };
  // Log inicial da requisição (apenas em modo debug)
  /* istanbul ignore next */
  cov_114288k73u().s[28]++;
  if (process.env.DEBUG === 'true') {
    /* istanbul ignore next */
    cov_114288k73u().b[9][0]++;
    cov_114288k73u().s[29]++;
    logger_1.logger.debug('Incoming Request', {
      type: 'request_start',
      method: requestData.method,
      url: requestData.url,
      ip: requestData.ip,
      userAgent: requestData.userAgent,
      timestamp: new Date().toISOString()
    });
  } else
  /* istanbul ignore next */
  {
    cov_114288k73u().b[9][1]++;
  }
  cov_114288k73u().s[30]++;
  next();
};
/* istanbul ignore next */
cov_114288k73u().s[31]++;
exports.requestLogger = requestLogger;
// Middleware para logging de body da requisição (apenas em desenvolvimento)
/* istanbul ignore next */
cov_114288k73u().s[32]++;
const requestBodyLogger = (req, res, next) => {
  /* istanbul ignore next */
  cov_114288k73u().f[2]++;
  cov_114288k73u().s[33]++;
  if (
  /* istanbul ignore next */
  (cov_114288k73u().b[11][0]++, process.env.NODE_ENV === 'development') &&
  /* istanbul ignore next */
  (cov_114288k73u().b[11][1]++, process.env.DEBUG === 'true')) {
    /* istanbul ignore next */
    cov_114288k73u().b[10][0]++;
    // Não logar senhas e dados sensíveis
    const sensitiveFields =
    /* istanbul ignore next */
    (cov_114288k73u().s[34]++, ['password', 'token', 'secret', 'key', 'authorization']);
    const body =
    /* istanbul ignore next */
    (cov_114288k73u().s[35]++, {
      ...req.body
    });
    // Remover campos sensíveis
    /* istanbul ignore next */
    cov_114288k73u().s[36]++;
    Object.keys(body).forEach(key => {
      /* istanbul ignore next */
      cov_114288k73u().f[3]++;
      cov_114288k73u().s[37]++;
      if (sensitiveFields.some(field => {
        /* istanbul ignore next */
        cov_114288k73u().f[4]++;
        cov_114288k73u().s[38]++;
        return key.toLowerCase().includes(field);
      })) {
        /* istanbul ignore next */
        cov_114288k73u().b[12][0]++;
        cov_114288k73u().s[39]++;
        body[key] = '[REDACTED]';
      } else
      /* istanbul ignore next */
      {
        cov_114288k73u().b[12][1]++;
      }
    });
    /* istanbul ignore next */
    cov_114288k73u().s[40]++;
    if (Object.keys(body).length > 0) {
      /* istanbul ignore next */
      cov_114288k73u().b[13][0]++;
      cov_114288k73u().s[41]++;
      logger_1.logger.debug('Request Body', {
        type: 'request_body',
        method: req.method,
        url:
        /* istanbul ignore next */
        (cov_114288k73u().b[14][0]++, req.originalUrl) ||
        /* istanbul ignore next */
        (cov_114288k73u().b[14][1]++, req.url),
        body,
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_114288k73u().b[13][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_114288k73u().b[10][1]++;
  }
  cov_114288k73u().s[42]++;
  next();
};
/* istanbul ignore next */
cov_114288k73u().s[43]++;
exports.requestBodyLogger = requestBodyLogger;
// Middleware para logging de headers específicos
/* istanbul ignore next */
cov_114288k73u().s[44]++;
const requestHeaderLogger = (req, res, next) => {
  /* istanbul ignore next */
  cov_114288k73u().f[5]++;
  cov_114288k73u().s[45]++;
  if (
  /* istanbul ignore next */
  (cov_114288k73u().b[16][0]++, process.env.NODE_ENV === 'development') &&
  /* istanbul ignore next */
  (cov_114288k73u().b[16][1]++, process.env.DEBUG === 'true')) {
    /* istanbul ignore next */
    cov_114288k73u().b[15][0]++;
    const importantHeaders =
    /* istanbul ignore next */
    (cov_114288k73u().s[46]++, {
      'content-type': req.get('Content-Type'),
      'accept': req.get('Accept'),
      'authorization': req.get('Authorization') ?
      /* istanbul ignore next */
      (cov_114288k73u().b[17][0]++, '[PRESENT]') :
      /* istanbul ignore next */
      (cov_114288k73u().b[17][1]++, '[NOT_PRESENT]'),
      'x-forwarded-for': req.get('X-Forwarded-For'),
      'x-real-ip': req.get('X-Real-IP')
    });
    // Filtrar headers undefined
    const filteredHeaders =
    /* istanbul ignore next */
    (cov_114288k73u().s[47]++, Object.fromEntries(Object.entries(importantHeaders).filter(([, value]) => {
      /* istanbul ignore next */
      cov_114288k73u().f[6]++;
      cov_114288k73u().s[48]++;
      return value !== undefined;
    })));
    /* istanbul ignore next */
    cov_114288k73u().s[49]++;
    if (Object.keys(filteredHeaders).length > 0) {
      /* istanbul ignore next */
      cov_114288k73u().b[18][0]++;
      cov_114288k73u().s[50]++;
      logger_1.logger.debug('Request Headers', {
        type: 'request_headers',
        method: req.method,
        url:
        /* istanbul ignore next */
        (cov_114288k73u().b[19][0]++, req.originalUrl) ||
        /* istanbul ignore next */
        (cov_114288k73u().b[19][1]++, req.url),
        headers: filteredHeaders,
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_114288k73u().b[18][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_114288k73u().b[15][1]++;
  }
  cov_114288k73u().s[51]++;
  next();
};
/* istanbul ignore next */
cov_114288k73u().s[52]++;
exports.requestHeaderLogger = requestHeaderLogger;
/* istanbul ignore next */
cov_114288k73u().s[53]++;
exports.default = exports.requestLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
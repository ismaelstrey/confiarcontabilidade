{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\errorHandler.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\errorHandler.ts"],"sourcesContent":["import type { Request, Response, NextFunction } from 'express';\r\nimport { logger } from './logger';\r\n\r\n// Interface para erros customizados\r\nexport interface CustomError extends Error {\r\n  statusCode?: number;\r\n  code?: string;\r\n  details?: any;\r\n}\r\n\r\n// Classe para erros da aplicação\r\nexport class AppError extends Error {\r\n  public readonly statusCode: number;\r\n  public readonly code: string;\r\n  public readonly details?: any;\r\n  public readonly isOperational: boolean;\r\n\r\n  constructor(\r\n    message: string,\r\n    statusCode: number = 500,\r\n    code: string = 'INTERNAL_ERROR',\r\n    details?: any,\r\n    isOperational: boolean = true,\r\n  ) {\r\n    super(message);\r\n    this.statusCode = statusCode;\r\n    this.code = code;\r\n    this.details = details;\r\n    this.isOperational = isOperational;\r\n\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\n// Middleware de tratamento de erros\r\nexport const errorHandler = (\r\n  error: CustomError,\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) => {\r\n  // Log do erro\r\n  logger.error('Error occurred:', {\r\n    message: error.message,\r\n    stack: error.stack,\r\n    statusCode: error.statusCode,\r\n    code: error.code,\r\n    url: req.url,\r\n    method: req.method,\r\n    ip: req.ip,\r\n    userAgent: req.get('User-Agent'),\r\n    details: error.details,\r\n  });\r\n\r\n  // Definir status code padrão\r\n  const statusCode = error.statusCode || 500;\r\n  const code = error.code || 'INTERNAL_ERROR';\r\n\r\n  // Resposta base do erro\r\n  const errorResponse: any = {\r\n    success: false,\r\n    error: {\r\n      code,\r\n      message: error.message || 'Erro interno do servidor',\r\n    },\r\n    timestamp: new Date().toISOString(),\r\n    path: req.url,\r\n    method: req.method,\r\n  };\r\n\r\n  // Adicionar detalhes em desenvolvimento\r\n  if (process.env.NODE_ENV === 'development') {\r\n    errorResponse.error.stack = error.stack;\r\n    if (error.details) {\r\n      errorResponse.error.details = error.details;\r\n    }\r\n  }\r\n\r\n  // Tratamento específico para diferentes tipos de erro\r\n  switch (code) {\r\n    case 'VALIDATION_ERROR':\r\n      errorResponse.error.message = 'Dados de entrada inválidos';\r\n      break;\r\n    case 'UNAUTHORIZED':\r\n      errorResponse.error.message = 'Acesso não autorizado';\r\n      break;\r\n    case 'FORBIDDEN':\r\n      errorResponse.error.message = 'Acesso negado';\r\n      break;\r\n    case 'NOT_FOUND':\r\n      errorResponse.error.message = 'Recurso não encontrado';\r\n      break;\r\n    case 'CONFLICT':\r\n      errorResponse.error.message = 'Conflito de dados';\r\n      break;\r\n    case 'TOO_MANY_REQUESTS':\r\n      errorResponse.error.message = 'Muitas tentativas. Tente novamente mais tarde';\r\n      break;\r\n    case 'DATABASE_ERROR':\r\n      errorResponse.error.message = 'Erro no banco de dados';\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        errorResponse.error.details = error.details;\r\n      }\r\n      break;\r\n    default:\r\n      if (statusCode >= 500) {\r\n        errorResponse.error.message = 'Erro interno do servidor';\r\n      }\r\n  }\r\n\r\n  // Enviar resposta de erro\r\n  res.status(statusCode).json(errorResponse);\r\n};\r\n\r\n// Middleware para capturar erros assíncronos\r\nexport const asyncHandler = (\r\n  fn: (req: Request, res: Response, next: NextFunction) => Promise<any>,\r\n) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    Promise.resolve(fn(req, res, next)).catch(next);\r\n  };\r\n};\r\n\r\n// Funções utilitárias para criar erros específicos\r\nexport const createValidationError = (message: string, details?: any) => {\r\n  return new AppError(message, 400, 'VALIDATION_ERROR', details);\r\n};\r\n\r\nexport const createUnauthorizedError = (message: string = 'Acesso não autorizado') => {\r\n  return new AppError(message, 401, 'UNAUTHORIZED');\r\n};\r\n\r\nexport const createForbiddenError = (message: string = 'Acesso negado') => {\r\n  return new AppError(message, 403, 'FORBIDDEN');\r\n};\r\n\r\nexport const createNotFoundError = (message: string = 'Recurso não encontrado') => {\r\n  return new AppError(message, 404, 'NOT_FOUND');\r\n};\r\n\r\nexport const createConflictError = (message: string, details?: any) => {\r\n  return new AppError(message, 409, 'CONFLICT', details);\r\n};\r\n\r\nexport const createDatabaseError = (message: string, details?: any) => {\r\n  return new AppError(message, 500, 'DATABASE_ERROR', details);\r\n};\r\n\r\nexport const createTooManyRequestsError = (message: string = 'Muitas tentativas') => {\r\n  return new AppError(message, 429, 'TOO_MANY_REQUESTS');\r\n};"],"version":3}
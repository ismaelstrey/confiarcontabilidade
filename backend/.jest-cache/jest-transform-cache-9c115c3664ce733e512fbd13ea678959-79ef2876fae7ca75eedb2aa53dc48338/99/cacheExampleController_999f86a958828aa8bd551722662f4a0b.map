{"version":3,"names":["cov_19rsy0djri","actualCoverage","cacheService_1","s","require","logger_1","__importDefault","CacheExampleController","getDataWithCache","req","res","f","id","params","b","status","json","success","message","cacheKey","cachedData","cacheService","get","default","info","data","cached","simulateExpensiveOperation","set","error","updateDataAndInvalidateCache","updateData","body","updatedData","simulateUpdateOperation","cacheKeys","user","del","delPattern","getDataWithDynamicTTL","type","ttl","getDataWithConditionalCache","useCache","query","userRole","role","shouldUseCache","headers","includes","cacheUsed","manageCacheEndpoint","action","pattern","key","flush","isConnected","isRedisConnected","connected","exists","Promise","resolve","setTimeout","name","description","timestamp","Date","toISOString","processingTime","updatedAt","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\cacheExampleController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { cacheService } from '../services/cacheService';\r\nimport logger from '../utils/logger';\r\n\r\n/**\r\n * Controller de exemplo demonstrando o uso do sistema de cache\r\n */\r\nexport class CacheExampleController {\r\n  /**\r\n   * Exemplo de busca com cache manual\r\n   * Demonstra como usar o cache diretamente no controller\r\n   */\r\n  static async getDataWithCache(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      \r\n      if (!id) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'ID é obrigatório'\r\n        });\r\n      }\r\n      \r\n      const cacheKey = `example:data:${id}`;\r\n      \r\n      // Tenta obter do cache primeiro\r\n      const cachedData = await cacheService.get(cacheKey);\r\n      if (cachedData) {\r\n        logger.info(`Cache hit for key: ${cacheKey}`);\r\n        return res.json({\r\n          success: true,\r\n          data: cachedData,\r\n          cached: true,\r\n          message: 'Dados obtidos do cache'\r\n        });\r\n      }\r\n      \r\n      // Simula busca no banco de dados (operação custosa)\r\n      logger.info(`Cache miss for key: ${cacheKey}, fetching from database`);\r\n      const data = await CacheExampleController.simulateExpensiveOperation(id);\r\n      \r\n      // Armazena no cache por 10 minutos\r\n      await cacheService.set(cacheKey, data, 600);\r\n      \r\n      return res.json({\r\n        success: true,\r\n        data,\r\n        cached: false,\r\n        message: 'Dados obtidos do banco de dados e armazenados no cache'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter dados com cache:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Exemplo de invalidação de cache\r\n   * Demonstra como invalidar cache após uma operação de escrita\r\n   */\r\n  static async updateDataAndInvalidateCache(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const updateData = req.body;\r\n      \r\n      if (!id) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'ID é obrigatório'\r\n        });\r\n      }\r\n      \r\n      // Simula atualização no banco de dados\r\n      const updatedData = await CacheExampleController.simulateUpdateOperation(id, updateData);\r\n      \r\n      // Invalida caches relacionados\r\n      const cacheKeys = [\r\n        `example:data:${id}`,\r\n        `example:list:*`,\r\n        `example:user:${(req as any).user?.id}:*`\r\n      ];\r\n      \r\n      // Remove cache específico\r\n      await cacheService.del(`example:data:${id}`);\r\n      \r\n      // Remove caches por padrão\r\n      await cacheService.delPattern('example:list:*');\r\n      \r\n      logger.info(`Cache invalidated for data ID: ${id}`);\r\n      \r\n      return res.json({\r\n        success: true,\r\n        data: updatedData,\r\n        message: 'Dados atualizados e cache invalidado'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar dados e invalidar cache:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Exemplo de cache com TTL dinâmico\r\n   * Demonstra como definir TTL baseado no tipo de dados\r\n   */\r\n  static async getDataWithDynamicTTL(req: Request, res: Response) {\r\n    try {\r\n      const { type, id } = req.params;\r\n      \r\n      if (!type || !id) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Type e ID são obrigatórios'\r\n        });\r\n      }\r\n      \r\n      const cacheKey = `example:${type}:${id}`;\r\n      \r\n      // Define TTL baseado no tipo de dados\r\n      let ttl: number;\r\n      switch (type) {\r\n        case 'static':\r\n          ttl = 3600; // 1 hora para dados estáticos\r\n          break;\r\n        case 'dynamic':\r\n          ttl = 300; // 5 minutos para dados dinâmicos\r\n          break;\r\n        case 'realtime':\r\n          ttl = 60; // 1 minuto para dados em tempo real\r\n          break;\r\n        default:\r\n          ttl = 600; // 10 minutos padrão\r\n      }\r\n      \r\n      const cachedData = await cacheService.get(cacheKey);\r\n      if (cachedData) {\r\n        return res.json({\r\n          success: true,\r\n          data: cachedData,\r\n          cached: true,\r\n          ttl,\r\n          message: `Dados ${type} obtidos do cache`\r\n        });\r\n      }\r\n      \r\n      const data = await CacheExampleController.simulateExpensiveOperation(id);\r\n      await cacheService.set(cacheKey, data, ttl);\r\n      \r\n      return res.json({\r\n        success: true,\r\n        data,\r\n        cached: false,\r\n        ttl,\r\n        message: `Dados ${type} obtidos do banco e armazenados no cache por ${ttl}s`\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter dados com TTL dinâmico:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Exemplo de cache condicional\r\n   * Demonstra como cachear baseado em condições específicas\r\n   */\r\n  static async getDataWithConditionalCache(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const { useCache = 'true' } = req.query;\r\n      const userRole = (req as any).user?.role;\r\n      \r\n      if (!id) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'ID é obrigatório'\r\n        });\r\n      }\r\n      \r\n      // Condições para usar cache\r\n      const shouldUseCache = \r\n        useCache === 'true' && \r\n        userRole !== 'ADMIN' && // Admins sempre veem dados frescos\r\n        !req.headers['cache-control']?.includes('no-cache');\r\n      \r\n      const cacheKey = `example:conditional:${id}:${userRole}`;\r\n      \r\n      if (shouldUseCache) {\r\n        const cachedData = await cacheService.get(cacheKey);\r\n        if (cachedData) {\r\n          return res.json({\r\n            success: true,\r\n            data: cachedData,\r\n            cached: true,\r\n            message: 'Dados obtidos do cache (condicional)'\r\n          });\r\n        }\r\n      }\r\n      \r\n      const data = await CacheExampleController.simulateExpensiveOperation(id);\r\n      \r\n      // Só armazena no cache se as condições permitirem\r\n      if (shouldUseCache) {\r\n        await cacheService.set(cacheKey, data, 300);\r\n      }\r\n      \r\n      return res.json({\r\n        success: true,\r\n        data,\r\n        cached: false,\r\n        cacheUsed: shouldUseCache,\r\n        message: shouldUseCache \r\n          ? 'Dados obtidos do banco e armazenados no cache'\r\n          : 'Dados obtidos do banco (cache desabilitado)'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter dados com cache condicional:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Endpoint para gerenciar cache\r\n   * Permite limpar, verificar status, etc.\r\n   */\r\n  static async manageCacheEndpoint(req: Request, res: Response) {\r\n    try {\r\n      const { action } = req.params;\r\n      const { pattern, key } = req.body;\r\n      \r\n      switch (action) {\r\n        case 'clear':\r\n          if (pattern) {\r\n            await cacheService.delPattern(pattern);\r\n            return res.json({ success: true, message: `Cache limpo para padrão: ${pattern}` });\r\n          } else if (key) {\r\n            await cacheService.del(key);\r\n            return res.json({ success: true, message: `Cache limpo para chave: ${key}` });\r\n          } else {\r\n            await cacheService.flush();\r\n            return res.json({ success: true, message: 'Todo o cache foi limpo' });\r\n          }\r\n          \r\n        case 'status':\r\n          const isConnected = cacheService.isRedisConnected();\r\n          const info = await cacheService.info();\r\n          return res.json({\r\n            success: true,\r\n            connected: isConnected,\r\n            info: isConnected ? info : null,\r\n            message: `Redis está ${isConnected ? 'conectado' : 'desconectado'}`\r\n          });\r\n          \r\n        case 'check':\r\n          if (!key) {\r\n            return res.status(400).json({\r\n              success: false,\r\n              message: 'Chave é obrigatória para verificar cache'\r\n            });\r\n          }\r\n          const exists = await cacheService.exists(key);\r\n          const ttl = exists ? await cacheService.ttl(key) : -2;\r\n          return res.json({\r\n            success: true,\r\n            exists,\r\n            ttl,\r\n            message: exists \r\n              ? `Chave existe com TTL de ${ttl}s` \r\n              : 'Chave não existe no cache'\r\n          });\r\n          \r\n        default:\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: 'Ação inválida. Use: clear, status, ou check'\r\n          });\r\n      }\r\n    } catch (error) {\r\n      logger.error('Erro ao gerenciar cache:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Simula uma operação custosa (consulta ao banco, API externa, etc.)\r\n   */\r\n  private static async simulateExpensiveOperation(id: string): Promise<any> {\r\n    // Simula delay de operação custosa\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    return {\r\n      id,\r\n      name: `Item ${id}`,\r\n      description: 'Dados obtidos através de operação custosa',\r\n      timestamp: new Date().toISOString(),\r\n      processingTime: '1000ms'\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Simula uma operação de atualização\r\n   */\r\n  private static async simulateUpdateOperation(id: string, updateData: any): Promise<any> {\r\n    // Simula delay de operação de atualização\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    return {\r\n      id,\r\n      ...updateData,\r\n      updatedAt: new Date().toISOString(),\r\n      processingTime: '500ms'\r\n    };\r\n  }\r\n}"],"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","ignoreList":[]}
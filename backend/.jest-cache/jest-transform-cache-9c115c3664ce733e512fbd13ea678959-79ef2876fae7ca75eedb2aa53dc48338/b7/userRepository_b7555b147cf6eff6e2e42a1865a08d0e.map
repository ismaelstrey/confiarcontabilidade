{"version":3,"names":["cov_1bkbpoafh1","actualCoverage","s","UserRepository","prisma","constructor","f","create","data","user","findAll","findMany","select","id","name","email","role","avatar","createdAt","updatedAt","isActive","password","findById","findUnique","where","findByEmail","update","delete","updatePassword","hashedPassword","countUsers","count","countActiveUsers","countUsersByRole","users","groupBy","by","_count","reduce","acc","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\repositories\\userRepository.ts"],"sourcesContent":["import { PrismaClient, User, Prisma } from '@prisma/client';\r\n\r\nexport class UserRepository {\r\n  constructor(private prisma: PrismaClient) {}\r\n\r\n  async create(data: Prisma.UserCreateInput): Promise<User> {\r\n    return this.prisma.user.create({\r\n      data,\r\n    });\r\n  }\r\n\r\n  async findAll(): Promise<Omit<User, 'password'>[]> {\r\n    return this.prisma.user.findMany({\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        role: true,\r\n        avatar: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        isActive: true,\r\n\r\n        // Excluir senha da consulta\r\n        password: false,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findById(id: string): Promise<User | null> {\r\n    return this.prisma.user.findUnique({\r\n      where: { id },\r\n    });\r\n  }\r\n\r\n  async findByEmail(email: string): Promise<User | null> {\r\n    return this.prisma.user.findUnique({\r\n      where: { email },\r\n    });\r\n  }\r\n\r\n  async update(id: string, data: Prisma.UserUpdateInput): Promise<User> {\r\n    return this.prisma.user.update({\r\n      where: { id },\r\n      data,\r\n    });\r\n  }\r\n\r\n  async delete(id: string): Promise<User> {\r\n    return this.prisma.user.delete({\r\n      where: { id },\r\n    });\r\n  }\r\n\r\n  // Métodos de profile removidos - modelo Profile não existe no schema atual\r\n\r\n  // Métodos de reset token removidos - campos resetToken e resetTokenExpiry não existem no schema atual\r\n  \r\n  async updatePassword(id: string, hashedPassword: string): Promise<User> {\r\n    return this.prisma.user.update({\r\n      where: { id },\r\n      data: {\r\n        password: hashedPassword,\r\n      },\r\n    });\r\n  }\r\n\r\n  async countUsers(): Promise<number> {\r\n    return this.prisma.user.count();\r\n  }\r\n\r\n  async countActiveUsers(): Promise<number> {\r\n    // Como não temos campo isActive, retornamos contagem total de usuários\r\n    return this.prisma.user.count();\r\n  }\r\n\r\n  async countUsersByRole(): Promise<Record<string, number>> {\r\n    const users = await this.prisma.user.groupBy({\r\n      by: ['role'],\r\n      _count: {\r\n        role: true,\r\n      },\r\n    });\r\n\r\n    return users.reduce((acc, user) => {\r\n      acc[user.role] = user._count.role;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n  }\r\n}"],"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","ignoreList":[]}
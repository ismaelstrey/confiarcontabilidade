b92e1f51f56246e2e446bde605ce4f10
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middlewares/auth");
const cache_1 = require("../middlewares/cache");
const userController_1 = __importDefault(require("../controllers/userController"));
const router = (0, express_1.Router)();
/**
 * @swagger
 * components:
 *   schemas:
 *     UserProfile:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         name:
 *           type: string
 *         email:
 *           type: string
 *         role:
 *           type: string
 *           enum: [ADMIN, EDITOR, USER]
 *         avatar:
 *           type: string
 *         phone:
 *           type: string
 *         bio:
 *           type: string
 *         website:
 *           type: string
 *         location:
 *           type: string
 *         isActive:
 *           type: boolean
 *         emailVerified:
 *           type: boolean
 *         lastLoginAt:
 *           type: string
 *           format: date-time
 *         createdAt:
 *           type: string
 *           format: date-time
 *         updatedAt:
 *           type: string
 *           format: date-time
 *     UpdateProfileRequest:
 *       type: object
 *       properties:
 *         name:
 *           type: string
 *           minLength: 2
 *           description: Nome completo
 *         phone:
 *           type: string
 *           description: Telefone
 *         bio:
 *           type: string
 *           maxLength: 500
 *           description: Biografia
 *         website:
 *           type: string
 *           description: Website pessoal
 *         location:
 *           type: string
 *           description: Localização
 *         avatar:
 *           type: string
 *           description: URL do avatar
 *     ChangePasswordRequest:
 *       type: object
 *       required:
 *         - currentPassword
 *         - newPassword
 *       properties:
 *         currentPassword:
 *           type: string
 *           description: Senha atual
 *         newPassword:
 *           type: string
 *           minLength: 6
 *           description: Nova senha
 *         confirmPassword:
 *           type: string
 *           description: Confirmação da nova senha
 *     CreateUserRequest:
 *       type: object
 *       required:
 *         - name
 *         - email
 *         - password
 *         - role
 *       properties:
 *         name:
 *           type: string
 *           minLength: 2
 *           description: Nome completo
 *         email:
 *           type: string
 *           format: email
 *           description: Email do usuário
 *         password:
 *           type: string
 *           minLength: 6
 *           description: Senha do usuário
 *         role:
 *           type: string
 *           enum: [ADMIN, EDITOR, USER]
 *           description: Papel do usuário
 *         phone:
 *           type: string
 *           description: Telefone (opcional)
 *         isActive:
 *           type: boolean
 *           default: true
 *           description: Status ativo
 */
/**
 * @swagger
 * /api/v1/users/profile:
 *   get:
 *     summary: Obter perfil do usuário logado
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Dados do perfil
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/UserProfile'
 *       401:
 *         description: Token inválido
 */
router.get('/profile', auth_1.authenticate, (0, cache_1.userCacheMiddleware)(600), userController_1.default.getProfile);
router.put('/profile', auth_1.authenticate, (0, cache_1.invalidateUserCacheMiddleware)((req) => req.user?.id), userController_1.default.updateProfile);
/**
 * @swagger
 * /api/v1/users/profile:
 *   put:
 *     summary: Atualizar perfil do usuário logado
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UpdateProfileRequest'
 *     responses:
 *       200:
 *         description: Perfil atualizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/UserProfile'
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 */
router.put('/profile', auth_1.authenticate, userController_1.default.updateProfile);
/**
 * @swagger
 * /api/v1/users/change-password:
 *   put:
 *     summary: Alterar senha do usuário logado
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ChangePasswordRequest'
 *     responses:
 *       200:
 *         description: Senha alterada com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos ou senha atual incorreta
 *       401:
 *         description: Token inválido
 */
router.put('/change-password', auth_1.authenticate, userController_1.default.changePassword);
/**
 * @swagger
 * /api/v1/users/avatar:
 *   post:
 *     summary: Upload de avatar do usuário
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               avatar:
 *                 type: string
 *                 format: binary
 *                 description: Imagem do avatar (JPG, PNG, GIF)
 *     responses:
 *       200:
 *         description: Avatar atualizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     avatarUrl:
 *                       type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Arquivo inválido
 *       401:
 *         description: Token inválido
 *       413:
 *         description: Arquivo muito grande
 */
router.post('/avatar', auth_1.authenticate, userController_1.default.uploadAvatar);
/**
 * @swagger
 * /api/v1/users/delete-account:
 *   delete:
 *     summary: Excluir conta do usuário logado
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - password
 *               - confirmation
 *             properties:
 *               password:
 *                 type: string
 *                 description: Senha atual para confirmação
 *               confirmation:
 *                 type: string
 *                 enum: [DELETE_MY_ACCOUNT]
 *                 description: Texto de confirmação
 *     responses:
 *       200:
 *         description: Conta excluída com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos ou senha incorreta
 *       401:
 *         description: Token inválido
 */
router.delete('/delete-account', auth_1.authenticate, userController_1.default.deleteAccount);
// Rotas administrativas
/**
 * @swagger
 * /api/v1/users:
 *   get:
 *     summary: Listar usuários (Admin)
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Número da página
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 20
 *         description: Itens por página
 *       - in: query
 *         name: role
 *         schema:
 *           type: string
 *           enum: [ADMIN, EDITOR, USER]
 *         description: Filtrar por papel
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [active, inactive]
 *         description: Filtrar por status
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Buscar por nome ou email
 *       - in: query
 *         name: dateFrom
 *         schema:
 *           type: string
 *           format: date
 *         description: Data inicial (YYYY-MM-DD)
 *       - in: query
 *         name: dateTo
 *         schema:
 *           type: string
 *           format: date
 *         description: Data final (YYYY-MM-DD)
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *           enum: [createdAt, name, email, lastLoginAt]
 *           default: createdAt
 *         description: Campo para ordenação
 *       - in: query
 *         name: sortOrder
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *           default: desc
 *         description: Ordem da classificação
 *     responses:
 *       200:
 *         description: Lista de usuários
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     users:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/UserProfile'
 *                     pagination:
 *                       type: object
 *                       properties:
 *                         page:
 *                           type: integer
 *                         limit:
 *                           type: integer
 *                         total:
 *                           type: integer
 *                         pages:
 *                           type: integer
 *                     stats:
 *                       type: object
 *                       properties:
 *                         total:
 *                           type: integer
 *                         active:
 *                           type: integer
 *                         inactive:
 *                           type: integer
 *                         byRole:
 *                           type: object
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 */
router.get('/', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (0, cache_1.publicCacheMiddleware)(300), userController_1.default.getUsers);
/**
 * @swagger
 * /api/v1/users:
 *   post:
 *     summary: Criar novo usuário (Admin)
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CreateUserRequest'
 *     responses:
 *       201:
 *         description: Usuário criado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/UserProfile'
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 *       409:
 *         description: Email já cadastrado
 */
router.post('/', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), userController_1.default.createUser);
/**
 * @swagger
 * /api/v1/users/{id}:
 *   get:
 *     summary: Obter usuário por ID
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do usuário
 *     responses:
 *       200:
 *         description: Dados do usuário
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/UserProfile'
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 *       404:
 *         description: Usuário não encontrado
 */
router.get('/:id', auth_1.authenticate, auth_1.authorizeOwnerOrAdmin, (0, cache_1.userCacheMiddleware)(600), userController_1.default.getUserById);
/**
 * @swagger
 * /api/v1/users/{id}:
 *   put:
 *     summary: Atualizar usuário (Admin)
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do usuário
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *                 format: email
 *               role:
 *                 type: string
 *                 enum: [ADMIN, EDITOR, USER]
 *               phone:
 *                 type: string
 *               isActive:
 *                 type: boolean
 *               bio:
 *                 type: string
 *               website:
 *                 type: string
 *               location:
 *                 type: string
 *     responses:
 *       200:
 *         description: Usuário atualizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/UserProfile'
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 *       404:
 *         description: Usuário não encontrado
 *       409:
 *         description: Email já cadastrado
 */
router.put('/:id', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (0, cache_1.invalidateUserCacheMiddleware)((req) => req.params.id || ''), userController_1.default.updateUser);
/**
 * @swagger
 * /api/v1/users/{id}/status:
 *   patch:
 *     summary: Alterar status do usuário (Admin)
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do usuário
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - isActive
 *             properties:
 *               isActive:
 *                 type: boolean
 *                 description: Novo status ativo
 *               reason:
 *                 type: string
 *                 description: Motivo da alteração (opcional)
 *     responses:
 *       200:
 *         description: Status alterado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/UserProfile'
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 *       404:
 *         description: Usuário não encontrado
 */
router.patch('/:id/status', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), userController_1.default.updateUserStatus);
/**
 * @swagger
 * /api/v1/users/{id}:
 *   delete:
 *     summary: Excluir usuário (Admin)
 *     tags: [Usuários]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do usuário
 *     responses:
 *       200:
 *         description: Usuário excluído com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 *       404:
 *         description: Usuário não encontrado
 */
router.delete('/:id', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (0, cache_1.invalidateUserCacheMiddleware)((req) => req.params.id || ''), userController_1.default.deleteUser);
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
cbef627bb11bb86cd67f543232a3ee02
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const testServer_1 = require("../../tests/helpers/testServer");
const setup_1 = require("../../tests/setup");
const auth_1 = require("../../utils/auth");
describe('Auth Routes Integration Tests', () => {
    const app = (0, testServer_1.createTestServer)();
    beforeEach(async () => {
        // Limpa os dados de teste antes de cada teste
        await setup_1.prisma.user.deleteMany();
    });
    describe('POST /api/auth/register', () => {
        const validUserData = {
            name: 'Test User',
            email: 'test@example.com',
            password: 'Password123!',
        };
        it('should register a new user successfully', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send(validUserData)
                .expect(201);
            expect(response.body).toHaveProperty('success', true);
            expect(response.body).toHaveProperty('data');
            expect(response.body.data).toHaveProperty('token');
            expect(response.body.data).toHaveProperty('refreshToken');
            expect(response.body.data).toHaveProperty('user');
            expect(response.body.data.user.email).toBe(validUserData.email);
            expect(response.body.data.user.name).toBe(validUserData.name);
            expect(response.body.data.user).not.toHaveProperty('password');
            // Verifica se o usuário foi criado no banco de dados
            const createdUser = await setup_1.prisma.user.findUnique({
                where: { email: validUserData.email },
            });
            expect(createdUser).toBeTruthy();
            expect(createdUser?.name).toBe(validUserData.name);
        });
        it('should return 400 for invalid email format', async () => {
            const invalidData = {
                ...validUserData,
                email: 'invalid-email',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send(invalidData)
                .expect(400);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 400 for weak password', async () => {
            const weakPasswordData = {
                ...validUserData,
                password: '123',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send(weakPasswordData)
                .expect(400);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 409 for existing email', async () => {
            // Cria um usuário primeiro
            await setup_1.prisma.user.create({
                data: {
                    name: 'Existing User',
                    email: validUserData.email,
                    password: await (0, auth_1.hashPassword)('AnotherPassword123!'),
                    role: 'CLIENT',
                },
            });
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send(validUserData)
                .expect(409);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 400 for missing required fields', async () => {
            const incompleteData = {
                name: 'Test User',
                // email e password faltando
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/register')
                .send(incompleteData)
                .expect(400);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
    });
    describe('POST /api/auth/login', () => {
        const userData = {
            name: 'Test User',
            email: 'test@example.com',
            password: 'Password123!',
        };
        beforeEach(async () => {
            // Cria um usuário para os testes de login
            await setup_1.prisma.user.create({
                data: {
                    name: userData.name,
                    email: userData.email,
                    password: await (0, auth_1.hashPassword)(userData.password),
                    role: 'CLIENT',
                },
            });
        });
        it('should login successfully with valid credentials', async () => {
            const loginData = {
                email: userData.email,
                password: userData.password,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(loginData)
                .expect(200);
            expect(response.body).toHaveProperty('success', true);
            expect(response.body).toHaveProperty('data');
            expect(response.body.data).toHaveProperty('token');
            expect(response.body.data).toHaveProperty('refreshToken');
            expect(response.body.data).toHaveProperty('user');
            expect(response.body.data.user.email).toBe(userData.email);
            expect(response.body.data.user).not.toHaveProperty('password');
        });
        it('should return 401 for invalid email', async () => {
            const loginData = {
                email: 'nonexistent@example.com',
                password: userData.password,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(loginData)
                .expect(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 401 for invalid password', async () => {
            const loginData = {
                email: userData.email,
                password: 'WrongPassword123!',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(loginData)
                .expect(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 401 for deleted user', async () => {
            // Remove o usuário
            await setup_1.prisma.user.delete({
                where: { email: userData.email },
            });
            const loginData = {
                email: userData.email,
                password: userData.password,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(loginData)
                .expect(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 400 for missing credentials', async () => {
            const incompleteData = {
                email: userData.email,
                // password faltando
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(incompleteData)
                .expect(400);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
    });
    describe('POST /api/auth/refresh', () => {
        let refreshToken;
        let userId;
        beforeEach(async () => {
            // Cria um usuário e faz login para obter o refresh token
            const userData = {
                name: 'Test User',
                email: 'test@example.com',
                password: 'Password123!',
            };
            const user = await setup_1.prisma.user.create({
                data: {
                    name: userData.name,
                    email: userData.email,
                    password: await (0, auth_1.hashPassword)(userData.password),
                    role: 'CLIENT',
                },
            });
            userId = user.id;
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: userData.email,
                password: userData.password,
            });
            console.log('Refresh login response:', JSON.stringify(loginResponse.body, null, 2));
            refreshToken = loginResponse.body.data.refreshToken;
        });
        it('should refresh token successfully', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/refresh')
                .send({ refreshToken })
                .expect(200);
            expect(response.body).toHaveProperty('success', true);
            expect(response.body).toHaveProperty('data');
            expect(response.body.data).toHaveProperty('token');
            expect(response.body.data).toHaveProperty('refreshToken');
        });
        it('should return 401 for invalid refresh token', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/refresh')
                .send({ refreshToken: 'invalid_token' })
                .expect(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 400 for missing refresh token', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/refresh')
                .send({})
                .expect(400);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
    });
    describe('POST /api/auth/logout', () => {
        let token;
        let userId;
        beforeEach(async () => {
            // Cria um usuário e faz login para obter o token
            const userData = {
                name: 'Test User',
                email: 'test@example.com',
                password: 'Password123!',
            };
            const user = await setup_1.prisma.user.create({
                data: {
                    name: userData.name,
                    email: userData.email,
                    password: await (0, auth_1.hashPassword)(userData.password),
                    role: 'CLIENT',
                },
            });
            userId = user.id;
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: userData.email,
                password: userData.password,
            });
            console.log('Login response:', JSON.stringify(loginResponse.body, null, 2));
            token = loginResponse.body.data.token;
        });
        it('should logout successfully', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/logout')
                .set('Authorization', `Bearer ${token}`)
                .expect(200);
            expect(response.body).toHaveProperty('success', true);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 401 for missing token', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/logout')
                .expect(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
        it('should return 401 for invalid token', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/logout')
                .set('Authorization', 'Bearer invalid_token')
                .expect(401);
            expect(response.body).toHaveProperty('success', false);
            expect(response.body).toHaveProperty('message');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
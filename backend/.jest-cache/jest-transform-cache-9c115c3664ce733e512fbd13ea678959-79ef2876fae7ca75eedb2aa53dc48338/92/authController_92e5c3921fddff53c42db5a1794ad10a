d080a5a9946aec761925e340e34564f5
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthController = void 0;
const authService_1 = require("../services/authService");
const prisma_1 = require("../lib/prisma");
const logger_1 = __importDefault(require("../utils/logger"));
/**
 * Controller responsável pela autenticação de usuários
 */
class AuthController {
    /**
     * Registra um novo usuário no sistema
     */
    static async register(req, res) {
        try {
            const registerData = req.body;
            const result = await authService_1.authService.register(registerData);
            res.status(201).json({
                success: true,
                message: 'Usuário registrado com sucesso',
                data: result
            });
        }
        catch (error) {
            logger_1.default.error('Erro ao registrar usuário', { error: error.message });
            // Determinar status code baseado no tipo de erro
            let statusCode = 500;
            if (error.message.includes('já existe')) {
                statusCode = 409;
            }
            else if (error.message.includes('obrigatórios') ||
                error.message.includes('inválido') ||
                error.message.includes('senha deve')) {
                statusCode = 400;
            }
            res.status(statusCode).json({
                success: false,
                message: error.message || 'Erro interno do servidor'
            });
        }
    }
    /**
     * Realiza login do usuário
     */
    static async login(req, res) {
        try {
            const loginData = req.body;
            const result = await authService_1.authService.login(loginData);
            res.status(200).json({
                success: true,
                message: 'Login realizado com sucesso',
                data: {
                    user: result.user,
                    token: result.tokens.accessToken,
                    refreshToken: result.tokens.refreshToken
                }
            });
        }
        catch (error) {
            logger_1.default.error('Erro ao fazer login', { error: error.message });
            // Determinar status code baseado no tipo de erro
            let statusCode = 500;
            if (error.message.includes('não encontrado') ||
                error.message.includes('inválidas')) {
                statusCode = 401;
            }
            else if (error.message.includes('obrigatórios') ||
                error.message.includes('inválido')) {
                statusCode = 400;
            }
            res.status(statusCode).json({
                success: false,
                message: error.message || 'Erro interno do servidor'
            });
        }
    }
    /**
     * Atualiza tokens usando refresh token
     */
    static async refreshToken(req, res) {
        try {
            const { refreshToken } = req.body;
            const result = await authService_1.authService.refreshToken(refreshToken);
            res.status(200).json({
                success: true,
                message: 'Tokens atualizados com sucesso',
                data: {
                    token: result.accessToken,
                    refreshToken: result.refreshToken
                }
            });
        }
        catch (error) {
            logger_1.default.error('Erro ao atualizar tokens', { error: error.message });
            // Determinar status code baseado no tipo de erro
            let statusCode = 500;
            if (error.message.includes('obrigatório') ||
                error.message.includes('inválido') ||
                error.message.includes('expirado')) {
                statusCode = 401;
            }
            res.status(statusCode).json({
                success: false,
                message: error.message || 'Erro interno do servidor'
            });
        }
    }
    /**
     * Realiza logout do usuário
     */
    static async logout(req, res) {
        try {
            // Em uma implementação mais robusta, você poderia:
            // 1. Adicionar o token a uma blacklist
            // 2. Invalidar refresh tokens no banco
            // 3. Limpar sessões ativas
            const userId = req.user?.id;
            if (userId) {
                logger_1.default.info('Usuário fez logout', { userId });
            }
            res.status(200).json({
                success: true,
                message: 'Logout realizado com sucesso'
            });
        }
        catch (error) {
            logger_1.default.error('Erro ao fazer logout', { error });
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor'
            });
        }
    }
    /**
     * Verifica se o token é válido
     */
    static async verifyToken(req, res) {
        try {
            const user = req.user;
            if (!user) {
                res.status(401).json({
                    success: false,
                    message: 'Token inválido'
                });
                return;
            }
            res.status(200).json({
                success: true,
                message: 'Token válido',
                data: { user }
            });
        }
        catch (error) {
            logger_1.default.error('Erro ao verificar token', { error });
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor'
            });
        }
    }
    /**
     * Solicita reset de senha
     */
    static async forgotPassword(req, res) {
        try {
            const { email } = req.body;
            if (!email) {
                res.status(400).json({
                    success: false,
                    message: 'Email é obrigatório'
                });
                return;
            }
            // Buscar usuário
            const user = await prisma_1.prisma.user.findUnique({
                where: { email }
            });
            // Por segurança, sempre retornamos sucesso mesmo se o email não existir
            if (user) {
                // Aqui você implementaria o envio de email com token de reset
                // Por enquanto, apenas logamos a ação
                logger_1.default.info('Solicitação de reset de senha', {
                    userId: user.id,
                    email: user.email
                });
            }
            res.status(200).json({
                success: true,
                message: 'Se o email existir, você receberá instruções para reset da senha'
            });
        }
        catch (error) {
            logger_1.default.error('Erro ao solicitar reset de senha', { error });
            res.status(500).json({
                success: false,
                message: 'Erro interno do servidor'
            });
        }
    }
    /**
     * Obtém informações do usuário logado
     */
    static async getProfile(req, res) {
        try {
            const userId = req.user?.id;
            if (!userId) {
                res.status(401).json({
                    success: false,
                    message: 'Token de acesso inválido'
                });
                return;
            }
            const user = await authService_1.authService.getUserById(userId);
            res.status(200).json({
                success: true,
                message: 'Perfil obtido com sucesso',
                data: { user }
            });
        }
        catch (error) {
            logger_1.default.error('Erro ao obter perfil', { error: error.message });
            let statusCode = 500;
            if (error.message.includes('não encontrado')) {
                statusCode = 404;
            }
            res.status(statusCode).json({
                success: false,
                message: error.message || 'Erro interno do servidor'
            });
        }
    }
    /**
     * Altera senha do usuário
     */
    static async changePassword(req, res) {
        try {
            const userId = req.user?.id;
            const { currentPassword, newPassword } = req.body;
            if (!userId) {
                res.status(401).json({
                    success: false,
                    message: 'Token de acesso inválido'
                });
                return;
            }
            await authService_1.authService.changePassword(userId, currentPassword, newPassword);
            res.status(200).json({
                success: true,
                message: 'Senha alterada com sucesso'
            });
        }
        catch (error) {
            logger_1.default.error('Erro ao alterar senha', { error: error.message });
            let statusCode = 500;
            if (error.message.includes('obrigatórios') ||
                error.message.includes('senha deve')) {
                statusCode = 400;
            }
            else if (error.message.includes('atual incorreta')) {
                statusCode = 401;
            }
            else if (error.message.includes('não encontrado')) {
                statusCode = 404;
            }
            res.status(statusCode).json({
                success: false,
                message: error.message || 'Erro interno do servidor'
            });
        }
    }
}
exports.AuthController = AuthController;
exports.default = AuthController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
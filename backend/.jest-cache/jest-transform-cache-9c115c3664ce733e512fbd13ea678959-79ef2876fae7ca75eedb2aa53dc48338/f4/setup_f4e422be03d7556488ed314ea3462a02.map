{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\tests\\setup.ts","mappings":";;;;;;AACA,0CAAuC;AA8D9B,uFA9DA,eAAM,OA8DA;AA7Df,oDAA4B;AAE5B,0CAA0C;AAC1C,gBAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;AAErC,gFAAgF;AAChF,UAAU,CAAC,KAAK,IAAI,EAAE;IACpB,8CAA8C;IAC9C,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC;QACrE,OAAO;IACT,CAAC;IAED,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,eAAM,CAAC,SAAS,CAEpC,2DAA2D,CAAC;QAE7D,MAAM,UAAU,GAAG,MAAM;aACtB,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC;aACjC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,oBAAoB,CAAC;aAC/C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC;QAE9B,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,MAAM,eAAM,CAAC,iBAAiB,CAC5B,kBAAkB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CACnD,CAAC;QACJ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,gDAAgD;QAChD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC;YACvC,OAAO;QACT,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,4DAA4D;AAC5D,QAAQ,CAAC,KAAK,IAAI,EAAE;IAClB,MAAM,eAAM,CAAC,WAAW,EAAE,CAAC;AAC7B,CAAC,CAAC,CAAC;AAEH,iCAAiC;AACjC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,oEAAoE;AACpE,MAAM,CAAC,OAAO,GAAG;IACf,GAAG,OAAO;IACV,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;IACd,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;IAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;IACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;IACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;CACjB,CAAC;AAEF,oDAAoD;AACpD,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC9B,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,iBAAiB,CAAC;AAC3C,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,2BAA2B,CAAC;AAC/D,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC;AAClC,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,IAAI,CAAC","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\tests\\setup.ts"],"sourcesContent":["import { cacheService } from '../services/cacheService';\r\nimport { prisma } from '../lib/prisma';\r\nimport dotenv from 'dotenv';\r\n\r\n// Carregar variáveis de ambiente de teste\r\ndotenv.config({ path: '.env.test' });\r\n\r\n// Limpa o banco de dados antes de cada teste (apenas para testes de integração)\r\nbeforeEach(async () => {\r\n  // Pula limpeza do banco para testes unitários\r\n  if (process.env.JEST_WORKER_ID && !process.env.RUN_INTEGRATION_TESTS) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const tables = await prisma.$queryRaw<\r\n      Array<{ tablename: string }>\r\n    >`SELECT tablename FROM pg_tables WHERE schemaname='public'`;\r\n\r\n    const tableNames = tables\r\n      .map(({ tablename }) => tablename)\r\n      .filter((name) => name !== '_prisma_migrations')\r\n      .map((name) => `\"${name}\"`);\r\n\r\n    if (tableNames.length > 0) {\r\n      await prisma.$executeRawUnsafe(\r\n        `TRUNCATE TABLE ${tableNames.join(', ')} CASCADE;`\r\n      );\r\n    }\r\n  } catch (error) {\r\n    // Ignora erros de conexão para testes unitários\r\n    if (!process.env.RUN_INTEGRATION_TESTS) {\r\n      return;\r\n    }\r\n    console.log('Error cleaning database:', error);\r\n  }\r\n});\r\n\r\n// Fecha a conexão com o banco de dados após todos os testes\r\nafterAll(async () => {\r\n  await prisma.$disconnect();\r\n});\r\n\r\n// Configuração de timeout global\r\njest.setTimeout(30000);\r\n\r\n// Mock do console para evitar logs desnecessários durante os testes\r\nglobal.console = {\r\n  ...console,\r\n  log: jest.fn(),\r\n  debug: jest.fn(),\r\n  info: jest.fn(),\r\n  warn: jest.fn(),\r\n  error: jest.fn(),\r\n};\r\n\r\n// Configuração de variáveis de ambiente para testes\r\nprocess.env.NODE_ENV = 'test';\r\nprocess.env.JWT_SECRET = 'test_jwt_secret';\r\nprocess.env.REFRESH_TOKEN_SECRET = 'test_refresh_token_secret';\r\nprocess.env.JWT_EXPIRES_IN = '1h';\r\nprocess.env.REFRESH_TOKEN_EXPIRES_IN = '7d';\r\n\r\nexport { prisma };"],"version":3}
7b00de6c42a21a87b9817738ceb2eaca
"use strict";

/* istanbul ignore next */
function cov_1wljci3vzs() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\adminController.ts";
  var hash = "33eeb5c5e703049d2966d96b7d0ee4c380e55da1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\adminController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 33
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 60
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "8": {
        start: {
          line: 19,
          column: 38
        },
        end: {
          line: 19,
          column: 47
        }
      },
      "9": {
        start: {
          line: 20,
          column: 31
        },
        end: {
          line: 20,
          column: 45
        }
      },
      "10": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "11": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 64
        }
      },
      "12": {
        start: {
          line: 24,
          column: 75
        },
        end: {
          line: 50,
          column: 14
        }
      },
      "13": {
        start: {
          line: 52,
          column: 36
        },
        end: {
          line: 68,
          column: 14
        }
      },
      "14": {
        start: {
          line: 70,
          column: 34
        },
        end: {
          line: 94,
          column: 14
        }
      },
      "15": {
        start: {
          line: 96,
          column: 35
        },
        end: {
          line: 107,
          column: 14
        }
      },
      "16": {
        start: {
          line: 109,
          column: 31
        },
        end: {
          line: 139,
          column: 7
        }
      },
      "17": {
        start: {
          line: 140,
          column: 30
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "18": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 178,
          column: 15
        }
      },
      "19": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 76
        }
      },
      "20": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "21": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "22": {
        start: {
          line: 193,
          column: 55
        },
        end: {
          line: 193,
          column: 64
        }
      },
      "23": {
        start: {
          line: 194,
          column: 31
        },
        end: {
          line: 194,
          column: 45
        }
      },
      "24": {
        start: {
          line: 195,
          column: 30
        },
        end: {
          line: 195,
          column: 40
        }
      },
      "25": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 64
        }
      },
      "26": {
        start: {
          line: 198,
          column: 32
        },
        end: {
          line: 220,
          column: 14
        }
      },
      "27": {
        start: {
          line: 222,
          column: 34
        },
        end: {
          line: 238,
          column: 14
        }
      },
      "28": {
        start: {
          line: 240,
          column: 36
        },
        end: {
          line: 248,
          column: 14
        }
      },
      "29": {
        start: {
          line: 250,
          column: 32
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "30": {
        start: {
          line: 262,
          column: 30
        },
        end: {
          line: 262,
          column: 32
        }
      },
      "31": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 268,
          column: 15
        }
      },
      "32": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 267,
          column: 19
        }
      },
      "33": {
        start: {
          line: 265,
          column: 36
        },
        end: {
          line: 265,
          column: 55
        }
      },
      "34": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 71
        }
      },
      "35": {
        start: {
          line: 269,
          column: 28
        },
        end: {
          line: 272,
          column: 56
        }
      },
      "36": {
        start: {
          line: 270,
          column: 40
        },
        end: {
          line: 270,
          column: 45
        }
      },
      "37": {
        start: {
          line: 272,
          column: 40
        },
        end: {
          line: 272,
          column: 54
        }
      },
      "38": {
        start: {
          line: 273,
          column: 32
        },
        end: {
          line: 291,
          column: 13
        }
      },
      "39": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 296,
          column: 15
        }
      },
      "40": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 87
        }
      },
      "41": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 303,
          column: 15
        }
      },
      "42": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "43": {
        start: {
          line: 311,
          column: 78
        },
        end: {
          line: 311,
          column: 87
        }
      },
      "44": {
        start: {
          line: 315,
          column: 25
        },
        end: {
          line: 315,
          column: 59
        }
      },
      "45": {
        start: {
          line: 316,
          column: 25
        },
        end: {
          line: 316,
          column: 38
        }
      },
      "46": {
        start: {
          line: 317,
          column: 26
        },
        end: {
          line: 317,
          column: 28
        }
      },
      "47": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "48": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 36
        }
      },
      "49": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 326,
          column: 13
        }
      },
      "50": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 325,
          column: 18
        }
      },
      "51": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 337,
          column: 13
        }
      },
      "52": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 37
        }
      },
      "53": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 331,
          column: 17
        }
      },
      "54": {
        start: {
          line: 330,
          column: 20
        },
        end: {
          line: 330,
          column: 61
        }
      },
      "55": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 336,
          column: 17
        }
      },
      "56": {
        start: {
          line: 333,
          column: 36
        },
        end: {
          line: 333,
          column: 52
        }
      },
      "57": {
        start: {
          line: 334,
          column: 20
        },
        end: {
          line: 334,
          column: 54
        }
      },
      "58": {
        start: {
          line: 335,
          column: 20
        },
        end: {
          line: 335,
          column: 50
        }
      },
      "59": {
        start: {
          line: 339,
          column: 29
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "60": {
        start: {
          line: 355,
          column: 25
        },
        end: {
          line: 355,
          column: 58
        }
      },
      "61": {
        start: {
          line: 356,
          column: 26
        },
        end: {
          line: 356,
          column: 41
        }
      },
      "62": {
        start: {
          line: 357,
          column: 31
        },
        end: {
          line: 357,
          column: 54
        }
      },
      "63": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 372,
          column: 15
        }
      },
      "64": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 79
        }
      },
      "65": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 379,
          column: 15
        }
      },
      "66": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 422,
          column: 9
        }
      },
      "67": {
        start: {
          line: 387,
          column: 43
        },
        end: {
          line: 387,
          column: 51
        }
      },
      "68": {
        start: {
          line: 388,
          column: 32
        },
        end: {
          line: 388,
          column: 40
        }
      },
      "69": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 395,
          column: 13
        }
      },
      "70": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 393,
          column: 19
        }
      },
      "71": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 23
        }
      },
      "72": {
        start: {
          line: 396,
          column: 30
        },
        end: {
          line: 396,
          column: 40
        }
      },
      "73": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 75
        }
      },
      "74": {
        start: {
          line: 404,
          column: 33
        },
        end: {
          line: 404,
          column: 45
        }
      },
      "75": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 409,
          column: 15
        }
      },
      "76": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 414,
          column: 15
        }
      },
      "77": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 417,
          column: 77
        }
      },
      "78": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 421,
          column: 15
        }
      },
      "79": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 462,
          column: 9
        }
      },
      "80": {
        start: {
          line: 429,
          column: 31
        },
        end: {
          line: 449,
          column: 13
        }
      },
      "81": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 454,
          column: 15
        }
      },
      "82": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 86
        }
      },
      "83": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 461,
          column: 15
        }
      },
      "84": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 543,
          column: 9
        }
      },
      "85": {
        start: {
          line: 469,
          column: 28
        },
        end: {
          line: 469,
          column: 36
        }
      },
      "86": {
        start: {
          line: 470,
          column: 32
        },
        end: {
          line: 470,
          column: 40
        }
      },
      "87": {
        start: {
          line: 473,
          column: 31
        },
        end: {
          line: 473,
          column: 33
        }
      },
      "88": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 486,
          column: 13
        }
      },
      "89": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 485,
          column: 19
        }
      },
      "90": {
        start: {
          line: 487,
          column: 12
        },
        end: {
          line: 502,
          column: 13
        }
      },
      "91": {
        start: {
          line: 488,
          column: 16
        },
        end: {
          line: 501,
          column: 19
        }
      },
      "92": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 505,
          column: 13
        }
      },
      "93": {
        start: {
          line: 504,
          column: 16
        },
        end: {
          line: 504,
          column: 70
        }
      },
      "94": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 508,
          column: 13
        }
      },
      "95": {
        start: {
          line: 507,
          column: 16
        },
        end: {
          line: 507,
          column: 73
        }
      },
      "96": {
        start: {
          line: 509,
          column: 29
        },
        end: {
          line: 509,
          column: 51
        }
      },
      "97": {
        start: {
          line: 510,
          column: 31
        },
        end: {
          line: 522,
          column: 13
        }
      },
      "98": {
        start: {
          line: 525,
          column: 12
        },
        end: {
          line: 530,
          column: 15
        }
      },
      "99": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 535,
          column: 15
        }
      },
      "100": {
        start: {
          line: 538,
          column: 12
        },
        end: {
          line: 538,
          column: 70
        }
      },
      "101": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 542,
          column: 15
        }
      },
      "102": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 577,
          column: 9
        }
      },
      "103": {
        start: {
          line: 551,
          column: 32
        },
        end: {
          line: 564,
          column: 13
        }
      },
      "104": {
        start: {
          line: 565,
          column: 12
        },
        end: {
          line: 569,
          column: 15
        }
      },
      "105": {
        start: {
          line: 572,
          column: 12
        },
        end: {
          line: 572,
          column: 72
        }
      },
      "106": {
        start: {
          line: 573,
          column: 12
        },
        end: {
          line: 576,
          column: 15
        }
      },
      "107": {
        start: {
          line: 583,
          column: 8
        },
        end: {
          line: 628,
          column: 9
        }
      },
      "108": {
        start: {
          line: 585,
          column: 29
        },
        end: {
          line: 615,
          column: 13
        }
      },
      "109": {
        start: {
          line: 616,
          column: 12
        },
        end: {
          line: 620,
          column: 15
        }
      },
      "110": {
        start: {
          line: 623,
          column: 12
        },
        end: {
          line: 623,
          column: 74
        }
      },
      "111": {
        start: {
          line: 624,
          column: 12
        },
        end: {
          line: 627,
          column: 15
        }
      },
      "112": {
        start: {
          line: 634,
          column: 8
        },
        end: {
          line: 662,
          column: 9
        }
      },
      "113": {
        start: {
          line: 635,
          column: 29
        },
        end: {
          line: 635,
          column: 37
        }
      },
      "114": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 643,
          column: 13
        }
      },
      "115": {
        start: {
          line: 638,
          column: 16
        },
        end: {
          line: 641,
          column: 19
        }
      },
      "116": {
        start: {
          line: 642,
          column: 16
        },
        end: {
          line: 642,
          column: 23
        }
      },
      "117": {
        start: {
          line: 646,
          column: 12
        },
        end: {
          line: 649,
          column: 15
        }
      },
      "118": {
        start: {
          line: 650,
          column: 12
        },
        end: {
          line: 654,
          column: 15
        }
      },
      "119": {
        start: {
          line: 657,
          column: 12
        },
        end: {
          line: 657,
          column: 78
        }
      },
      "120": {
        start: {
          line: 658,
          column: 12
        },
        end: {
          line: 661,
          column: 15
        }
      },
      "121": {
        start: {
          line: 668,
          column: 8
        },
        end: {
          line: 693,
          column: 9
        }
      },
      "122": {
        start: {
          line: 669,
          column: 41
        },
        end: {
          line: 669,
          column: 49
        }
      },
      "123": {
        start: {
          line: 670,
          column: 32
        },
        end: {
          line: 670,
          column: 40
        }
      },
      "124": {
        start: {
          line: 673,
          column: 12
        },
        end: {
          line: 677,
          column: 15
        }
      },
      "125": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 685,
          column: 15
        }
      },
      "126": {
        start: {
          line: 688,
          column: 12
        },
        end: {
          line: 688,
          column: 84
        }
      },
      "127": {
        start: {
          line: 689,
          column: 12
        },
        end: {
          line: 692,
          column: 15
        }
      },
      "128": {
        start: {
          line: 699,
          column: 8
        },
        end: {
          line: 746,
          column: 9
        }
      },
      "129": {
        start: {
          line: 700,
          column: 27
        },
        end: {
          line: 700,
          column: 37
        }
      },
      "130": {
        start: {
          line: 701,
          column: 32
        },
        end: {
          line: 701,
          column: 40
        }
      },
      "131": {
        start: {
          line: 702,
          column: 12
        },
        end: {
          line: 708,
          column: 13
        }
      },
      "132": {
        start: {
          line: 703,
          column: 16
        },
        end: {
          line: 706,
          column: 19
        }
      },
      "133": {
        start: {
          line: 707,
          column: 16
        },
        end: {
          line: 707,
          column: 23
        }
      },
      "134": {
        start: {
          line: 713,
          column: 27
        },
        end: {
          line: 713,
          column: 51
        }
      },
      "135": {
        start: {
          line: 714,
          column: 12
        },
        end: {
          line: 720,
          column: 13
        }
      },
      "136": {
        start: {
          line: 715,
          column: 16
        },
        end: {
          line: 718,
          column: 19
        }
      },
      "137": {
        start: {
          line: 719,
          column: 16
        },
        end: {
          line: 719,
          column: 23
        }
      },
      "138": {
        start: {
          line: 722,
          column: 31
        },
        end: {
          line: 731,
          column: 13
        }
      },
      "139": {
        start: {
          line: 732,
          column: 12
        },
        end: {
          line: 735,
          column: 15
        }
      },
      "140": {
        start: {
          line: 736,
          column: 12
        },
        end: {
          line: 736,
          column: 62
        }
      },
      "141": {
        start: {
          line: 737,
          column: 12
        },
        end: {
          line: 737,
          column: 86
        }
      },
      "142": {
        start: {
          line: 738,
          column: 12
        },
        end: {
          line: 738,
          column: 45
        }
      },
      "143": {
        start: {
          line: 741,
          column: 12
        },
        end: {
          line: 741,
          column: 71
        }
      },
      "144": {
        start: {
          line: 742,
          column: 12
        },
        end: {
          line: 745,
          column: 15
        }
      },
      "145": {
        start: {
          line: 752,
          column: 8
        },
        end: {
          line: 788,
          column: 9
        }
      },
      "146": {
        start: {
          line: 753,
          column: 27
        },
        end: {
          line: 753,
          column: 37
        }
      },
      "147": {
        start: {
          line: 754,
          column: 32
        },
        end: {
          line: 754,
          column: 40
        }
      },
      "148": {
        start: {
          line: 755,
          column: 12
        },
        end: {
          line: 761,
          column: 13
        }
      },
      "149": {
        start: {
          line: 756,
          column: 16
        },
        end: {
          line: 759,
          column: 19
        }
      },
      "150": {
        start: {
          line: 760,
          column: 16
        },
        end: {
          line: 760,
          column: 23
        }
      },
      "151": {
        start: {
          line: 763,
          column: 27
        },
        end: {
          line: 763,
          column: 51
        }
      },
      "152": {
        start: {
          line: 764,
          column: 12
        },
        end: {
          line: 770,
          column: 13
        }
      },
      "153": {
        start: {
          line: 765,
          column: 16
        },
        end: {
          line: 768,
          column: 19
        }
      },
      "154": {
        start: {
          line: 769,
          column: 16
        },
        end: {
          line: 769,
          column: 23
        }
      },
      "155": {
        start: {
          line: 773,
          column: 12
        },
        end: {
          line: 776,
          column: 15
        }
      },
      "156": {
        start: {
          line: 777,
          column: 12
        },
        end: {
          line: 780,
          column: 15
        }
      },
      "157": {
        start: {
          line: 783,
          column: 12
        },
        end: {
          line: 783,
          column: 72
        }
      },
      "158": {
        start: {
          line: 784,
          column: 12
        },
        end: {
          line: 787,
          column: 15
        }
      },
      "159": {
        start: {
          line: 794,
          column: 8
        },
        end: {
          line: 843,
          column: 9
        }
      },
      "160": {
        start: {
          line: 795,
          column: 37
        },
        end: {
          line: 795,
          column: 45
        }
      },
      "161": {
        start: {
          line: 796,
          column: 32
        },
        end: {
          line: 796,
          column: 40
        }
      },
      "162": {
        start: {
          line: 812,
          column: 26
        },
        end: {
          line: 812,
          column: 51
        }
      },
      "163": {
        start: {
          line: 813,
          column: 12
        },
        end: {
          line: 821,
          column: 13
        }
      },
      "164": {
        start: {
          line: 814,
          column: 16
        },
        end: {
          line: 814,
          column: 64
        }
      },
      "165": {
        start: {
          line: 816,
          column: 17
        },
        end: {
          line: 821,
          column: 13
        }
      },
      "166": {
        start: {
          line: 817,
          column: 16
        },
        end: {
          line: 817,
          column: 59
        }
      },
      "167": {
        start: {
          line: 820,
          column: 16
        },
        end: {
          line: 820,
          column: 51
        }
      },
      "168": {
        start: {
          line: 822,
          column: 12
        },
        end: {
          line: 826,
          column: 15
        }
      },
      "169": {
        start: {
          line: 827,
          column: 12
        },
        end: {
          line: 835,
          column: 15
        }
      },
      "170": {
        start: {
          line: 838,
          column: 12
        },
        end: {
          line: 838,
          column: 70
        }
      },
      "171": {
        start: {
          line: 839,
          column: 12
        },
        end: {
          line: 842,
          column: 15
        }
      },
      "172": {
        start: {
          line: 849,
          column: 8
        },
        end: {
          line: 876,
          column: 9
        }
      },
      "173": {
        start: {
          line: 850,
          column: 75
        },
        end: {
          line: 850,
          column: 83
        }
      },
      "174": {
        start: {
          line: 851,
          column: 32
        },
        end: {
          line: 851,
          column: 40
        }
      },
      "175": {
        start: {
          line: 856,
          column: 12
        },
        end: {
          line: 859,
          column: 15
        }
      },
      "176": {
        start: {
          line: 860,
          column: 12
        },
        end: {
          line: 868,
          column: 15
        }
      },
      "177": {
        start: {
          line: 871,
          column: 12
        },
        end: {
          line: 871,
          column: 83
        }
      },
      "178": {
        start: {
          line: 872,
          column: 12
        },
        end: {
          line: 875,
          column: 15
        }
      },
      "179": {
        start: {
          line: 879,
          column: 0
        },
        end: {
          line: 879,
          column: 42
        }
      },
      "180": {
        start: {
          line: 880,
          column: 0
        },
        end: {
          line: 880,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 40
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 42
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 191
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 263,
            column: 32
          },
          end: {
            line: 263,
            column: 33
          }
        },
        loc: {
          start: {
            line: 263,
            column: 43
          },
          end: {
            line: 268,
            column: 13
          }
        },
        line: 263
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 264,
            column: 37
          },
          end: {
            line: 264,
            column: 38
          }
        },
        loc: {
          start: {
            line: 264,
            column: 51
          },
          end: {
            line: 267,
            column: 17
          }
        },
        line: 264
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 270,
            column: 22
          },
          end: {
            line: 270,
            column: 23
          }
        },
        loc: {
          start: {
            line: 270,
            column: 40
          },
          end: {
            line: 270,
            column: 45
          }
        },
        line: 270
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 272,
            column: 21
          },
          end: {
            line: 272,
            column: 22
          }
        },
        loc: {
          start: {
            line: 272,
            column: 40
          },
          end: {
            line: 272,
            column: 54
          }
        },
        line: 272
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 41
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 309
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 40
          },
          end: {
            line: 423,
            column: 5
          }
        },
        line: 385
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 41
          },
          end: {
            line: 463,
            column: 5
          }
        },
        line: 427
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 467,
            column: 5
          }
        },
        loc: {
          start: {
            line: 467,
            column: 40
          },
          end: {
            line: 544,
            column: 5
          }
        },
        line: 467
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 548,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        loc: {
          start: {
            line: 548,
            column: 38
          },
          end: {
            line: 578,
            column: 5
          }
        },
        line: 548
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 582,
            column: 4
          },
          end: {
            line: 582,
            column: 5
          }
        },
        loc: {
          start: {
            line: 582,
            column: 39
          },
          end: {
            line: 629,
            column: 5
          }
        },
        line: 582
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 633,
            column: 4
          },
          end: {
            line: 633,
            column: 5
          }
        },
        loc: {
          start: {
            line: 633,
            column: 42
          },
          end: {
            line: 663,
            column: 5
          }
        },
        line: 633
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 667,
            column: 4
          },
          end: {
            line: 667,
            column: 5
          }
        },
        loc: {
          start: {
            line: 667,
            column: 49
          },
          end: {
            line: 694,
            column: 5
          }
        },
        line: 667
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 698,
            column: 4
          },
          end: {
            line: 698,
            column: 5
          }
        },
        loc: {
          start: {
            line: 698,
            column: 42
          },
          end: {
            line: 747,
            column: 5
          }
        },
        line: 698
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 751,
            column: 4
          },
          end: {
            line: 751,
            column: 5
          }
        },
        loc: {
          start: {
            line: 751,
            column: 40
          },
          end: {
            line: 789,
            column: 5
          }
        },
        line: 751
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 793,
            column: 4
          },
          end: {
            line: 793,
            column: 5
          }
        },
        loc: {
          start: {
            line: 793,
            column: 38
          },
          end: {
            line: 844,
            column: 5
          }
        },
        line: 793
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 848,
            column: 4
          },
          end: {
            line: 848,
            column: 5
          }
        },
        loc: {
          start: {
            line: 848,
            column: 45
          },
          end: {
            line: 877,
            column: 5
          }
        },
        line: 848
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 20
          },
          end: {
            line: 19,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 19,
            column: 33
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 157,
            column: 36
          },
          end: {
            line: 157,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 36
          },
          end: {
            line: 157,
            column: 62
          }
        }, {
          start: {
            line: 157,
            column: 66
          },
          end: {
            line: 157,
            column: 67
          }
        }],
        line: 157
      },
      "5": {
        loc: {
          start: {
            line: 193,
            column: 20
          },
          end: {
            line: 193,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 193,
            column: 29
          },
          end: {
            line: 193,
            column: 33
          }
        }],
        line: 193
      },
      "6": {
        loc: {
          start: {
            line: 193,
            column: 35
          },
          end: {
            line: 193,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 193,
            column: 45
          },
          end: {
            line: 193,
            column: 50
          }
        }],
        line: 193
      },
      "7": {
        loc: {
          start: {
            line: 266,
            column: 42
          },
          end: {
            line: 266,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 42
          },
          end: {
            line: 266,
            column: 60
          }
        }, {
          start: {
            line: 266,
            column: 64
          },
          end: {
            line: 266,
            column: 65
          }
        }],
        line: 266
      },
      "8": {
        loc: {
          start: {
            line: 286,
            column: 34
          },
          end: {
            line: 286,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 34
          },
          end: {
            line: 286,
            column: 60
          }
        }, {
          start: {
            line: 286,
            column: 64
          },
          end: {
            line: 286,
            column: 65
          }
        }],
        line: 286
      },
      "9": {
        loc: {
          start: {
            line: 287,
            column: 32
          },
          end: {
            line: 287,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 287,
            column: 32
          },
          end: {
            line: 287,
            column: 58
          }
        }, {
          start: {
            line: 287,
            column: 62
          },
          end: {
            line: 287,
            column: 63
          }
        }],
        line: 287
      },
      "10": {
        loc: {
          start: {
            line: 311,
            column: 53
          },
          end: {
            line: 311,
            column: 61
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 311,
            column: 60
          },
          end: {
            line: 311,
            column: 61
          }
        }],
        line: 311
      },
      "11": {
        loc: {
          start: {
            line: 311,
            column: 63
          },
          end: {
            line: 311,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 311,
            column: 71
          },
          end: {
            line: 311,
            column: 73
          }
        }],
        line: 311
      },
      "12": {
        loc: {
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 12
          },
          end: {
            line: 320,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "13": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 326,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 326,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "14": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 337,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "15": {
        loc: {
          start: {
            line: 327,
            column: 16
          },
          end: {
            line: 327,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 16
          },
          end: {
            line: 327,
            column: 24
          }
        }, {
          start: {
            line: 327,
            column: 28
          },
          end: {
            line: 327,
            column: 34
          }
        }],
        line: 327
      },
      "16": {
        loc: {
          start: {
            line: 329,
            column: 16
          },
          end: {
            line: 331,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 16
          },
          end: {
            line: 331,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "17": {
        loc: {
          start: {
            line: 332,
            column: 16
          },
          end: {
            line: 336,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 16
          },
          end: {
            line: 336,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 332
      },
      "18": {
        loc: {
          start: {
            line: 387,
            column: 20
          },
          end: {
            line: 387,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 387,
            column: 36
          },
          end: {
            line: 387,
            column: 38
          }
        }],
        line: 387
      },
      "19": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 395,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "20": {
        loc: {
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 389,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 389,
            column: 16
          },
          end: {
            line: 389,
            column: 33
          }
        }, {
          start: {
            line: 389,
            column: 37
          },
          end: {
            line: 389,
            column: 56
          }
        }],
        line: 389
      },
      "21": {
        loc: {
          start: {
            line: 430,
            column: 25
          },
          end: {
            line: 430,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 25
          },
          end: {
            line: 430,
            column: 48
          }
        }, {
          start: {
            line: 430,
            column: 52
          },
          end: {
            line: 430,
            column: 59
          }
        }],
        line: 430
      },
      "22": {
        loc: {
          start: {
            line: 431,
            column: 29
          },
          end: {
            line: 431,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 431,
            column: 29
          },
          end: {
            line: 431,
            column: 49
          }
        }, {
          start: {
            line: 431,
            column: 53
          },
          end: {
            line: 431,
            column: 66
          }
        }],
        line: 431
      },
      "23": {
        loc: {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 486,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 486,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "24": {
        loc: {
          start: {
            line: 487,
            column: 12
          },
          end: {
            line: 502,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 12
          },
          end: {
            line: 502,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "25": {
        loc: {
          start: {
            line: 503,
            column: 12
          },
          end: {
            line: 505,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 12
          },
          end: {
            line: 505,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "26": {
        loc: {
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 12
          },
          end: {
            line: 508,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "27": {
        loc: {
          start: {
            line: 517,
            column: 27
          },
          end: {
            line: 517,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 517,
            column: 27
          },
          end: {
            line: 517,
            column: 51
          }
        }, {
          start: {
            line: 517,
            column: 55
          },
          end: {
            line: 517,
            column: 56
          }
        }],
        line: 517
      },
      "28": {
        loc: {
          start: {
            line: 518,
            column: 30
          },
          end: {
            line: 518,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 518,
            column: 30
          },
          end: {
            line: 518,
            column: 57
          }
        }, {
          start: {
            line: 518,
            column: 61
          },
          end: {
            line: 518,
            column: 62
          }
        }],
        line: 518
      },
      "29": {
        loc: {
          start: {
            line: 519,
            column: 30
          },
          end: {
            line: 519,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 519,
            column: 30
          },
          end: {
            line: 519,
            column: 57
          }
        }, {
          start: {
            line: 519,
            column: 61
          },
          end: {
            line: 519,
            column: 62
          }
        }],
        line: 519
      },
      "30": {
        loc: {
          start: {
            line: 520,
            column: 32
          },
          end: {
            line: 520,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 520,
            column: 32
          },
          end: {
            line: 520,
            column: 61
          }
        }, {
          start: {
            line: 520,
            column: 65
          },
          end: {
            line: 520,
            column: 66
          }
        }],
        line: 520
      },
      "31": {
        loc: {
          start: {
            line: 637,
            column: 12
          },
          end: {
            line: 643,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 637,
            column: 12
          },
          end: {
            line: 643,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 637
      },
      "32": {
        loc: {
          start: {
            line: 637,
            column: 16
          },
          end: {
            line: 637,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 637,
            column: 16
          },
          end: {
            line: 637,
            column: 25
          }
        }, {
          start: {
            line: 637,
            column: 29
          },
          end: {
            line: 637,
            column: 57
          }
        }],
        line: 637
      },
      "33": {
        loc: {
          start: {
            line: 647,
            column: 27
          },
          end: {
            line: 647,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 647,
            column: 27
          },
          end: {
            line: 647,
            column: 39
          }
        }, {
          start: {
            line: 647,
            column: 43
          },
          end: {
            line: 647,
            column: 51
          }
        }],
        line: 647
      },
      "34": {
        loc: {
          start: {
            line: 680,
            column: 47
          },
          end: {
            line: 680,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 680,
            column: 57
          },
          end: {
            line: 680,
            column: 66
          }
        }, {
          start: {
            line: 680,
            column: 69
          },
          end: {
            line: 680,
            column: 81
          }
        }],
        line: 680
      },
      "35": {
        loc: {
          start: {
            line: 683,
            column: 29
          },
          end: {
            line: 683,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 683,
            column: 29
          },
          end: {
            line: 683,
            column: 36
          }
        }, {
          start: {
            line: 683,
            column: 40
          },
          end: {
            line: 683,
            column: 44
          }
        }],
        line: 683
      },
      "36": {
        loc: {
          start: {
            line: 702,
            column: 12
          },
          end: {
            line: 708,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 702,
            column: 12
          },
          end: {
            line: 708,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 702
      },
      "37": {
        loc: {
          start: {
            line: 714,
            column: 12
          },
          end: {
            line: 720,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 714,
            column: 12
          },
          end: {
            line: 720,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 714
      },
      "38": {
        loc: {
          start: {
            line: 755,
            column: 12
          },
          end: {
            line: 761,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 755,
            column: 12
          },
          end: {
            line: 761,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 755
      },
      "39": {
        loc: {
          start: {
            line: 764,
            column: 12
          },
          end: {
            line: 770,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 764,
            column: 12
          },
          end: {
            line: 770,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 764
      },
      "40": {
        loc: {
          start: {
            line: 813,
            column: 12
          },
          end: {
            line: 821,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 813,
            column: 12
          },
          end: {
            line: 821,
            column: 13
          }
        }, {
          start: {
            line: 816,
            column: 17
          },
          end: {
            line: 821,
            column: 13
          }
        }],
        line: 813
      },
      "41": {
        loc: {
          start: {
            line: 816,
            column: 17
          },
          end: {
            line: 821,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 816,
            column: 17
          },
          end: {
            line: 821,
            column: 13
          }
        }, {
          start: {
            line: 819,
            column: 17
          },
          end: {
            line: 821,
            column: 13
          }
        }],
        line: 816
      },
      "42": {
        loc: {
          start: {
            line: 831,
            column: 29
          },
          end: {
            line: 831,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 831,
            column: 29
          },
          end: {
            line: 831,
            column: 36
          }
        }, {
          start: {
            line: 831,
            column: 40
          },
          end: {
            line: 831,
            column: 44
          }
        }],
        line: 831
      },
      "43": {
        loc: {
          start: {
            line: 832,
            column: 25
          },
          end: {
            line: 832,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 832,
            column: 25
          },
          end: {
            line: 832,
            column: 28
          }
        }, {
          start: {
            line: 832,
            column: 32
          },
          end: {
            line: 832,
            column: 36
          }
        }],
        line: 832
      },
      "44": {
        loc: {
          start: {
            line: 850,
            column: 20
          },
          end: {
            line: 850,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 850,
            column: 30
          },
          end: {
            line: 850,
            column: 70
          }
        }],
        line: 850
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0]
    },
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\adminController.ts",
      mappings: "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",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\adminController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para filtros de logs\r\ninterface LogFilters {\r\n  level?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  search?: string;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\n// Interface para backup\r\ninterface BackupOptions {\r\n  includeUsers?: boolean;\r\n  includeArticles?: boolean;\r\n  includeContacts?: boolean;\r\n  includeCategories?: boolean;\r\n  includeComments?: boolean;\r\n}\r\n\r\n/**\r\n * Controller respons\xE1vel pelas funcionalidades administrativas\r\n */\r\nexport class AdminController {\r\n  /**\r\n   * Dashboard com estat\xEDsticas gerais\r\n   */\r\n  static async getDashboard(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      // Estat\xEDsticas gerais\r\n      const [userStats, articleStats, contactStats, categoryStats] = await Promise.all([\r\n        // Usu\xE1rios\r\n        Promise.all([\r\n          prisma.user.count(),\r\n          prisma.user.count({ where: { isActive: true } }),\r\n          prisma.user.count({ where: { createdAt: { gte: dateLimit } } }),\r\n          prisma.user.count({ where: { role: 'ADMIN' } })\r\n        ]),\r\n        // Artigos\r\n        Promise.all([\r\n          prisma.article.count(),\r\n          prisma.article.count({ where: { status: 'PUBLISHED' } }),\r\n          prisma.article.count({ where: { createdAt: { gte: dateLimit } } }),\r\n          prisma.article.aggregate({ _sum: { views: true } })\r\n        ]),\r\n        // Contatos\r\n        Promise.all([\r\n          prisma.contact.count(),\r\n          prisma.contact.count({ where: { status: 'PENDING' } }),\r\n          prisma.contact.count({ where: { status: { in: ['PENDING', 'IN_PROGRESS'] } } }),\r\n          prisma.contact.count({ where: { createdAt: { gte: dateLimit } } })\r\n        ]),\r\n        // Categorias\r\n        Promise.all([\r\n          prisma.category.count()\r\n        ])\r\n      ]);\r\n\r\n      // Artigos mais populares\r\n      const popularArticles = await prisma.article.findMany({\r\n        where: { status: 'PUBLISHED' },\r\n        select: {\r\n          id: true,\r\n          title: true,\r\n          slug: true,\r\n          views: true,\r\n          publishedAt: true,\r\n          author: {\r\n            select: {\r\n              name: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: { views: 'desc' },\r\n        take: 5\r\n      });\r\n\r\n      // Usu\xE1rios mais ativos (por artigos publicados)\r\n      const activeAuthors = await prisma.user.findMany({\r\n        where: {\r\n          articles: {\r\n            some: {\r\n              status: 'PUBLISHED'\r\n            }\r\n          }\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          _count: {\r\n            select: {\r\n              articles: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: {\r\n          articles: {\r\n            _count: 'desc'\r\n          }\r\n        },\r\n        take: 5\r\n      });\r\n\r\n      // Contatos recentes pendentes\r\n      const recentContacts = await prisma.contact.findMany({\r\n        where: { status: 'PENDING' },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          subject: true,\r\n          createdAt: true\r\n        },\r\n        orderBy: { createdAt: 'desc' },\r\n        take: 5\r\n      });\r\n\r\n      // Estat\xEDsticas di\xE1rias dos \xFAltimos 7 dias\r\n      const dailyStats = await prisma.$queryRaw`\r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'users' as type,\r\n          COUNT(*) as count\r\n        FROM User \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        UNION ALL\r\n        \r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'articles' as type,\r\n          COUNT(*) as count\r\n        FROM Article \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        UNION ALL\r\n        \r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'contacts' as type,\r\n          COUNT(*) as count\r\n        FROM Contact \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        ORDER BY date DESC, type\r\n      `;\r\n\r\n      const dashboard = {\r\n        period: {\r\n          days: periodDays,\r\n          from: dateLimit,\r\n          to: new Date()\r\n        },\r\n        statistics: {\r\n          users: {\r\n            total: userStats[0],\r\n            active: userStats[1],\r\n            newInPeriod: userStats[2],\r\n            admins: userStats[3]\r\n          },\r\n          articles: {\r\n            total: articleStats[0],\r\n            published: articleStats[1],\r\n            newInPeriod: articleStats[2],\r\n            totalViews: articleStats[3]._sum.views || 0\r\n          },\r\n          contacts: {\r\n            total: contactStats[0],\r\n            unread: contactStats[1],\r\n            pending: contactStats[2],\r\n            newInPeriod: contactStats[3]\r\n          },\r\n          categories: {\r\n            total: categoryStats[0]\r\n          }\r\n        },\r\n        popularArticles,\r\n        activeAuthors,\r\n        recentContacts,\r\n        dailyStats\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Dashboard carregado com sucesso',\r\n        data: { dashboard }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao carregar dashboard', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estat\xEDsticas detalhadas do sistema\r\n   */\r\n  static async getSystemStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30', groupBy = 'day' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      // Estat\xEDsticas de crescimento\r\n      const growthStats = await Promise.all([\r\n        // Crescimento de usu\xE1rios\r\n        prisma.user.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        }),\r\n        // Crescimento de artigos\r\n        prisma.article.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        }),\r\n        // Crescimento de contatos\r\n        prisma.contact.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        })\r\n      ]);\r\n\r\n      // Estat\xEDsticas por categoria\r\n      const categoryStats = await prisma.category.findMany({\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          slug: true,\r\n          _count: {\r\n            select: {\r\n              articles: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: {\r\n          articles: {\r\n            _count: 'desc'\r\n          }\r\n        }\r\n      });\r\n\r\n      // Estat\xEDsticas de engajamento\r\n      const engagementStats = await prisma.article.aggregate({\r\n        where: {\r\n          status: 'PUBLISHED',\r\n          publishedAt: { gte: dateLimit }\r\n        },\r\n        _avg: { views: true },\r\n        _sum: { views: true },\r\n        _count: true\r\n      });\r\n\r\n      // Top tags\r\n      const allArticles = await prisma.article.findMany({\r\n        where: { status: 'PUBLISHED' },\r\n        include: {\r\n          tags: {\r\n            include: {\r\n              tag: {\r\n                select: { name: true }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      const tagCounts: { [key: string]: number } = {};\r\n      allArticles.forEach(article => {\r\n        article.tags.forEach(articleTag => {\r\n          const tagName = articleTag.tag.name;\r\n          tagCounts[tagName] = (tagCounts[tagName] || 0) + 1;\r\n        });\r\n      });\r\n\r\n      const topTags = Object.entries(tagCounts)\r\n        .sort(([, a], [, b]) => b - a)\r\n        .slice(0, 10)\r\n        .map(([tag, count]) => ({ tag, count }));\r\n\r\n      const systemStats = {\r\n        period: {\r\n          days: periodDays,\r\n          from: dateLimit,\r\n          to: new Date()\r\n        },\r\n        growth: {\r\n          users: growthStats[0],\r\n          articles: growthStats[1],\r\n          contacts: growthStats[2]\r\n        },\r\n        categories: categoryStats,\r\n        engagement: {\r\n          averageViews: engagementStats._avg.views || 0,\r\n          totalViews: engagementStats._sum.views || 0,\r\n          totalArticles: engagementStats._count\r\n        },\r\n        topTags\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estat\xEDsticas do sistema obtidas com sucesso',\r\n        data: { systemStats }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estat\xEDsticas do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista logs do sistema\r\n   */\r\n  static async getSystemLogs(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        level,\r\n        dateFrom,\r\n        dateTo,\r\n        search,\r\n        page = 1,\r\n        limit = 50\r\n      }: LogFilters = req.query;\r\n\r\n      // Nota: Esta implementa\xE7\xE3o assume que voc\xEA tem uma tabela de logs\r\n      // Se estiver usando apenas arquivos de log, voc\xEA precisar\xE1 implementar\r\n      // uma l\xF3gica diferente para ler os arquivos\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      const where: any = {};\r\n\r\n      if (level) {\r\n        where.level = level;\r\n      }\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { message: { contains: search, mode: 'insensitive' } },\r\n          { meta: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.timestamp = {};\r\n        if (dateFrom) {\r\n          where.timestamp.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.timestamp.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Simula\xE7\xE3o de logs - substitua pela sua implementa\xE7\xE3o real\r\n      const mockLogs = [\r\n        {\r\n          id: '1',\r\n          level: 'info',\r\n          message: 'Sistema iniciado',\r\n          timestamp: new Date(),\r\n          meta: JSON.stringify({ service: 'api' })\r\n        },\r\n        {\r\n          id: '2',\r\n          level: 'error',\r\n          message: 'Erro de conex\xE3o com banco de dados',\r\n          timestamp: new Date(Date.now() - 3600000),\r\n          meta: JSON.stringify({ error: 'Connection timeout' })\r\n        }\r\n      ];\r\n\r\n      const logs = mockLogs.slice(skip, skip + take);\r\n      const total = mockLogs.length;\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Logs obtidos com sucesso',\r\n        data: {\r\n          logs,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter logs do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpa logs antigos\r\n   */\r\n  static async clearOldLogs(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { olderThanDays = 30 } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (olderThanDays < 1 || olderThanDays > 365) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Per\xEDodo deve ser entre 1 e 365 dias'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - Number(olderThanDays));\r\n\r\n      // Implementar limpeza de logs aqui\r\n      // const deletedCount = await prisma.log.deleteMany({\r\n      //   where: {\r\n      //     timestamp: { lt: dateLimit }\r\n      //   }\r\n      // });\r\n\r\n      const deletedCount = { count: 0 }; // Mock\r\n\r\n      logger.info('Logs antigos removidos', {\r\n        olderThanDays,\r\n        deletedCount: deletedCount.count,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${deletedCount.count} logs removidos com sucesso`,\r\n        data: { deletedCount: deletedCount.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao limpar logs antigos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Informa\xE7\xF5es do sistema\r\n   */\r\n  static async getSystemInfo(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const systemInfo = {\r\n        version: process.env.APP_VERSION || '1.0.0',\r\n        environment: process.env.NODE_ENV || 'development',\r\n        nodeVersion: process.version,\r\n        platform: process.platform,\r\n        uptime: process.uptime(),\r\n        memory: process.memoryUsage(),\r\n        database: {\r\n          status: 'connected', // Verificar conex\xE3o real\r\n          version: 'PostgreSQL 14+' // Obter vers\xE3o real\r\n        },\r\n        features: {\r\n          authentication: true,\r\n          fileUpload: true,\r\n          emailService: false, // Configurar baseado na implementa\xE7\xE3o\r\n          backup: true,\r\n          logging: true\r\n        },\r\n        lastBackup: null, // Implementar controle de backup\r\n        maintenanceMode: false\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Informa\xE7\xF5es do sistema obtidas com sucesso',\r\n        data: { systemInfo }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter informa\xE7\xF5es do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Backup do banco de dados\r\n   */\r\n  static async createBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const options: BackupOptions = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar l\xF3gica de backup aqui\r\n      // Esta \xE9 uma implementa\xE7\xE3o simplificada\r\n      const backupData: any = {};\r\n\r\n      if (options.includeUsers !== false) {\r\n        backupData.users = await prisma.user.findMany({\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            role: true,\r\n            isActive: true,\r\n            createdAt: true,\r\n            updatedAt: true\r\n          }\r\n        });\r\n      }\r\n\r\n      if (options.includeArticles !== false) {\r\n        backupData.articles = await prisma.article.findMany({\r\n          include: {\r\n            author: {\r\n              select: { id: true, name: true, email: true }\r\n            },\r\n            categories: {\r\n              include: {\r\n                category: {\r\n                  select: { id: true, name: true, slug: true }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (options.includeContacts !== false) {\r\n        backupData.contacts = await prisma.contact.findMany();\r\n      }\r\n\r\n      if (options.includeCategories !== false) {\r\n        backupData.categories = await prisma.category.findMany();\r\n      }\r\n\r\n      const backupId = `backup_${Date.now()}`;\r\n      const backupInfo = {\r\n        id: backupId,\r\n        createdAt: new Date(),\r\n        createdBy: currentUser.id,\r\n        size: JSON.stringify(backupData).length,\r\n        options,\r\n        recordCounts: {\r\n          users: backupData.users?.length || 0,\r\n          articles: backupData.articles?.length || 0,\r\n          contacts: backupData.contacts?.length || 0,\r\n          categories: backupData.categories?.length || 0\r\n        }\r\n      };\r\n\r\n      // Salvar backup em arquivo ou storage\r\n      // await fs.writeFile(`backups/${backupId}.json`, JSON.stringify(backupData, null, 2));\r\n\r\n      logger.info('Backup criado', {\r\n        backupId,\r\n        createdBy: currentUser.id,\r\n        size: backupInfo.size,\r\n        recordCounts: backupInfo.recordCounts\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Backup criado com sucesso',\r\n        data: { backup: backupInfo }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista backups dispon\xEDveis\r\n   */\r\n  static async getBackups(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Implementar listagem de backups do storage/filesystem\r\n      const mockBackups = [\r\n        {\r\n          id: 'backup_1703123456789',\r\n          createdAt: new Date('2023-12-20T10:30:00Z'),\r\n          createdBy: 'admin-user-id',\r\n          size: 1024000,\r\n          recordCounts: {\r\n            users: 25,\r\n            articles: 150,\r\n            contacts: 75,\r\n            categories: 10\r\n          }\r\n        }\r\n      ];\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Backups listados com sucesso',\r\n        data: { backups: mockBackups }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar backups', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obt\xE9m configura\xE7\xF5es do sistema\r\n   */\r\n  static async getSettings(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Buscar configura\xE7\xF5es do sistema (simulado - em produ\xE7\xE3o seria uma tabela de settings)\r\n      const settings = {\r\n        siteName: 'Contabilidade Igrejinha',\r\n        siteDescription: 'Servi\xE7os cont\xE1beis especializados',\r\n        contactEmail: 'contato@contabilidadeigrejinha.com.br',\r\n        contactPhone: '(51) 99999-9999',\r\n        address: 'Rua Principal, 123 - Igrejinha/RS',\r\n        socialMedia: {\r\n          facebook: 'https://facebook.com/contabilidadeigrejinha',\r\n          instagram: 'https://instagram.com/contabilidadeigrejinha',\r\n          linkedin: 'https://linkedin.com/company/contabilidadeigrejinha'\r\n        },\r\n        businessHours: {\r\n          monday: '08:00-18:00',\r\n          tuesday: '08:00-18:00',\r\n          wednesday: '08:00-18:00',\r\n          thursday: '08:00-18:00',\r\n          friday: '08:00-17:00',\r\n          saturday: 'Fechado',\r\n          sunday: 'Fechado'\r\n        },\r\n        features: {\r\n          newsletter: true,\r\n          calculator: true,\r\n          blog: true,\r\n          testimonials: true\r\n        },\r\n        maintenance: {\r\n          enabled: false,\r\n          message: 'Site em manuten\xE7\xE3o. Voltamos em breve!'\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Configura\xE7\xF5es obtidas com sucesso',\r\n        data: { settings }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao obter configura\xE7\xF5es:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza configura\xE7\xF5es do sistema\r\n   */\r\n  static async updateSettings(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const settings = req.body;\r\n\r\n      // Valida\xE7\xF5es b\xE1sicas\r\n      if (!settings || typeof settings !== 'object') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados de configura\xE7\xE3o inv\xE1lidos'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Em produ\xE7\xE3o, aqui salvaria as configura\xE7\xF5es no banco de dados\r\n      // Por enquanto, apenas simula a atualiza\xE7\xE3o\r\n      logger.info('Configura\xE7\xF5es atualizadas', {\r\n        updatedBy: req.user?.id || 'system',\r\n        settings: Object.keys(settings)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Configura\xE7\xF5es atualizadas com sucesso',\r\n        data: { settings }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar configura\xE7\xF5es:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ativa/desativa modo de manuten\xE7\xE3o\r\n   */\r\n  static async toggleMaintenanceMode(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { enabled, message } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar controle de modo de manuten\xE7\xE3o\r\n      // Pode ser atrav\xE9s de vari\xE1vel de ambiente, arquivo ou banco de dados\r\n      \r\n      logger.info('Modo de manuten\xE7\xE3o alterado', {\r\n        enabled,\r\n        message,\r\n        changedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Modo de manuten\xE7\xE3o ${enabled ? 'ativado' : 'desativado'}`,\r\n        data: {\r\n          maintenanceMode: enabled,\r\n          message: message || null\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao alterar modo de manuten\xE7\xE3o', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Download de backup\r\n   */\r\n  static async downloadBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do backup \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o backup existe\r\n      // const backupPath = path.join('backups', `${id}.json`);\r\n      // const exists = await fs.access(backupPath).then(() => true).catch(() => false);\r\n      \r\n      // Simula\xE7\xE3o - em produ\xE7\xE3o verificaria se o arquivo existe\r\n      const exists = id.startsWith('backup_');\r\n      \r\n      if (!exists) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Backup n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Simular dados do backup\r\n      const backupData = {\r\n        id,\r\n        createdAt: new Date(),\r\n        data: {\r\n          users: [],\r\n          articles: [],\r\n          contacts: [],\r\n          categories: []\r\n        }\r\n      };\r\n\r\n      logger.info('Backup baixado', {\r\n        backupId: id,\r\n        downloadedBy: currentUser.id\r\n      });\r\n\r\n      res.setHeader('Content-Type', 'application/json');\r\n      res.setHeader('Content-Disposition', `attachment; filename=\"${id}.json\"`);\r\n      res.status(200).json(backupData);\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao baixar backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove backup\r\n   */\r\n  static async deleteBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do backup \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o backup existe\r\n      const exists = id.startsWith('backup_');\r\n      \r\n      if (!exists) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Backup n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Implementar remo\xE7\xE3o do arquivo de backup\r\n      // await fs.unlink(path.join('backups', `${id}.json`));\r\n\r\n      logger.info('Backup removido', {\r\n        backupId: id,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Backup removido com sucesso'\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao remover backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpa cache do sistema\r\n   */\r\n  static async clearCache(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { pattern, key } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar limpeza de cache\r\n      // Se usando Redis:\r\n      // if (pattern) {\r\n      //   await redis.eval(`\r\n      //     local keys = redis.call('keys', ARGV[1])\r\n      //     for i=1,#keys,5000 do\r\n      //       redis.call('del', unpack(keys, i, math.min(i+4999, #keys)))\r\n      //     end\r\n      //     return #keys\r\n      //   `, 0, pattern);\r\n      // } else if (key) {\r\n      //   await redis.del(key);\r\n      // } else {\r\n      //   await redis.flushall();\r\n      // }\r\n\r\n      let message = 'Cache limpo com sucesso';\r\n      if (pattern) {\r\n        message = `Cache limpo para padr\xE3o: ${pattern}`;\r\n      } else if (key) {\r\n        message = `Cache limpo para chave: ${key}`;\r\n      } else {\r\n        message = 'Todo o cache foi limpo';\r\n      }\r\n\r\n      logger.info('Cache limpo', {\r\n        pattern,\r\n        key,\r\n        clearedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message,\r\n        data: {\r\n          pattern: pattern || null,\r\n          key: key || null,\r\n          clearedAt: new Date()\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao limpar cache', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ativa modo de manuten\xE7\xE3o\r\n   */\r\n  static async enableMaintenance(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { message = 'Site em manuten\xE7\xE3o. Voltamos em breve!' } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar ativa\xE7\xE3o do modo de manuten\xE7\xE3o\r\n      // Pode ser atrav\xE9s de vari\xE1vel de ambiente, arquivo ou banco de dados\r\n      // process.env.MAINTENANCE_MODE = 'true';\r\n      // process.env.MAINTENANCE_MESSAGE = message;\r\n      \r\n      logger.info('Modo de manuten\xE7\xE3o ativado', {\r\n        message,\r\n        activatedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Modo de manuten\xE7\xE3o ativado',\r\n        data: {\r\n          maintenanceMode: true,\r\n          message,\r\n          activatedAt: new Date()\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao ativar modo de manuten\xE7\xE3o', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default AdminController;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "33eeb5c5e703049d2966d96b7d0ee4c380e55da1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wljci3vzs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wljci3vzs();
var __importDefault =
/* istanbul ignore next */
(cov_1wljci3vzs().s[0]++,
/* istanbul ignore next */
(cov_1wljci3vzs().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1wljci3vzs().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1wljci3vzs().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1wljci3vzs().f[0]++;
  cov_1wljci3vzs().s[1]++;
  return /* istanbul ignore next */(cov_1wljci3vzs().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1wljci3vzs().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1wljci3vzs().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1wljci3vzs().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1wljci3vzs().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1wljci3vzs().s[3]++;
exports.AdminController = void 0;
const client_1 =
/* istanbul ignore next */
(cov_1wljci3vzs().s[4]++, require("@prisma/client"));
const logger_1 =
/* istanbul ignore next */
(cov_1wljci3vzs().s[5]++, __importDefault(require("../utils/logger")));
const prisma =
/* istanbul ignore next */
(cov_1wljci3vzs().s[6]++, new client_1.PrismaClient());
/**
 * Controller responsável pelas funcionalidades administrativas
 */
class AdminController {
  /**
   * Dashboard com estatísticas gerais
   */
  static async getDashboard(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[1]++;
    cov_1wljci3vzs().s[7]++;
    try {
      const {
        period =
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[3][0]++, '30')
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[8]++, req.query);
      const periodDays =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[9]++, Number(period));
      const dateLimit =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[10]++, new Date());
      /* istanbul ignore next */
      cov_1wljci3vzs().s[11]++;
      dateLimit.setDate(dateLimit.getDate() - periodDays);
      // Estatísticas gerais
      const [userStats, articleStats, contactStats, categoryStats] =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[12]++, await Promise.all([
      // Usuários
      Promise.all([prisma.user.count(), prisma.user.count({
        where: {
          isActive: true
        }
      }), prisma.user.count({
        where: {
          createdAt: {
            gte: dateLimit
          }
        }
      }), prisma.user.count({
        where: {
          role: 'ADMIN'
        }
      })]),
      // Artigos
      Promise.all([prisma.article.count(), prisma.article.count({
        where: {
          status: 'PUBLISHED'
        }
      }), prisma.article.count({
        where: {
          createdAt: {
            gte: dateLimit
          }
        }
      }), prisma.article.aggregate({
        _sum: {
          views: true
        }
      })]),
      // Contatos
      Promise.all([prisma.contact.count(), prisma.contact.count({
        where: {
          status: 'PENDING'
        }
      }), prisma.contact.count({
        where: {
          status: {
            in: ['PENDING', 'IN_PROGRESS']
          }
        }
      }), prisma.contact.count({
        where: {
          createdAt: {
            gte: dateLimit
          }
        }
      })]),
      // Categorias
      Promise.all([prisma.category.count()])]));
      // Artigos mais populares
      const popularArticles =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[13]++, await prisma.article.findMany({
        where: {
          status: 'PUBLISHED'
        },
        select: {
          id: true,
          title: true,
          slug: true,
          views: true,
          publishedAt: true,
          author: {
            select: {
              name: true
            }
          }
        },
        orderBy: {
          views: 'desc'
        },
        take: 5
      }));
      // Usuários mais ativos (por artigos publicados)
      const activeAuthors =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[14]++, await prisma.user.findMany({
        where: {
          articles: {
            some: {
              status: 'PUBLISHED'
            }
          }
        },
        select: {
          id: true,
          name: true,
          email: true,
          _count: {
            select: {
              articles: true
            }
          }
        },
        orderBy: {
          articles: {
            _count: 'desc'
          }
        },
        take: 5
      }));
      // Contatos recentes pendentes
      const recentContacts =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[15]++, await prisma.contact.findMany({
        where: {
          status: 'PENDING'
        },
        select: {
          id: true,
          name: true,
          email: true,
          subject: true,
          createdAt: true
        },
        orderBy: {
          createdAt: 'desc'
        },
        take: 5
      }));
      // Estatísticas diárias dos últimos 7 dias
      const dailyStats =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[16]++, await prisma.$queryRaw`
        SELECT 
          DATE(createdAt) as date,
          'users' as type,
          COUNT(*) as count
        FROM User 
        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        GROUP BY DATE(createdAt)
        
        UNION ALL
        
        SELECT 
          DATE(createdAt) as date,
          'articles' as type,
          COUNT(*) as count
        FROM Article 
        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        GROUP BY DATE(createdAt)
        
        UNION ALL
        
        SELECT 
          DATE(createdAt) as date,
          'contacts' as type,
          COUNT(*) as count
        FROM Contact 
        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        GROUP BY DATE(createdAt)
        
        ORDER BY date DESC, type
      `);
      const dashboard =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[17]++, {
        period: {
          days: periodDays,
          from: dateLimit,
          to: new Date()
        },
        statistics: {
          users: {
            total: userStats[0],
            active: userStats[1],
            newInPeriod: userStats[2],
            admins: userStats[3]
          },
          articles: {
            total: articleStats[0],
            published: articleStats[1],
            newInPeriod: articleStats[2],
            totalViews:
            /* istanbul ignore next */
            (cov_1wljci3vzs().b[4][0]++, articleStats[3]._sum.views) ||
            /* istanbul ignore next */
            (cov_1wljci3vzs().b[4][1]++, 0)
          },
          contacts: {
            total: contactStats[0],
            unread: contactStats[1],
            pending: contactStats[2],
            newInPeriod: contactStats[3]
          },
          categories: {
            total: categoryStats[0]
          }
        },
        popularArticles,
        activeAuthors,
        recentContacts,
        dailyStats
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[18]++;
      res.status(200).json({
        success: true,
        message: 'Dashboard carregado com sucesso',
        data: {
          dashboard
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[19]++;
      logger_1.default.error('Erro ao carregar dashboard', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[20]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Estatísticas detalhadas do sistema
   */
  static async getSystemStats(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[2]++;
    cov_1wljci3vzs().s[21]++;
    try {
      const {
        period =
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[5][0]++, '30'),
        groupBy =
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[6][0]++, 'day')
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[22]++, req.query);
      const periodDays =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[23]++, Number(period));
      const dateLimit =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[24]++, new Date());
      /* istanbul ignore next */
      cov_1wljci3vzs().s[25]++;
      dateLimit.setDate(dateLimit.getDate() - periodDays);
      // Estatísticas de crescimento
      const growthStats =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[26]++, await Promise.all([
      // Crescimento de usuários
      prisma.user.groupBy({
        by: ['createdAt'],
        where: {
          createdAt: {
            gte: dateLimit
          }
        },
        _count: true,
        orderBy: {
          createdAt: 'asc'
        }
      }),
      // Crescimento de artigos
      prisma.article.groupBy({
        by: ['createdAt'],
        where: {
          createdAt: {
            gte: dateLimit
          }
        },
        _count: true,
        orderBy: {
          createdAt: 'asc'
        }
      }),
      // Crescimento de contatos
      prisma.contact.groupBy({
        by: ['createdAt'],
        where: {
          createdAt: {
            gte: dateLimit
          }
        },
        _count: true,
        orderBy: {
          createdAt: 'asc'
        }
      })]));
      // Estatísticas por categoria
      const categoryStats =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[27]++, await prisma.category.findMany({
        select: {
          id: true,
          name: true,
          slug: true,
          _count: {
            select: {
              articles: true
            }
          }
        },
        orderBy: {
          articles: {
            _count: 'desc'
          }
        }
      }));
      // Estatísticas de engajamento
      const engagementStats =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[28]++, await prisma.article.aggregate({
        where: {
          status: 'PUBLISHED',
          publishedAt: {
            gte: dateLimit
          }
        },
        _avg: {
          views: true
        },
        _sum: {
          views: true
        },
        _count: true
      }));
      // Top tags
      const allArticles =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[29]++, await prisma.article.findMany({
        where: {
          status: 'PUBLISHED'
        },
        include: {
          tags: {
            include: {
              tag: {
                select: {
                  name: true
                }
              }
            }
          }
        }
      }));
      const tagCounts =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[30]++, {});
      /* istanbul ignore next */
      cov_1wljci3vzs().s[31]++;
      allArticles.forEach(article => {
        /* istanbul ignore next */
        cov_1wljci3vzs().f[3]++;
        cov_1wljci3vzs().s[32]++;
        article.tags.forEach(articleTag => {
          /* istanbul ignore next */
          cov_1wljci3vzs().f[4]++;
          const tagName =
          /* istanbul ignore next */
          (cov_1wljci3vzs().s[33]++, articleTag.tag.name);
          /* istanbul ignore next */
          cov_1wljci3vzs().s[34]++;
          tagCounts[tagName] = (
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[7][0]++, tagCounts[tagName]) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[7][1]++, 0)) + 1;
        });
      });
      const topTags =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[35]++, Object.entries(tagCounts).sort(([, a], [, b]) => {
        /* istanbul ignore next */
        cov_1wljci3vzs().f[5]++;
        cov_1wljci3vzs().s[36]++;
        return b - a;
      }).slice(0, 10).map(([tag, count]) => {
        /* istanbul ignore next */
        cov_1wljci3vzs().f[6]++;
        cov_1wljci3vzs().s[37]++;
        return {
          tag,
          count
        };
      }));
      const systemStats =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[38]++, {
        period: {
          days: periodDays,
          from: dateLimit,
          to: new Date()
        },
        growth: {
          users: growthStats[0],
          articles: growthStats[1],
          contacts: growthStats[2]
        },
        categories: categoryStats,
        engagement: {
          averageViews:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[8][0]++, engagementStats._avg.views) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[8][1]++, 0),
          totalViews:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[9][0]++, engagementStats._sum.views) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[9][1]++, 0),
          totalArticles: engagementStats._count
        },
        topTags
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[39]++;
      res.status(200).json({
        success: true,
        message: 'Estatísticas do sistema obtidas com sucesso',
        data: {
          systemStats
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[40]++;
      logger_1.default.error('Erro ao obter estatísticas do sistema', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[41]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Lista logs do sistema
   */
  static async getSystemLogs(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[7]++;
    cov_1wljci3vzs().s[42]++;
    try {
      const {
        level,
        dateFrom,
        dateTo,
        search,
        page =
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[10][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[11][0]++, 50)
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[43]++, req.query);
      // Nota: Esta implementação assume que você tem uma tabela de logs
      // Se estiver usando apenas arquivos de log, você precisará implementar
      // uma lógica diferente para ler os arquivos
      const skip =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[44]++, (Number(page) - 1) * Number(limit));
      const take =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[45]++, Number(limit));
      const where =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[46]++, {});
      /* istanbul ignore next */
      cov_1wljci3vzs().s[47]++;
      if (level) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[12][0]++;
        cov_1wljci3vzs().s[48]++;
        where.level = level;
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[12][1]++;
      }
      cov_1wljci3vzs().s[49]++;
      if (search) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[13][0]++;
        cov_1wljci3vzs().s[50]++;
        where.OR = [{
          message: {
            contains: search,
            mode: 'insensitive'
          }
        }, {
          meta: {
            contains: search,
            mode: 'insensitive'
          }
        }];
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[13][1]++;
      }
      cov_1wljci3vzs().s[51]++;
      if (
      /* istanbul ignore next */
      (cov_1wljci3vzs().b[15][0]++, dateFrom) ||
      /* istanbul ignore next */
      (cov_1wljci3vzs().b[15][1]++, dateTo)) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[14][0]++;
        cov_1wljci3vzs().s[52]++;
        where.timestamp = {};
        /* istanbul ignore next */
        cov_1wljci3vzs().s[53]++;
        if (dateFrom) {
          /* istanbul ignore next */
          cov_1wljci3vzs().b[16][0]++;
          cov_1wljci3vzs().s[54]++;
          where.timestamp.gte = new Date(dateFrom);
        } else
        /* istanbul ignore next */
        {
          cov_1wljci3vzs().b[16][1]++;
        }
        cov_1wljci3vzs().s[55]++;
        if (dateTo) {
          /* istanbul ignore next */
          cov_1wljci3vzs().b[17][0]++;
          const endDate =
          /* istanbul ignore next */
          (cov_1wljci3vzs().s[56]++, new Date(dateTo));
          /* istanbul ignore next */
          cov_1wljci3vzs().s[57]++;
          endDate.setHours(23, 59, 59, 999);
          /* istanbul ignore next */
          cov_1wljci3vzs().s[58]++;
          where.timestamp.lte = endDate;
        } else
        /* istanbul ignore next */
        {
          cov_1wljci3vzs().b[17][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[14][1]++;
      }
      // Simulação de logs - substitua pela sua implementação real
      const mockLogs =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[59]++, [{
        id: '1',
        level: 'info',
        message: 'Sistema iniciado',
        timestamp: new Date(),
        meta: JSON.stringify({
          service: 'api'
        })
      }, {
        id: '2',
        level: 'error',
        message: 'Erro de conexão com banco de dados',
        timestamp: new Date(Date.now() - 3600000),
        meta: JSON.stringify({
          error: 'Connection timeout'
        })
      }]);
      const logs =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[60]++, mockLogs.slice(skip, skip + take));
      const total =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[61]++, mockLogs.length);
      const totalPages =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[62]++, Math.ceil(total / take));
      /* istanbul ignore next */
      cov_1wljci3vzs().s[63]++;
      res.status(200).json({
        success: true,
        message: 'Logs obtidos com sucesso',
        data: {
          logs,
          pagination: {
            page: Number(page),
            limit: take,
            total,
            totalPages,
            hasNext: Number(page) < totalPages,
            hasPrev: Number(page) > 1
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[64]++;
      logger_1.default.error('Erro ao obter logs do sistema', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[65]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Limpa logs antigos
   */
  static async clearOldLogs(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[8]++;
    cov_1wljci3vzs().s[66]++;
    try {
      const {
        olderThanDays =
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[18][0]++, 30)
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[67]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[68]++, req.user);
      /* istanbul ignore next */
      cov_1wljci3vzs().s[69]++;
      if (
      /* istanbul ignore next */
      (cov_1wljci3vzs().b[20][0]++, olderThanDays < 1) ||
      /* istanbul ignore next */
      (cov_1wljci3vzs().b[20][1]++, olderThanDays > 365)) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[19][0]++;
        cov_1wljci3vzs().s[70]++;
        res.status(400).json({
          success: false,
          message: 'Período deve ser entre 1 e 365 dias'
        });
        /* istanbul ignore next */
        cov_1wljci3vzs().s[71]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[19][1]++;
      }
      const dateLimit =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[72]++, new Date());
      /* istanbul ignore next */
      cov_1wljci3vzs().s[73]++;
      dateLimit.setDate(dateLimit.getDate() - Number(olderThanDays));
      // Implementar limpeza de logs aqui
      // const deletedCount = await prisma.log.deleteMany({
      //   where: {
      //     timestamp: { lt: dateLimit }
      //   }
      // });
      const deletedCount =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[74]++, {
        count: 0
      }); // Mock
      /* istanbul ignore next */
      cov_1wljci3vzs().s[75]++;
      logger_1.default.info('Logs antigos removidos', {
        olderThanDays,
        deletedCount: deletedCount.count,
        deletedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[76]++;
      res.status(200).json({
        success: true,
        message: `${deletedCount.count} logs removidos com sucesso`,
        data: {
          deletedCount: deletedCount.count
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[77]++;
      logger_1.default.error('Erro ao limpar logs antigos', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[78]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Informações do sistema
   */
  static async getSystemInfo(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[9]++;
    cov_1wljci3vzs().s[79]++;
    try {
      const systemInfo =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[80]++, {
        version:
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[21][0]++, process.env.APP_VERSION) ||
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[21][1]++, '1.0.0'),
        environment:
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[22][0]++, process.env.NODE_ENV) ||
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[22][1]++, 'development'),
        nodeVersion: process.version,
        platform: process.platform,
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        database: {
          status: 'connected',
          // Verificar conexão real
          version: 'PostgreSQL 14+' // Obter versão real
        },
        features: {
          authentication: true,
          fileUpload: true,
          emailService: false,
          // Configurar baseado na implementação
          backup: true,
          logging: true
        },
        lastBackup: null,
        // Implementar controle de backup
        maintenanceMode: false
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[81]++;
      res.status(200).json({
        success: true,
        message: 'Informações do sistema obtidas com sucesso',
        data: {
          systemInfo
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[82]++;
      logger_1.default.error('Erro ao obter informações do sistema', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[83]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Backup do banco de dados
   */
  static async createBackup(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[10]++;
    cov_1wljci3vzs().s[84]++;
    try {
      const options =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[85]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[86]++, req.user);
      // Implementar lógica de backup aqui
      // Esta é uma implementação simplificada
      const backupData =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[87]++, {});
      /* istanbul ignore next */
      cov_1wljci3vzs().s[88]++;
      if (options.includeUsers !== false) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[23][0]++;
        cov_1wljci3vzs().s[89]++;
        backupData.users = await prisma.user.findMany({
          select: {
            id: true,
            name: true,
            email: true,
            role: true,
            isActive: true,
            createdAt: true,
            updatedAt: true
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[23][1]++;
      }
      cov_1wljci3vzs().s[90]++;
      if (options.includeArticles !== false) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[24][0]++;
        cov_1wljci3vzs().s[91]++;
        backupData.articles = await prisma.article.findMany({
          include: {
            author: {
              select: {
                id: true,
                name: true,
                email: true
              }
            },
            categories: {
              include: {
                category: {
                  select: {
                    id: true,
                    name: true,
                    slug: true
                  }
                }
              }
            }
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[24][1]++;
      }
      cov_1wljci3vzs().s[92]++;
      if (options.includeContacts !== false) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[25][0]++;
        cov_1wljci3vzs().s[93]++;
        backupData.contacts = await prisma.contact.findMany();
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[25][1]++;
      }
      cov_1wljci3vzs().s[94]++;
      if (options.includeCategories !== false) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[26][0]++;
        cov_1wljci3vzs().s[95]++;
        backupData.categories = await prisma.category.findMany();
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[26][1]++;
      }
      const backupId =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[96]++, `backup_${Date.now()}`);
      const backupInfo =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[97]++, {
        id: backupId,
        createdAt: new Date(),
        createdBy: currentUser.id,
        size: JSON.stringify(backupData).length,
        options,
        recordCounts: {
          users:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[27][0]++, backupData.users?.length) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[27][1]++, 0),
          articles:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[28][0]++, backupData.articles?.length) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[28][1]++, 0),
          contacts:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[29][0]++, backupData.contacts?.length) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[29][1]++, 0),
          categories:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[30][0]++, backupData.categories?.length) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[30][1]++, 0)
        }
      });
      // Salvar backup em arquivo ou storage
      // await fs.writeFile(`backups/${backupId}.json`, JSON.stringify(backupData, null, 2));
      /* istanbul ignore next */
      cov_1wljci3vzs().s[98]++;
      logger_1.default.info('Backup criado', {
        backupId,
        createdBy: currentUser.id,
        size: backupInfo.size,
        recordCounts: backupInfo.recordCounts
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[99]++;
      res.status(201).json({
        success: true,
        message: 'Backup criado com sucesso',
        data: {
          backup: backupInfo
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[100]++;
      logger_1.default.error('Erro ao criar backup', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[101]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Lista backups disponíveis
   */
  static async getBackups(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[11]++;
    cov_1wljci3vzs().s[102]++;
    try {
      // Implementar listagem de backups do storage/filesystem
      const mockBackups =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[103]++, [{
        id: 'backup_1703123456789',
        createdAt: new Date('2023-12-20T10:30:00Z'),
        createdBy: 'admin-user-id',
        size: 1024000,
        recordCounts: {
          users: 25,
          articles: 150,
          contacts: 75,
          categories: 10
        }
      }]);
      /* istanbul ignore next */
      cov_1wljci3vzs().s[104]++;
      res.status(200).json({
        success: true,
        message: 'Backups listados com sucesso',
        data: {
          backups: mockBackups
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[105]++;
      logger_1.default.error('Erro ao listar backups', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[106]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Obtém configurações do sistema
   */
  static async getSettings(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[12]++;
    cov_1wljci3vzs().s[107]++;
    try {
      // Buscar configurações do sistema (simulado - em produção seria uma tabela de settings)
      const settings =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[108]++, {
        siteName: 'Contabilidade Igrejinha',
        siteDescription: 'Serviços contábeis especializados',
        contactEmail: 'contato@contabilidadeigrejinha.com.br',
        contactPhone: '(51) 99999-9999',
        address: 'Rua Principal, 123 - Igrejinha/RS',
        socialMedia: {
          facebook: 'https://facebook.com/contabilidadeigrejinha',
          instagram: 'https://instagram.com/contabilidadeigrejinha',
          linkedin: 'https://linkedin.com/company/contabilidadeigrejinha'
        },
        businessHours: {
          monday: '08:00-18:00',
          tuesday: '08:00-18:00',
          wednesday: '08:00-18:00',
          thursday: '08:00-18:00',
          friday: '08:00-17:00',
          saturday: 'Fechado',
          sunday: 'Fechado'
        },
        features: {
          newsletter: true,
          calculator: true,
          blog: true,
          testimonials: true
        },
        maintenance: {
          enabled: false,
          message: 'Site em manutenção. Voltamos em breve!'
        }
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[109]++;
      res.status(200).json({
        success: true,
        message: 'Configurações obtidas com sucesso',
        data: {
          settings
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[110]++;
      logger_1.default.error('Erro ao obter configurações:', error);
      /* istanbul ignore next */
      cov_1wljci3vzs().s[111]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Atualiza configurações do sistema
   */
  static async updateSettings(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[13]++;
    cov_1wljci3vzs().s[112]++;
    try {
      const settings =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[113]++, req.body);
      // Validações básicas
      /* istanbul ignore next */
      cov_1wljci3vzs().s[114]++;
      if (
      /* istanbul ignore next */
      (cov_1wljci3vzs().b[32][0]++, !settings) ||
      /* istanbul ignore next */
      (cov_1wljci3vzs().b[32][1]++, typeof settings !== 'object')) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[31][0]++;
        cov_1wljci3vzs().s[115]++;
        res.status(400).json({
          success: false,
          message: 'Dados de configuração inválidos'
        });
        /* istanbul ignore next */
        cov_1wljci3vzs().s[116]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[31][1]++;
      }
      // Em produção, aqui salvaria as configurações no banco de dados
      // Por enquanto, apenas simula a atualização
      cov_1wljci3vzs().s[117]++;
      logger_1.default.info('Configurações atualizadas', {
        updatedBy:
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[33][0]++, req.user?.id) ||
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[33][1]++, 'system'),
        settings: Object.keys(settings)
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[118]++;
      res.status(200).json({
        success: true,
        message: 'Configurações atualizadas com sucesso',
        data: {
          settings
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[119]++;
      logger_1.default.error('Erro ao atualizar configurações:', error);
      /* istanbul ignore next */
      cov_1wljci3vzs().s[120]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Ativa/desativa modo de manutenção
   */
  static async toggleMaintenanceMode(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[14]++;
    cov_1wljci3vzs().s[121]++;
    try {
      const {
        enabled,
        message
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[122]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[123]++, req.user);
      // Implementar controle de modo de manutenção
      // Pode ser através de variável de ambiente, arquivo ou banco de dados
      /* istanbul ignore next */
      cov_1wljci3vzs().s[124]++;
      logger_1.default.info('Modo de manutenção alterado', {
        enabled,
        message,
        changedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[125]++;
      res.status(200).json({
        success: true,
        message: `Modo de manutenção ${enabled ?
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[34][0]++, 'ativado') :
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[34][1]++, 'desativado')}`,
        data: {
          maintenanceMode: enabled,
          message:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[35][0]++, message) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[35][1]++, null)
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[126]++;
      logger_1.default.error('Erro ao alterar modo de manutenção', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[127]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Download de backup
   */
  static async downloadBackup(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[15]++;
    cov_1wljci3vzs().s[128]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[129]++, req.params);
      const currentUser =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[130]++, req.user);
      /* istanbul ignore next */
      cov_1wljci3vzs().s[131]++;
      if (!id) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[36][0]++;
        cov_1wljci3vzs().s[132]++;
        res.status(400).json({
          success: false,
          message: 'ID do backup é obrigatório'
        });
        /* istanbul ignore next */
        cov_1wljci3vzs().s[133]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[36][1]++;
      }
      // Verificar se o backup existe
      // const backupPath = path.join('backups', `${id}.json`);
      // const exists = await fs.access(backupPath).then(() => true).catch(() => false);
      // Simulação - em produção verificaria se o arquivo existe
      const exists =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[134]++, id.startsWith('backup_'));
      /* istanbul ignore next */
      cov_1wljci3vzs().s[135]++;
      if (!exists) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[37][0]++;
        cov_1wljci3vzs().s[136]++;
        res.status(404).json({
          success: false,
          message: 'Backup não encontrado'
        });
        /* istanbul ignore next */
        cov_1wljci3vzs().s[137]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[37][1]++;
      }
      // Simular dados do backup
      const backupData =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[138]++, {
        id,
        createdAt: new Date(),
        data: {
          users: [],
          articles: [],
          contacts: [],
          categories: []
        }
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[139]++;
      logger_1.default.info('Backup baixado', {
        backupId: id,
        downloadedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[140]++;
      res.setHeader('Content-Type', 'application/json');
      /* istanbul ignore next */
      cov_1wljci3vzs().s[141]++;
      res.setHeader('Content-Disposition', `attachment; filename="${id}.json"`);
      /* istanbul ignore next */
      cov_1wljci3vzs().s[142]++;
      res.status(200).json(backupData);
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[143]++;
      logger_1.default.error('Erro ao baixar backup', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[144]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Remove backup
   */
  static async deleteBackup(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[16]++;
    cov_1wljci3vzs().s[145]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[146]++, req.params);
      const currentUser =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[147]++, req.user);
      /* istanbul ignore next */
      cov_1wljci3vzs().s[148]++;
      if (!id) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[38][0]++;
        cov_1wljci3vzs().s[149]++;
        res.status(400).json({
          success: false,
          message: 'ID do backup é obrigatório'
        });
        /* istanbul ignore next */
        cov_1wljci3vzs().s[150]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[38][1]++;
      }
      // Verificar se o backup existe
      const exists =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[151]++, id.startsWith('backup_'));
      /* istanbul ignore next */
      cov_1wljci3vzs().s[152]++;
      if (!exists) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[39][0]++;
        cov_1wljci3vzs().s[153]++;
        res.status(404).json({
          success: false,
          message: 'Backup não encontrado'
        });
        /* istanbul ignore next */
        cov_1wljci3vzs().s[154]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1wljci3vzs().b[39][1]++;
      }
      // Implementar remoção do arquivo de backup
      // await fs.unlink(path.join('backups', `${id}.json`));
      cov_1wljci3vzs().s[155]++;
      logger_1.default.info('Backup removido', {
        backupId: id,
        deletedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[156]++;
      res.status(200).json({
        success: true,
        message: 'Backup removido com sucesso'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[157]++;
      logger_1.default.error('Erro ao remover backup', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[158]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Limpa cache do sistema
   */
  static async clearCache(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[17]++;
    cov_1wljci3vzs().s[159]++;
    try {
      const {
        pattern,
        key
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[160]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[161]++, req.user);
      // Implementar limpeza de cache
      // Se usando Redis:
      // if (pattern) {
      //   await redis.eval(`
      //     local keys = redis.call('keys', ARGV[1])
      //     for i=1,#keys,5000 do
      //       redis.call('del', unpack(keys, i, math.min(i+4999, #keys)))
      //     end
      //     return #keys
      //   `, 0, pattern);
      // } else if (key) {
      //   await redis.del(key);
      // } else {
      //   await redis.flushall();
      // }
      let message =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[162]++, 'Cache limpo com sucesso');
      /* istanbul ignore next */
      cov_1wljci3vzs().s[163]++;
      if (pattern) {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[40][0]++;
        cov_1wljci3vzs().s[164]++;
        message = `Cache limpo para padrão: ${pattern}`;
      } else {
        /* istanbul ignore next */
        cov_1wljci3vzs().b[40][1]++;
        cov_1wljci3vzs().s[165]++;
        if (key) {
          /* istanbul ignore next */
          cov_1wljci3vzs().b[41][0]++;
          cov_1wljci3vzs().s[166]++;
          message = `Cache limpo para chave: ${key}`;
        } else {
          /* istanbul ignore next */
          cov_1wljci3vzs().b[41][1]++;
          cov_1wljci3vzs().s[167]++;
          message = 'Todo o cache foi limpo';
        }
      }
      /* istanbul ignore next */
      cov_1wljci3vzs().s[168]++;
      logger_1.default.info('Cache limpo', {
        pattern,
        key,
        clearedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[169]++;
      res.status(200).json({
        success: true,
        message,
        data: {
          pattern:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[42][0]++, pattern) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[42][1]++, null),
          key:
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[43][0]++, key) ||
          /* istanbul ignore next */
          (cov_1wljci3vzs().b[43][1]++, null),
          clearedAt: new Date()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[170]++;
      logger_1.default.error('Erro ao limpar cache', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[171]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Ativa modo de manutenção
   */
  static async enableMaintenance(req, res) {
    /* istanbul ignore next */
    cov_1wljci3vzs().f[18]++;
    cov_1wljci3vzs().s[172]++;
    try {
      const {
        message =
        /* istanbul ignore next */
        (cov_1wljci3vzs().b[44][0]++, 'Site em manutenção. Voltamos em breve!')
      } =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[173]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_1wljci3vzs().s[174]++, req.user);
      // Implementar ativação do modo de manutenção
      // Pode ser através de variável de ambiente, arquivo ou banco de dados
      // process.env.MAINTENANCE_MODE = 'true';
      // process.env.MAINTENANCE_MESSAGE = message;
      /* istanbul ignore next */
      cov_1wljci3vzs().s[175]++;
      logger_1.default.info('Modo de manutenção ativado', {
        message,
        activatedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[176]++;
      res.status(200).json({
        success: true,
        message: 'Modo de manutenção ativado',
        data: {
          maintenanceMode: true,
          message,
          activatedAt: new Date()
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1wljci3vzs().s[177]++;
      logger_1.default.error('Erro ao ativar modo de manutenção', {
        error
      });
      /* istanbul ignore next */
      cov_1wljci3vzs().s[178]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
}
/* istanbul ignore next */
cov_1wljci3vzs().s[179]++;
exports.AdminController = AdminController;
/* istanbul ignore next */
cov_1wljci3vzs().s[180]++;
exports.default = AdminController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
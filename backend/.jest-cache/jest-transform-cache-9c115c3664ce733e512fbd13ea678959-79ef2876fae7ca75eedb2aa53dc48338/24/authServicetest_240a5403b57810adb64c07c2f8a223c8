a00b6cf487af0bd2c031e8bf9a00aaec
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock das dependências
jest.mock('bcrypt');
jest.mock('jsonwebtoken');
jest.mock('../../utils/logger');
jest.mock('@prisma/client');
const authService_1 = require("../authService");
const client_1 = require("@prisma/client");
const error_1 = require("../../utils/error");
const bcrypt_1 = __importDefault(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const logger_1 = __importDefault(require("../../utils/logger"));
const mockBcrypt = bcrypt_1.default;
const mockJwt = jsonwebtoken_1.default;
const mockLogger = logger_1.default;
// Mock do PrismaClient
const mockPrisma = {
    user: {
        create: jest.fn(),
        findUnique: jest.fn(),
        update: jest.fn(),
    },
    refreshToken: {
        create: jest.fn(),
        findFirst: jest.fn(),
        delete: jest.fn(),
        deleteMany: jest.fn(),
    },
};
client_1.PrismaClient.mockImplementation(() => mockPrisma);
describe('AuthService', () => {
    let authService;
    beforeEach(() => {
        jest.clearAllMocks();
        authService = new authService_1.AuthService(mockPrisma);
    });
    describe('register', () => {
        const validUserData = {
            name: 'Test User',
            email: 'test@example.com',
            password: 'Password123!',
            role: 'USER',
        };
        it('should register a new user successfully', async () => {
            // Arrange
            const userData = {
                name: 'Test User',
                email: 'test@example.com',
                password: 'Password123!',
                role: 'USER',
            };
            const hashedPassword = 'hashedpassword';
            const createdUser = {
                id: '1',
                ...userData,
                password: hashedPassword,
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            mockPrisma.user.findUnique.mockResolvedValue(null); // User doesn't exist
            mockBcrypt.hash.mockResolvedValue(hashedPassword);
            mockPrisma.user.create.mockResolvedValue(createdUser);
            mockJwt.sign.mockReturnValue('access_token');
            mockPrisma.refreshToken.create.mockResolvedValue({});
            // Act
            const result = await authService.register(userData);
            // Assert
            expect(result).toHaveProperty('tokens');
            expect(result).toHaveProperty('user');
            expect(result.user.email).toBe(userData.email);
            expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: { email: userData.email },
            });
            expect(mockBcrypt.hash).toHaveBeenCalledWith(userData.password, 12);
            expect(mockPrisma.user.create).toHaveBeenCalledWith({
                data: {
                    name: userData.name,
                    email: userData.email,
                    password: hashedPassword,
                    role: userData.role,
                },
            });
        });
        it('should throw an error if user already exists', async () => {
            // Arrange
            const userData = {
                name: 'Test User',
                email: 'existing@example.com',
                password: 'Password123!',
                role: 'USER',
            };
            const existingUser = {
                id: '1',
                email: userData.email,
            };
            mockPrisma.user.findUnique.mockResolvedValue(existingUser);
            // Act & Assert
            await expect(authService.register(userData)).rejects.toThrow('Usuário já existe');
            expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: { email: userData.email },
            });
            expect(mockBcrypt.hash).not.toHaveBeenCalled();
            expect(mockPrisma.user.create).not.toHaveBeenCalled();
        });
        it('should throw ValidationError for invalid email format', async () => {
            const invalidUserData = {
                ...validUserData,
                email: 'invalid-email',
            };
            await expect(authService.register(invalidUserData))
                .rejects
                .toThrow(error_1.ValidationError);
        });
        it('should throw ValidationError for weak password', async () => {
            const weakPasswordData = {
                ...validUserData,
                password: '123',
            };
            await expect(authService.register(weakPasswordData))
                .rejects
                .toThrow(error_1.ValidationError);
        });
    });
    describe('login', () => {
        it('should login successfully with valid credentials', async () => {
            // Arrange
            const credentials = {
                email: 'test@example.com',
                password: 'Password123!',
            };
            const existingUser = {
                id: '1',
                name: 'Test User',
                email: 'test@example.com',
                password: 'hashedpassword',
                role: 'USER',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            mockPrisma.user.findUnique.mockResolvedValue(existingUser);
            mockBcrypt.compare.mockResolvedValue(true);
            mockJwt.sign.mockReturnValue('access_token');
            mockPrisma.refreshToken.create.mockResolvedValue({});
            // Act
            const result = await authService.login(credentials);
            // Assert
            expect(result).toHaveProperty('tokens');
            expect(result).toHaveProperty('user');
            expect(result.user.email).toBe(credentials.email);
            expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: { email: credentials.email },
            });
            expect(mockBcrypt.compare).toHaveBeenCalledWith(credentials.password, existingUser.password);
        });
        it('should throw an error with invalid email', async () => {
            // Arrange
            const credentials = {
                email: 'nonexistent@example.com',
                password: 'password123',
            };
            mockPrisma.user.findUnique.mockResolvedValue(null);
            // Act & Assert
            await expect(authService.login(credentials)).rejects.toThrow('Credenciais inválidas');
            expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: { email: credentials.email },
            });
            expect(mockBcrypt.compare).not.toHaveBeenCalled();
        });
        it('should throw an error with invalid password', async () => {
            // Arrange
            const credentials = {
                email: 'test@example.com',
                password: 'wrongpassword',
            };
            const existingUser = {
                id: '1',
                email: 'test@example.com',
                password: 'hashedpassword',
                isActive: true,
            };
            mockPrisma.user.findUnique.mockResolvedValue(existingUser);
            mockBcrypt.compare.mockResolvedValue(false);
            // Act & Assert
            await expect(authService.login(credentials)).rejects.toThrow('Credenciais inválidas');
            expect(mockBcrypt.compare).toHaveBeenCalledWith(credentials.password, existingUser.password);
        });
    });
    describe('refreshToken', () => {
        it('should refresh token successfully', async () => {
            // Arrange
            const refreshTokenValue = 'valid_refresh_token';
            const tokenPayload = {
                userId: '1',
                email: 'test@example.com',
                role: 'USER',
            };
            const storedToken = {
                id: 'token_id',
                token: refreshTokenValue,
                userId: '1',
            };
            const user = {
                id: '1',
                name: 'Test User',
                email: 'test@example.com',
                role: 'USER',
                isActive: true,
                tokenVersion: 1,
            };
            mockJwt.verify.mockReturnValue(tokenPayload);
            mockPrisma.refreshToken.findFirst.mockResolvedValue(storedToken);
            mockPrisma.user.findUnique.mockResolvedValue(user);
            mockJwt.sign.mockReturnValue('new_access_token');
            mockPrisma.refreshToken.delete.mockResolvedValue({});
            mockPrisma.refreshToken.create.mockResolvedValue({});
            // Act
            const result = await authService.refreshToken(refreshTokenValue);
            // Assert
            expect(result).toHaveProperty('accessToken');
            expect(result).toHaveProperty('refreshToken');
            expect(mockJwt.verify).toHaveBeenCalledWith(refreshTokenValue, expect.any(String));
            expect(mockPrisma.refreshToken.findFirst).toHaveBeenCalledWith({
                where: {
                    token: refreshTokenValue,
                    userId: tokenPayload.userId
                }
            });
            expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({
                where: { id: tokenPayload.userId },
            });
        });
        it('should throw error for invalid refresh token', async () => {
            // Arrange
            const invalidToken = 'invalid_token';
            mockJwt.verify.mockImplementation(() => {
                throw new Error('Invalid token');
            });
            // Act & Assert
            await expect(authService.refreshToken(invalidToken))
                .rejects
                .toThrow();
            expect(mockJwt.verify).toHaveBeenCalledWith(invalidToken, expect.any(String));
        });
        it('should throw error for user not found', async () => {
            // Arrange
            const refreshTokenValue = 'valid_refresh_token';
            const tokenPayload = { userId: '999', tokenVersion: 1 };
            mockJwt.verify.mockReturnValue(tokenPayload);
            mockPrisma.user.findUnique.mockResolvedValue(null);
            // Act & Assert
            await expect(authService.refreshToken(refreshTokenValue))
                .rejects
                .toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
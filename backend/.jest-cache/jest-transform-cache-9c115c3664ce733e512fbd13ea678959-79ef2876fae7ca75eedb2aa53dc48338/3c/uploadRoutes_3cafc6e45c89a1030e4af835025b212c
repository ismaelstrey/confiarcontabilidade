42f84b3a1ac7ee584c7443c3f8051dc6
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middlewares/auth");
const uploadController_1 = __importDefault(require("../controllers/uploadController"));
const router = (0, express_1.Router)();
/**
 * @swagger
 * components:
 *   schemas:
 *     Upload:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         filename:
 *           type: string
 *         originalName:
 *           type: string
 *         mimetype:
 *           type: string
 *         size:
 *           type: integer
 *         path:
 *           type: string
 *         url:
 *           type: string
 *         type:
 *           type: string
 *           enum: [IMAGE, DOCUMENT, VIDEO, AUDIO, OTHER]
 *         category:
 *           type: string
 *         description:
 *           type: string
 *         alt:
 *           type: string
 *         metadata:
 *           type: object
 *           properties:
 *             width:
 *               type: integer
 *             height:
 *               type: integer
 *             duration:
 *               type: number
 *             pages:
 *               type: integer
 *         isPublic:
 *           type: boolean
 *         uploadedBy:
 *           type: string
 *         createdAt:
 *           type: string
 *           format: date-time
 *         updatedAt:
 *           type: string
 *           format: date-time
 *     UploadResponse:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *         data:
 *           type: object
 *           properties:
 *             files:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Upload'
 *         message:
 *           type: string
 */
/**
 * @swagger
 * /api/v1/upload/image:
 *   post:
 *     summary: Upload de imagem
 *     tags: [Upload]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               file:
 *                 type: string
 *                 format: binary
 *                 description: Arquivo de imagem (JPG, PNG, GIF, WebP)
 *               category:
 *                 type: string
 *                 description: Categoria da imagem (opcional)
 *               description:
 *                 type: string
 *                 description: Descrição da imagem (opcional)
 *               alt:
 *                 type: string
 *                 description: Texto alternativo (opcional)
 *               isPublic:
 *                 type: boolean
 *                 default: true
 *                 description: Se a imagem é pública
 *               resize:
 *                 type: string
 *                 description: Redimensionar - exemplo 800x600 ou 50%
 *               quality:
 *                 type: integer
 *                 minimum: 1
 *                 maximum: 100
 *                 default: 85
 *                 description: Qualidade da compressão (1-100)
 *     responses:
 *       201:
 *         description: Imagem enviada com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UploadResponse'
 *       400:
 *         description: Arquivo inválido ou muito grande
 *       401:
 *         description: Token inválido
 *       413:
 *         description: Arquivo muito grande
 *       415:
 *         description: Tipo de arquivo não suportado
 */
router.post('/image', auth_1.authenticate, uploadController_1.default.uploadSingle, uploadController_1.default.uploadFile);
/**
 * @swagger
 * /api/v1/upload/document:
 *   post:
 *     summary: Upload de documento
 *     tags: [Upload]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               file:
 *                 type: string
 *                 format: binary
 *                 description: Arquivo de documento (PDF, DOC, DOCX, XLS, XLSX, TXT)
 *               category:
 *                 type: string
 *                 description: Categoria do documento (opcional)
 *               description:
 *                 type: string
 *                 description: Descrição do documento (opcional)
 *               isPublic:
 *                 type: boolean
 *                 default: false
 *                 description: Se o documento é público
 *     responses:
 *       201:
 *         description: Documento enviado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UploadResponse'
 *       400:
 *         description: Arquivo inválido ou muito grande
 *       401:
 *         description: Token inválido
 *       413:
 *         description: Arquivo muito grande
 *       415:
 *         description: Tipo de arquivo não suportado
 */
router.post('/document', auth_1.authenticate, uploadController_1.default.uploadSingle, uploadController_1.default.uploadFile);
/**
 * @swagger
 * /api/v1/upload/multiple:
 *   post:
 *     summary: Upload múltiplo de arquivos
 *     tags: [Upload]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               files:
 *                 type: array
 *                 items:
 *                   type: string
 *                   format: binary
 *                 description: Múltiplos arquivos (máximo 10)
 *               category:
 *                 type: string
 *                 description: Categoria dos arquivos (opcional)
 *               isPublic:
 *                 type: boolean
 *                 default: true
 *                 description: Se os arquivos são públicos
 *     responses:
 *       201:
 *         description: Arquivos enviados com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UploadResponse'
 *       400:
 *         description: Arquivos inválidos ou muitos arquivos
 *       401:
 *         description: Token inválido
 *       413:
 *         description: Arquivos muito grandes
 *       415:
 *         description: Tipos de arquivo não suportados
 */
router.post('/multiple', auth_1.authenticate, uploadController_1.default.uploadMultiple, uploadController_1.default.uploadMultipleFiles);
/**
 * @swagger
 * /api/v1/upload:
 *   get:
 *     summary: Listar arquivos enviados
 *     tags: [Upload]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Número da página
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 20
 *         description: Itens por página
 *       - in: query
 *         name: type
 *         schema:
 *           type: string
 *           enum: [IMAGE, DOCUMENT, VIDEO, AUDIO, OTHER]
 *         description: Filtrar por tipo
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *         description: Filtrar por categoria
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Buscar por nome ou descrição
 *       - in: query
 *         name: isPublic
 *         schema:
 *           type: boolean
 *         description: Filtrar por visibilidade
 *       - in: query
 *         name: uploadedBy
 *         schema:
 *           type: string
 *         description: Filtrar por usuário (apenas admin)
 *       - in: query
 *         name: dateFrom
 *         schema:
 *           type: string
 *           format: date
 *         description: Data inicial (YYYY-MM-DD)
 *       - in: query
 *         name: dateTo
 *         schema:
 *           type: string
 *           format: date
 *         description: Data final (YYYY-MM-DD)
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *           enum: [createdAt, filename, size, type]
 *           default: createdAt
 *         description: Campo para ordenação
 *       - in: query
 *         name: sortOrder
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *           default: desc
 *         description: Ordem da classificação
 *     responses:
 *       200:
 *         description: Lista de arquivos
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     files:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/Upload'
 *                     pagination:
 *                       type: object
 *                       properties:
 *                         page:
 *                           type: integer
 *                         limit:
 *                           type: integer
 *                         total:
 *                           type: integer
 *                         pages:
 *                           type: integer
 *                     stats:
 *                       type: object
 *                       properties:
 *                         totalFiles:
 *                           type: integer
 *                         totalSize:
 *                           type: integer
 *                         byType:
 *                           type: object
 *       401:
 *         description: Token inválido
 */
router.get('/', auth_1.authenticate, uploadController_1.default.getFiles);
/**
 * @swagger
 * /api/v1/upload/{id}:
 *   get:
 *     summary: Obter informações do arquivo
 *     tags: [Upload]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do arquivo
 *     responses:
 *       200:
 *         description: Informações do arquivo
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/Upload'
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão para acessar o arquivo
 *       404:
 *         description: Arquivo não encontrado
 */
router.get('/:id', auth_1.authenticate, uploadController_1.default.getFileById);
/**
 * @swagger
 * /api/v1/upload/{id}/download:
 *   get:
 *     summary: Download do arquivo
 *     tags: [Upload]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do arquivo
 *       - in: query
 *         name: token
 *         schema:
 *           type: string
 *         description: Token de acesso (para arquivos privados)
 *     responses:
 *       200:
 *         description: Arquivo para download
 *         content:
 *           application/octet-stream:
 *             schema:
 *               type: string
 *               format: binary
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão para acessar o arquivo
 *       404:
 *         description: Arquivo não encontrado
 */
router.get('/:id/download', uploadController_1.default.getFileById);
/**
 * @swagger
 * /api/v1/upload/{id}:
 *   put:
 *     summary: Atualizar informações do arquivo
 *     tags: [Upload]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do arquivo
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               filename:
 *                 type: string
 *                 description: Novo nome do arquivo
 *               category:
 *                 type: string
 *                 description: Nova categoria
 *               description:
 *                 type: string
 *                 description: Nova descrição
 *               alt:
 *                 type: string
 *                 description: Novo texto alternativo
 *               isPublic:
 *                 type: boolean
 *                 description: Nova visibilidade
 *     responses:
 *       200:
 *         description: Arquivo atualizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/Upload'
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão para editar o arquivo
 *       404:
 *         description: Arquivo não encontrado
 */
router.put('/:id', auth_1.authenticate, uploadController_1.default.getFileById);
/**
 * @swagger
 * /api/v1/upload/{id}:
 *   delete:
 *     summary: Excluir arquivo
 *     tags: [Upload]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do arquivo
 *     responses:
 *       200:
 *         description: Arquivo excluído com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão para excluir o arquivo
 *       404:
 *         description: Arquivo não encontrado
 */
router.delete('/:id', auth_1.authenticate, uploadController_1.default.deleteFile);
/**
 * @swagger
 * /api/v1/upload/cleanup/orphaned:
 *   delete:
 *     summary: Limpar arquivos órfãos (Admin)
 *     tags: [Upload]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Limpeza realizada com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     deletedFiles:
 *                       type: integer
 *                     freedSpace:
 *                       type: integer
 *                 message:
 *                   type: string
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 */
router.delete('/cleanup/orphaned', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), uploadController_1.default.getFileStats);
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
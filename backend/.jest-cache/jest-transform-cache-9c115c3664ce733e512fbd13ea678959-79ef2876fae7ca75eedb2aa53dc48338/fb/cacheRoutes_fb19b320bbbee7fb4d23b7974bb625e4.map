{"version":3,"names":["express_1","cov_14lrtiewn1","s","require","auth_1","cacheExampleController_1","cache_1","router","Router","get","CacheExampleController","getDataWithCache","put","authenticate","updateDataAndInvalidateCache","getDataWithDynamicTTL","getDataWithConditionalCache","post","authorize","manageCacheEndpoint","publicCacheMiddleware","req","res","f","json","success","data","message","timestamp","Date","toISOString","cached","exports","default"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\cacheRoutes.ts"],"sourcesContent":["import { Router } from 'express';\r\nimport { authenticate, authorize } from '../middlewares/auth';\r\nimport { CacheExampleController } from '../controllers/cacheExampleController';\r\nimport { publicCacheMiddleware } from '../middlewares/cache';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     CacheResponse:\r\n *       type: object\r\n *       properties:\r\n *         success:\r\n *           type: boolean\r\n *         data:\r\n *           type: object\r\n *         cached:\r\n *           type: boolean\r\n *         message:\r\n *           type: string\r\n *     CacheManagement:\r\n *       type: object\r\n *       properties:\r\n *         pattern:\r\n *           type: string\r\n *           description: Padrao para limpeza de cache\r\n *         key:\r\n *           type: string\r\n *           description: Chave específica para operações de cache\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/cache/example/{id}:\r\n *   get:\r\n *     summary: Exemplo de uso de cache manual\r\n *     description: Demonstra como usar cache diretamente no controller\r\n *     tags: [Cache Examples]\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do item a ser buscado\r\n *     responses:\r\n *       200:\r\n *         description: Dados obtidos com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/CacheResponse'\r\n *       500:\r\n *         description: Erro interno do servidor\r\n */\r\nrouter.get('/example/:id', CacheExampleController.getDataWithCache);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/cache/example/{id}:\r\n *   put:\r\n *     summary: Exemplo de atualização com invalidação de cache\r\n *     description: Demonstra como invalidar cache após operações de escrita\r\n *     tags: [Cache Examples]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do item a ser atualizado\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               name:\r\n *                 type: string\r\n *               description:\r\n *                 type: string\r\n *     responses:\r\n *       200:\r\n *         description: Dados atualizados com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/CacheResponse'\r\n *       401:\r\n *         description: Token inválido\r\n *       500:\r\n *         description: Erro interno do servidor\r\n */\r\nrouter.put('/example/:id', authenticate, CacheExampleController.updateDataAndInvalidateCache);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/cache/dynamic/{type}/{id}:\r\n *   get:\r\n *     summary: Exemplo de cache com TTL dinâmico\r\n *     description: Demonstra como definir TTL baseado no tipo de dados\r\n *     tags: [Cache Examples]\r\n *     parameters:\r\n *       - in: path\r\n *         name: type\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *           enum: [static, dynamic, realtime]\r\n *         description: Tipo de dados (define o TTL)\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do item\r\n *     responses:\r\n *       200:\r\n *         description: Dados obtidos com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               allOf:\r\n *                 - $ref: '#/components/schemas/CacheResponse'\r\n *                 - type: object\r\n *                   properties:\r\n *                     ttl:\r\n *                       type: integer\r\n *                       description: Tempo de vida do cache em segundos\r\n *       500:\r\n *         description: Erro interno do servidor\r\n */\r\nrouter.get('/dynamic/:type/:id', CacheExampleController.getDataWithDynamicTTL);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/cache/conditional/{id}:\r\n *   get:\r\n *     summary: Exemplo de cache condicional\r\n *     description: Demonstra como cachear baseado em condições específicas\r\n *     tags: [Cache Examples]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do item\r\n *       - in: query\r\n *         name: useCache\r\n *         schema:\r\n *           type: string\r\n *           enum: [true, false]\r\n *           default: true\r\n *         description: Se deve usar cache ou não\r\n *       - in: header\r\n *         name: Cache-Control\r\n *         schema:\r\n *           type: string\r\n *         description: Controle de cache HTTP\r\n *     responses:\r\n *       200:\r\n *         description: Dados obtidos com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               allOf:\r\n *                 - $ref: '#/components/schemas/CacheResponse'\r\n *                 - type: object\r\n *                   properties:\r\n *                     cacheUsed:\r\n *                       type: boolean\r\n *                       description: Se o cache foi utilizado\r\n *       401:\r\n *         description: Token inválido\r\n *       500:\r\n *         description: Erro interno do servidor\r\n */\r\nrouter.get('/conditional/:id', authenticate, CacheExampleController.getDataWithConditionalCache);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/cache/manage/{action}:\r\n *   post:\r\n *     summary: Gerenciar cache\r\n *     description: Permite limpar cache, verificar status, etc.\r\n *     tags: [Cache Management]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: action\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *           enum: [clear, status, check]\r\n *         description: Ação a ser executada\r\n *     requestBody:\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/CacheManagement'\r\n *     responses:\r\n *       200:\r\n *         description: Operação executada com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *                 connected:\r\n *                   type: boolean\r\n *                   description: Status da conexão Redis (apenas para action=status)\r\n *                 exists:\r\n *                   type: boolean\r\n *                   description: Se a chave existe (apenas para action=check)\r\n *                 ttl:\r\n *                   type: integer\r\n *                   description: TTL da chave em segundos (apenas para action=check)\r\n *       400:\r\n *         description: Parâmetros inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n *       500:\r\n *         description: Erro interno do servidor\r\n */\r\nrouter.post('/manage/:action', authenticate, authorize('ADMIN'), CacheExampleController.manageCacheEndpoint);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/cache/middleware-example:\r\n *   get:\r\n *     summary: Exemplo de uso do middleware de cache\r\n *     description: Demonstra como o middleware de cache funciona automaticamente\r\n *     tags: [Cache Examples]\r\n *     responses:\r\n *       200:\r\n *         description: Dados obtidos com sucesso (pode vir do cache)\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     message:\r\n *                       type: string\r\n *                     timestamp:\r\n *                       type: string\r\n *                     cached:\r\n *                       type: boolean\r\n *                 message:\r\n *                   type: string\r\n */\r\nrouter.get('/middleware-example', publicCacheMiddleware(300), (req, res) => {\r\n  // Este endpoint será automaticamente cacheado pelo middleware\r\n  res.json({\r\n    success: true,\r\n    data: {\r\n      message: 'Este endpoint usa middleware de cache automático',\r\n      timestamp: new Date().toISOString(),\r\n      cached: false // Será true quando vier do cache\r\n    },\r\n    message: 'Dados obtidos com sucesso'\r\n  });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/cache/no-cache-example:\r\n *   get:\r\n *     summary: Exemplo sem cache\r\n *     description: Endpoint que nunca usa cache para comparação\r\n *     tags: [Cache Examples]\r\n *     responses:\r\n *       200:\r\n *         description: Dados sempre frescos\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     message:\r\n *                       type: string\r\n *                     timestamp:\r\n *                       type: string\r\n *                     cached:\r\n *                       type: boolean\r\n *                 message:\r\n *                   type: string\r\n */\r\nrouter.get('/no-cache-example', (req, res) => {\r\n  // Este endpoint nunca usa cache\r\n  res.json({\r\n    success: true,\r\n    data: {\r\n      message: 'Este endpoint nunca usa cache',\r\n      timestamp: new Date().toISOString(),\r\n      cached: false\r\n    },\r\n    message: 'Dados sempre frescos'\r\n  });\r\n});\r\n\r\nexport default router;"],"mappings":"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","ignoreList":[]}
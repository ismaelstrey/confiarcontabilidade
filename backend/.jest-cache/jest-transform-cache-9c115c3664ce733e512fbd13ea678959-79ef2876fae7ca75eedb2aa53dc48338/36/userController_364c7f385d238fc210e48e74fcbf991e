22498998d5ea0db231376f4ed083eeff
"use strict";

/* istanbul ignore next */
function cov_8q76owmrl() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\userController.ts";
  var hash = "716e412790ec4f7ea479cd9a39f2ad70e3fd9b3f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\userController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 32
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 51
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 60
        }
      },
      "7": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "8": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "9": {
        start: {
          line: 20,
          column: 69
        },
        end: {
          line: 20,
          column: 78
        }
      },
      "10": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 21,
          column: 59
        }
      },
      "11": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "12": {
        start: {
          line: 24,
          column: 26
        },
        end: {
          line: 24,
          column: 28
        }
      },
      "13": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "14": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 29,
          column: 18
        }
      },
      "15": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 33,
          column: 13
        }
      },
      "16": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 34
        }
      },
      "17": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 36,
          column: 13
        }
      },
      "18": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 104
        }
      },
      "19": {
        start: {
          line: 38,
          column: 35
        },
        end: {
          line: 55,
          column: 14
        }
      },
      "20": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 56,
          column: 54
        }
      },
      "21": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "22": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 73
        }
      },
      "23": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 78,
          column: 15
        }
      },
      "24": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "25": {
        start: {
          line: 86,
          column: 27
        },
        end: {
          line: 86,
          column: 37
        }
      },
      "26": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "27": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 91,
          column: 19
        }
      },
      "28": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 23
        }
      },
      "29": {
        start: {
          line: 94,
          column: 25
        },
        end: {
          line: 105,
          column: 14
        }
      },
      "30": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "31": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 110,
          column: 19
        }
      },
      "32": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 23
        }
      },
      "33": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 117,
          column: 15
        }
      },
      "34": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 95
        }
      },
      "35": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "36": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "37": {
        start: {
          line: 132,
          column: 78
        },
        end: {
          line: 132,
          column: 86
        }
      },
      "38": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "39": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 138,
          column: 19
        }
      },
      "40": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 23
        }
      },
      "41": {
        start: {
          line: 142,
          column: 31
        },
        end: {
          line: 142,
          column: 59
        }
      },
      "42": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "43": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 147,
          column: 19
        }
      },
      "44": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 23
        }
      },
      "45": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 157,
          column: 13
        }
      },
      "46": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 155,
          column: 19
        }
      },
      "47": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 23
        }
      },
      "48": {
        start: {
          line: 159,
          column: 33
        },
        end: {
          line: 161,
          column: 14
        }
      },
      "49": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "50": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 166,
          column: 19
        }
      },
      "51": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 23
        }
      },
      "52": {
        start: {
          line: 170,
          column: 31
        },
        end: {
          line: 170,
          column: 33
        }
      },
      "53": {
        start: {
          line: 171,
          column: 35
        },
        end: {
          line: 171,
          column: 84
        }
      },
      "54": {
        start: {
          line: 173,
          column: 25
        },
        end: {
          line: 189,
          column: 14
        }
      },
      "55": {
        start: {
          line: 191,
          column: 32
        },
        end: {
          line: 191,
          column: 40
        }
      },
      "56": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "57": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 201,
          column: 15
        }
      },
      "58": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 204,
          column: 71
        }
      },
      "59": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "60": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "61": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 216,
          column: 37
        }
      },
      "62": {
        start: {
          line: 217,
          column: 62
        },
        end: {
          line: 217,
          column: 70
        }
      },
      "63": {
        start: {
          line: 218,
          column: 32
        },
        end: {
          line: 218,
          column: 40
        }
      },
      "64": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "65": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 223,
          column: 19
        }
      },
      "66": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 23
        }
      },
      "67": {
        start: {
          line: 227,
          column: 33
        },
        end: {
          line: 229,
          column: 14
        }
      },
      "68": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "69": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 234,
          column: 19
        }
      },
      "70": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 23
        }
      },
      "71": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "72": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 242,
          column: 19
        }
      },
      "73": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 23
        }
      },
      "74": {
        start: {
          line: 246,
          column: 31
        },
        end: {
          line: 246,
          column: 33
        }
      },
      "75": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 248,
          column: 39
        }
      },
      "76": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 39
        }
      },
      "77": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "78": {
        start: {
          line: 251,
          column: 35
        },
        end: {
          line: 251,
          column: 63
        }
      },
      "79": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 258,
          column: 17
        }
      },
      "80": {
        start: {
          line: 253,
          column: 20
        },
        end: {
          line: 256,
          column: 23
        }
      },
      "81": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 257,
          column: 27
        }
      },
      "82": {
        start: {
          line: 260,
          column: 35
        },
        end: {
          line: 265,
          column: 18
        }
      },
      "83": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 272,
          column: 17
        }
      },
      "84": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 270,
          column: 23
        }
      },
      "85": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 271,
          column: 27
        }
      },
      "86": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 41
        }
      },
      "87": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "88": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 282,
          column: 17
        }
      },
      "89": {
        start: {
          line: 277,
          column: 20
        },
        end: {
          line: 280,
          column: 23
        }
      },
      "90": {
        start: {
          line: 281,
          column: 20
        },
        end: {
          line: 281,
          column: 27
        }
      },
      "91": {
        start: {
          line: 283,
          column: 35
        },
        end: {
          line: 283,
          column: 37
        }
      },
      "92": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 88
        }
      },
      "93": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "94": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 289,
          column: 43
        }
      },
      "95": {
        start: {
          line: 289,
          column: 20
        },
        end: {
          line: 289,
          column: 43
        }
      },
      "96": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 291,
          column: 51
        }
      },
      "97": {
        start: {
          line: 291,
          column: 20
        },
        end: {
          line: 291,
          column: 51
        }
      },
      "98": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 46
        }
      },
      "99": {
        start: {
          line: 295,
          column: 32
        },
        end: {
          line: 307,
          column: 14
        }
      },
      "100": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 313,
          column: 15
        }
      },
      "101": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 318,
          column: 15
        }
      },
      "102": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 98
        }
      },
      "103": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 325,
          column: 15
        }
      },
      "104": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "105": {
        start: {
          line: 333,
          column: 27
        },
        end: {
          line: 333,
          column: 37
        }
      },
      "106": {
        start: {
          line: 334,
          column: 41
        },
        end: {
          line: 334,
          column: 49
        }
      },
      "107": {
        start: {
          line: 335,
          column: 32
        },
        end: {
          line: 335,
          column: 40
        }
      },
      "108": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 342,
          column: 13
        }
      },
      "109": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 340,
          column: 19
        }
      },
      "110": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 341,
          column: 23
        }
      },
      "111": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 349,
          column: 13
        }
      },
      "112": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 347,
          column: 19
        }
      },
      "113": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 23
        }
      },
      "114": {
        start: {
          line: 351,
          column: 33
        },
        end: {
          line: 353,
          column: 14
        }
      },
      "115": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "116": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 358,
          column: 19
        }
      },
      "117": {
        start: {
          line: 359,
          column: 16
        },
        end: {
          line: 359,
          column: 23
        }
      },
      "118": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "119": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 366,
          column: 19
        }
      },
      "120": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 23
        }
      },
      "121": {
        start: {
          line: 370,
          column: 32
        },
        end: {
          line: 385,
          column: 14
        }
      },
      "122": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 393,
          column: 15
        }
      },
      "123": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 398,
          column: 15
        }
      },
      "124": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 108
        }
      },
      "125": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 405,
          column: 15
        }
      },
      "126": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 465,
          column: 9
        }
      },
      "127": {
        start: {
          line: 413,
          column: 27
        },
        end: {
          line: 413,
          column: 37
        }
      },
      "128": {
        start: {
          line: 414,
          column: 32
        },
        end: {
          line: 414,
          column: 40
        }
      },
      "129": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 421,
          column: 13
        }
      },
      "130": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 419,
          column: 19
        }
      },
      "131": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 420,
          column: 23
        }
      },
      "132": {
        start: {
          line: 423,
          column: 33
        },
        end: {
          line: 425,
          column: 14
        }
      },
      "133": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 432,
          column: 13
        }
      },
      "134": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 430,
          column: 19
        }
      },
      "135": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 23
        }
      },
      "136": {
        start: {
          line: 434,
          column: 12
        },
        end: {
          line: 440,
          column: 13
        }
      },
      "137": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 438,
          column: 19
        }
      },
      "138": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 439,
          column: 23
        }
      },
      "139": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 448,
          column: 15
        }
      },
      "140": {
        start: {
          line: 450,
          column: 12
        },
        end: {
          line: 453,
          column: 15
        }
      },
      "141": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 457,
          column: 15
        }
      },
      "142": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 96
        }
      },
      "143": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 464,
          column: 15
        }
      },
      "144": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 504,
          column: 9
        }
      },
      "145": {
        start: {
          line: 472,
          column: 32
        },
        end: {
          line: 472,
          column: 40
        }
      },
      "146": {
        start: {
          line: 473,
          column: 25
        },
        end: {
          line: 484,
          column: 14
        }
      },
      "147": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 491,
          column: 13
        }
      },
      "148": {
        start: {
          line: 486,
          column: 16
        },
        end: {
          line: 489,
          column: 19
        }
      },
      "149": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 490,
          column: 23
        }
      },
      "150": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 496,
          column: 15
        }
      },
      "151": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 499,
          column: 70
        }
      },
      "152": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 503,
          column: 15
        }
      },
      "153": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 586,
          column: 9
        }
      },
      "154": {
        start: {
          line: 511,
          column: 32
        },
        end: {
          line: 511,
          column: 40
        }
      },
      "155": {
        start: {
          line: 512,
          column: 46
        },
        end: {
          line: 512,
          column: 54
        }
      },
      "156": {
        start: {
          line: 514,
          column: 31
        },
        end: {
          line: 514,
          column: 33
        }
      },
      "157": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 516,
          column: 39
        }
      },
      "158": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 516,
          column: 39
        }
      },
      "159": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 542,
          column: 13
        }
      },
      "160": {
        start: {
          line: 519,
          column: 35
        },
        end: {
          line: 519,
          column: 63
        }
      },
      "161": {
        start: {
          line: 520,
          column: 16
        },
        end: {
          line: 526,
          column: 17
        }
      },
      "162": {
        start: {
          line: 521,
          column: 20
        },
        end: {
          line: 524,
          column: 23
        }
      },
      "163": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 525,
          column: 27
        }
      },
      "164": {
        start: {
          line: 528,
          column: 35
        },
        end: {
          line: 533,
          column: 18
        }
      },
      "165": {
        start: {
          line: 534,
          column: 16
        },
        end: {
          line: 540,
          column: 17
        }
      },
      "166": {
        start: {
          line: 535,
          column: 20
        },
        end: {
          line: 538,
          column: 23
        }
      },
      "167": {
        start: {
          line: 539,
          column: 20
        },
        end: {
          line: 539,
          column: 27
        }
      },
      "168": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 541,
          column: 41
        }
      },
      "169": {
        start: {
          line: 543,
          column: 12
        },
        end: {
          line: 553,
          column: 13
        }
      },
      "170": {
        start: {
          line: 544,
          column: 16
        },
        end: {
          line: 550,
          column: 17
        }
      },
      "171": {
        start: {
          line: 545,
          column: 20
        },
        end: {
          line: 548,
          column: 23
        }
      },
      "172": {
        start: {
          line: 549,
          column: 20
        },
        end: {
          line: 549,
          column: 27
        }
      },
      "173": {
        start: {
          line: 551,
          column: 35
        },
        end: {
          line: 551,
          column: 37
        }
      },
      "174": {
        start: {
          line: 552,
          column: 16
        },
        end: {
          line: 552,
          column: 88
        }
      },
      "175": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 554,
          column: 46
        }
      },
      "176": {
        start: {
          line: 556,
          column: 32
        },
        end: {
          line: 568,
          column: 14
        }
      },
      "177": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 573,
          column: 15
        }
      },
      "178": {
        start: {
          line: 574,
          column: 12
        },
        end: {
          line: 578,
          column: 15
        }
      },
      "179": {
        start: {
          line: 581,
          column: 12
        },
        end: {
          line: 581,
          column: 74
        }
      },
      "180": {
        start: {
          line: 582,
          column: 12
        },
        end: {
          line: 585,
          column: 15
        }
      },
      "181": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 652,
          column: 9
        }
      },
      "182": {
        start: {
          line: 593,
          column: 32
        },
        end: {
          line: 593,
          column: 40
        }
      },
      "183": {
        start: {
          line: 594,
          column: 47
        },
        end: {
          line: 594,
          column: 55
        }
      },
      "184": {
        start: {
          line: 595,
          column: 12
        },
        end: {
          line: 601,
          column: 13
        }
      },
      "185": {
        start: {
          line: 596,
          column: 16
        },
        end: {
          line: 599,
          column: 19
        }
      },
      "186": {
        start: {
          line: 600,
          column: 16
        },
        end: {
          line: 600,
          column: 23
        }
      },
      "187": {
        start: {
          line: 602,
          column: 12
        },
        end: {
          line: 608,
          column: 13
        }
      },
      "188": {
        start: {
          line: 603,
          column: 16
        },
        end: {
          line: 606,
          column: 19
        }
      },
      "189": {
        start: {
          line: 607,
          column: 16
        },
        end: {
          line: 607,
          column: 23
        }
      },
      "190": {
        start: {
          line: 610,
          column: 25
        },
        end: {
          line: 612,
          column: 14
        }
      },
      "191": {
        start: {
          line: 613,
          column: 12
        },
        end: {
          line: 619,
          column: 13
        }
      },
      "192": {
        start: {
          line: 614,
          column: 16
        },
        end: {
          line: 617,
          column: 19
        }
      },
      "193": {
        start: {
          line: 618,
          column: 16
        },
        end: {
          line: 618,
          column: 23
        }
      },
      "194": {
        start: {
          line: 620,
          column: 36
        },
        end: {
          line: 620,
          column: 91
        }
      },
      "195": {
        start: {
          line: 621,
          column: 12
        },
        end: {
          line: 627,
          column: 13
        }
      },
      "196": {
        start: {
          line: 622,
          column: 16
        },
        end: {
          line: 625,
          column: 19
        }
      },
      "197": {
        start: {
          line: 626,
          column: 16
        },
        end: {
          line: 626,
          column: 23
        }
      },
      "198": {
        start: {
          line: 629,
          column: 12
        },
        end: {
          line: 635,
          column: 15
        }
      },
      "199": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 640,
          column: 15
        }
      },
      "200": {
        start: {
          line: 641,
          column: 12
        },
        end: {
          line: 644,
          column: 15
        }
      },
      "201": {
        start: {
          line: 647,
          column: 12
        },
        end: {
          line: 647,
          column: 71
        }
      },
      "202": {
        start: {
          line: 648,
          column: 12
        },
        end: {
          line: 651,
          column: 15
        }
      },
      "203": {
        start: {
          line: 658,
          column: 8
        },
        end: {
          line: 741,
          column: 9
        }
      },
      "204": {
        start: {
          line: 659,
          column: 32
        },
        end: {
          line: 659,
          column: 40
        }
      },
      "205": {
        start: {
          line: 660,
          column: 70
        },
        end: {
          line: 660,
          column: 78
        }
      },
      "206": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 668,
          column: 13
        }
      },
      "207": {
        start: {
          line: 663,
          column: 16
        },
        end: {
          line: 666,
          column: 19
        }
      },
      "208": {
        start: {
          line: 667,
          column: 16
        },
        end: {
          line: 667,
          column: 23
        }
      },
      "209": {
        start: {
          line: 670,
          column: 12
        },
        end: {
          line: 676,
          column: 13
        }
      },
      "210": {
        start: {
          line: 671,
          column: 16
        },
        end: {
          line: 674,
          column: 19
        }
      },
      "211": {
        start: {
          line: 675,
          column: 16
        },
        end: {
          line: 675,
          column: 23
        }
      },
      "212": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 684,
          column: 13
        }
      },
      "213": {
        start: {
          line: 679,
          column: 16
        },
        end: {
          line: 682,
          column: 19
        }
      },
      "214": {
        start: {
          line: 683,
          column: 16
        },
        end: {
          line: 683,
          column: 23
        }
      },
      "215": {
        start: {
          line: 686,
          column: 25
        },
        end: {
          line: 688,
          column: 14
        }
      },
      "216": {
        start: {
          line: 689,
          column: 12
        },
        end: {
          line: 695,
          column: 13
        }
      },
      "217": {
        start: {
          line: 690,
          column: 16
        },
        end: {
          line: 693,
          column: 19
        }
      },
      "218": {
        start: {
          line: 694,
          column: 16
        },
        end: {
          line: 694,
          column: 23
        }
      },
      "219": {
        start: {
          line: 697,
          column: 43
        },
        end: {
          line: 697,
          column: 105
        }
      },
      "220": {
        start: {
          line: 698,
          column: 12
        },
        end: {
          line: 704,
          column: 13
        }
      },
      "221": {
        start: {
          line: 699,
          column: 16
        },
        end: {
          line: 702,
          column: 19
        }
      },
      "222": {
        start: {
          line: 703,
          column: 16
        },
        end: {
          line: 703,
          column: 23
        }
      },
      "223": {
        start: {
          line: 706,
          column: 35
        },
        end: {
          line: 706,
          column: 93
        }
      },
      "224": {
        start: {
          line: 707,
          column: 12
        },
        end: {
          line: 713,
          column: 13
        }
      },
      "225": {
        start: {
          line: 708,
          column: 16
        },
        end: {
          line: 711,
          column: 19
        }
      },
      "226": {
        start: {
          line: 712,
          column: 16
        },
        end: {
          line: 712,
          column: 23
        }
      },
      "227": {
        start: {
          line: 715,
          column: 31
        },
        end: {
          line: 715,
          column: 33
        }
      },
      "228": {
        start: {
          line: 716,
          column: 38
        },
        end: {
          line: 716,
          column: 90
        }
      },
      "229": {
        start: {
          line: 718,
          column: 12
        },
        end: {
          line: 724,
          column: 15
        }
      },
      "230": {
        start: {
          line: 726,
          column: 12
        },
        end: {
          line: 729,
          column: 15
        }
      },
      "231": {
        start: {
          line: 730,
          column: 12
        },
        end: {
          line: 733,
          column: 15
        }
      },
      "232": {
        start: {
          line: 736,
          column: 12
        },
        end: {
          line: 736,
          column: 71
        }
      },
      "233": {
        start: {
          line: 737,
          column: 12
        },
        end: {
          line: 740,
          column: 15
        }
      },
      "234": {
        start: {
          line: 747,
          column: 8
        },
        end: {
          line: 815,
          column: 9
        }
      },
      "235": {
        start: {
          line: 748,
          column: 32
        },
        end: {
          line: 748,
          column: 40
        }
      },
      "236": {
        start: {
          line: 749,
          column: 25
        },
        end: {
          line: 749,
          column: 33
        }
      },
      "237": {
        start: {
          line: 750,
          column: 12
        },
        end: {
          line: 756,
          column: 13
        }
      },
      "238": {
        start: {
          line: 751,
          column: 16
        },
        end: {
          line: 754,
          column: 19
        }
      },
      "239": {
        start: {
          line: 755,
          column: 16
        },
        end: {
          line: 755,
          column: 23
        }
      },
      "240": {
        start: {
          line: 758,
          column: 33
        },
        end: {
          line: 758,
          column: 87
        }
      },
      "241": {
        start: {
          line: 759,
          column: 12
        },
        end: {
          line: 765,
          column: 13
        }
      },
      "242": {
        start: {
          line: 760,
          column: 16
        },
        end: {
          line: 763,
          column: 19
        }
      },
      "243": {
        start: {
          line: 764,
          column: 16
        },
        end: {
          line: 764,
          column: 23
        }
      },
      "244": {
        start: {
          line: 767,
          column: 28
        },
        end: {
          line: 767,
          column: 43
        }
      },
      "245": {
        start: {
          line: 768,
          column: 12
        },
        end: {
          line: 774,
          column: 13
        }
      },
      "246": {
        start: {
          line: 769,
          column: 16
        },
        end: {
          line: 772,
          column: 19
        }
      },
      "247": {
        start: {
          line: 773,
          column: 16
        },
        end: {
          line: 773,
          column: 23
        }
      },
      "248": {
        start: {
          line: 776,
          column: 30
        },
        end: {
          line: 776,
          column: 101
        }
      },
      "249": {
        start: {
          line: 778,
          column: 32
        },
        end: {
          line: 793,
          column: 14
        }
      },
      "250": {
        start: {
          line: 795,
          column: 12
        },
        end: {
          line: 799,
          column: 15
        }
      },
      "251": {
        start: {
          line: 800,
          column: 12
        },
        end: {
          line: 807,
          column: 15
        }
      },
      "252": {
        start: {
          line: 810,
          column: 12
        },
        end: {
          line: 810,
          column: 80
        }
      },
      "253": {
        start: {
          line: 811,
          column: 12
        },
        end: {
          line: 814,
          column: 15
        }
      },
      "254": {
        start: {
          line: 818,
          column: 0
        },
        end: {
          line: 818,
          column: 40
        }
      },
      "255": {
        start: {
          line: 819,
          column: 0
        },
        end: {
          line: 819,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 36
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 39
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 84
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 38
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 130
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 38
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 214
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 44
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 331
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 411,
            column: 4
          },
          end: {
            line: 411,
            column: 5
          }
        },
        loc: {
          start: {
            line: 411,
            column: 38
          },
          end: {
            line: 466,
            column: 5
          }
        },
        line: 411
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 470,
            column: 4
          },
          end: {
            line: 470,
            column: 5
          }
        },
        loc: {
          start: {
            line: 470,
            column: 38
          },
          end: {
            line: 505,
            column: 5
          }
        },
        line: 470
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 41
          },
          end: {
            line: 587,
            column: 5
          }
        },
        line: 509
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 591,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        },
        loc: {
          start: {
            line: 591,
            column: 41
          },
          end: {
            line: 653,
            column: 5
          }
        },
        line: 591
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 657,
            column: 4
          },
          end: {
            line: 657,
            column: 5
          }
        },
        loc: {
          start: {
            line: 657,
            column: 42
          },
          end: {
            line: 742,
            column: 5
          }
        },
        line: 657
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 746,
            column: 4
          },
          end: {
            line: 746,
            column: 5
          }
        },
        loc: {
          start: {
            line: 746,
            column: 40
          },
          end: {
            line: 816,
            column: 5
          }
        },
        line: 746
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 44
          },
          end: {
            line: 20,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 51
          },
          end: {
            line: 20,
            column: 52
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 20,
            column: 54
          },
          end: {
            line: 20,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 62
          },
          end: {
            line: 20,
            column: 64
          }
        }],
        line: 20
      },
      "5": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "6": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 33,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "7": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "8": {
        loc: {
          start: {
            line: 35,
            column: 33
          },
          end: {
            line: 35,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 35,
            column: 64
          },
          end: {
            line: 35,
            column: 83
          }
        }, {
          start: {
            line: 35,
            column: 86
          },
          end: {
            line: 35,
            column: 103
          }
        }],
        line: 35
      },
      "9": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 132,
            column: 43
          },
          end: {
            line: 132,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 132,
            column: 50
          },
          end: {
            line: 132,
            column: 56
          }
        }],
        line: 132
      },
      "12": {
        loc: {
          start: {
            line: 132,
            column: 58
          },
          end: {
            line: 132,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 132,
            column: 69
          },
          end: {
            line: 132,
            column: 73
          }
        }],
        line: 132
      },
      "13": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "14": {
        loc: {
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 134,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 134,
            column: 21
          }
        }, {
          start: {
            line: 134,
            column: 25
          },
          end: {
            line: 134,
            column: 31
          }
        }, {
          start: {
            line: 134,
            column: 35
          },
          end: {
            line: 134,
            column: 44
          }
        }],
        line: 134
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "16": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 157,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "17": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "18": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "19": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "20": {
        loc: {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "21": {
        loc: {
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 238,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 16
          },
          end: {
            line: 238,
            column: 44
          }
        }, {
          start: {
            line: 238,
            column: 48
          },
          end: {
            line: 238,
            column: 69
          }
        }],
        line: 238
      },
      "22": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 248,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 248,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "23": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "24": {
        loc: {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 258,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 258,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "25": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 272,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 272,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "26": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "27": {
        loc: {
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 282,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 282,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "28": {
        loc: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "29": {
        loc: {
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 289,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 289,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "30": {
        loc: {
          start: {
            line: 290,
            column: 16
          },
          end: {
            line: 291,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 16
          },
          end: {
            line: 291,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "31": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 342,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "32": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 349,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "33": {
        loc: {
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 12
          },
          end: {
            line: 360,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "34": {
        loc: {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 368,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 368,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "35": {
        loc: {
          start: {
            line: 362,
            column: 16
          },
          end: {
            line: 362,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 16
          },
          end: {
            line: 362,
            column: 37
          }
        }, {
          start: {
            line: 362,
            column: 41
          },
          end: {
            line: 362,
            column: 50
          }
        }],
        line: 362
      },
      "36": {
        loc: {
          start: {
            line: 391,
            column: 24
          },
          end: {
            line: 391,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 24
          },
          end: {
            line: 391,
            column: 30
          }
        }, {
          start: {
            line: 391,
            column: 34
          },
          end: {
            line: 391,
            column: 49
          }
        }],
        line: 391
      },
      "37": {
        loc: {
          start: {
            line: 396,
            column: 36
          },
          end: {
            line: 396,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 396,
            column: 47
          },
          end: {
            line: 396,
            column: 56
          }
        }, {
          start: {
            line: 396,
            column: 59
          },
          end: {
            line: 396,
            column: 71
          }
        }],
        line: 396
      },
      "38": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 421,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 421,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "39": {
        loc: {
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "40": {
        loc: {
          start: {
            line: 434,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 12
          },
          end: {
            line: 440,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 434
      },
      "41": {
        loc: {
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 491,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 12
          },
          end: {
            line: 491,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "42": {
        loc: {
          start: {
            line: 515,
            column: 12
          },
          end: {
            line: 516,
            column: 39
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 515,
            column: 12
          },
          end: {
            line: 516,
            column: 39
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 515
      },
      "43": {
        loc: {
          start: {
            line: 517,
            column: 12
          },
          end: {
            line: 542,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 517,
            column: 12
          },
          end: {
            line: 542,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 517
      },
      "44": {
        loc: {
          start: {
            line: 520,
            column: 16
          },
          end: {
            line: 526,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 520,
            column: 16
          },
          end: {
            line: 526,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 520
      },
      "45": {
        loc: {
          start: {
            line: 534,
            column: 16
          },
          end: {
            line: 540,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 534,
            column: 16
          },
          end: {
            line: 540,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 534
      },
      "46": {
        loc: {
          start: {
            line: 543,
            column: 12
          },
          end: {
            line: 553,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 543,
            column: 12
          },
          end: {
            line: 553,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 543
      },
      "47": {
        loc: {
          start: {
            line: 544,
            column: 16
          },
          end: {
            line: 550,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 544,
            column: 16
          },
          end: {
            line: 550,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 544
      },
      "48": {
        loc: {
          start: {
            line: 595,
            column: 12
          },
          end: {
            line: 601,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 595,
            column: 12
          },
          end: {
            line: 601,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 595
      },
      "49": {
        loc: {
          start: {
            line: 595,
            column: 16
          },
          end: {
            line: 595,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 595,
            column: 16
          },
          end: {
            line: 595,
            column: 25
          }
        }, {
          start: {
            line: 595,
            column: 29
          },
          end: {
            line: 595,
            column: 42
          }
        }],
        line: 595
      },
      "50": {
        loc: {
          start: {
            line: 602,
            column: 12
          },
          end: {
            line: 608,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 602,
            column: 12
          },
          end: {
            line: 608,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 602
      },
      "51": {
        loc: {
          start: {
            line: 613,
            column: 12
          },
          end: {
            line: 619,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 613,
            column: 12
          },
          end: {
            line: 619,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 613
      },
      "52": {
        loc: {
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 627,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 621,
            column: 12
          },
          end: {
            line: 627,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 621
      },
      "53": {
        loc: {
          start: {
            line: 662,
            column: 12
          },
          end: {
            line: 668,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 662,
            column: 12
          },
          end: {
            line: 668,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 662
      },
      "54": {
        loc: {
          start: {
            line: 662,
            column: 16
          },
          end: {
            line: 662,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 662,
            column: 16
          },
          end: {
            line: 662,
            column: 32
          }
        }, {
          start: {
            line: 662,
            column: 36
          },
          end: {
            line: 662,
            column: 48
          }
        }, {
          start: {
            line: 662,
            column: 52
          },
          end: {
            line: 662,
            column: 68
          }
        }],
        line: 662
      },
      "55": {
        loc: {
          start: {
            line: 670,
            column: 12
          },
          end: {
            line: 676,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 670,
            column: 12
          },
          end: {
            line: 676,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 670
      },
      "56": {
        loc: {
          start: {
            line: 678,
            column: 12
          },
          end: {
            line: 684,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 678,
            column: 12
          },
          end: {
            line: 684,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 678
      },
      "57": {
        loc: {
          start: {
            line: 689,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 689,
            column: 12
          },
          end: {
            line: 695,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 689
      },
      "58": {
        loc: {
          start: {
            line: 698,
            column: 12
          },
          end: {
            line: 704,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 698,
            column: 12
          },
          end: {
            line: 704,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 698
      },
      "59": {
        loc: {
          start: {
            line: 707,
            column: 12
          },
          end: {
            line: 713,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 707,
            column: 12
          },
          end: {
            line: 713,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 707
      },
      "60": {
        loc: {
          start: {
            line: 750,
            column: 12
          },
          end: {
            line: 756,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 750,
            column: 12
          },
          end: {
            line: 756,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 750
      },
      "61": {
        loc: {
          start: {
            line: 759,
            column: 12
          },
          end: {
            line: 765,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 759,
            column: 12
          },
          end: {
            line: 765,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 759
      },
      "62": {
        loc: {
          start: {
            line: 768,
            column: 12
          },
          end: {
            line: 774,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 768,
            column: 12
          },
          end: {
            line: 774,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 768
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0]
    },
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\userController.ts",
      mappings: "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",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\userController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\r\nimport bcrypt from 'bcrypt';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de usu\xE1rio\r\ninterface UserData {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n  role?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface UserFilters {\r\n  search?: string;\r\n  role?: string;\r\n  isActive?: boolean;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Controller respons\xE1vel pelo gerenciamento de usu\xE1rios\r\n */\r\nexport class UserController {\r\n  /**\r\n   * Lista todos os usu\xE1rios com pagina\xE7\xE3o e filtros\r\n   */\r\n  static async getUsers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        search,\r\n        role,\r\n        isActive,\r\n        page = 1,\r\n        limit = 10\r\n      }: UserFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { name: { contains: search, mode: 'insensitive' } },\r\n          { email: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (role) {\r\n        where.role = role;\r\n      }\r\n\r\n      if (isActive !== undefined) {\r\n        where.isActive = typeof isActive === 'string' ? isActive === 'true' : Boolean(isActive);\r\n      }\r\n\r\n      // Buscar usu\xE1rios\r\n      const [users, total] = await Promise.all([\r\n        prisma.user.findMany({\r\n          where,\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            role: true,\r\n            isActive: true,\r\n            createdAt: true,\r\n            updatedAt: true\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy: { createdAt: 'desc' }\r\n        }),\r\n        prisma.user.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usu\xE1rios listados com sucesso',\r\n        data: {\r\n          users,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar usu\xE1rios', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um usu\xE1rio por ID\r\n   */\r\n  static async getUserById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usu\xE1rio \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const user = await prisma.user.findUnique({\r\n        where: { id },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usu\xE1rio n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usu\xE1rio encontrado',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar usu\xE1rio', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria um novo usu\xE1rio\r\n   */\r\n  static async createUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { name, email, password, role = 'USER', isActive = true }: UserData = req.body;\r\n\r\n      // Valida\xE7\xF5es b\xE1sicas\r\n      if (!name || !email || !password) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nome, email e senha s\xE3o obrigat\xF3rios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar formato do email\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(email)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Formato de email inv\xE1lido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar for\xE7a da senha\r\n      if (password.length < 6) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A senha deve ter pelo menos 6 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usu\xE1rio j\xE1 existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      if (existingUser) {\r\n        res.status(409).json({\r\n          success: false,\r\n          message: 'Usu\xE1rio j\xE1 existe com este email'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Hash da senha\r\n      const saltRounds = 12;\r\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n\r\n      // Criar usu\xE1rio\r\n      const user = await prisma.user.create({\r\n        data: {\r\n          name,\r\n          email,\r\n          password: hashedPassword,\r\n          role: role as any,\r\n          isActive\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      const currentUser = (req as any).user;\r\n      logger.info('Usu\xE1rio criado', {\r\n        newUserId: user.id,\r\n        newUserEmail: user.email,\r\n        createdBy: currentUser?.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Usu\xE1rio criado com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar usu\xE1rio', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza um usu\xE1rio existente\r\n   */\r\n  static async updateUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { name, email, password, role, isActive }: UserData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usu\xE1rio \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usu\xE1rio existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usu\xE1rio n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permiss\xF5es (usu\xE1rio s\xF3 pode editar pr\xF3prio perfil, admin pode editar qualquer um)\r\n      if (currentUser.role !== 'ADMIN' && currentUser.id !== id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permiss\xE3o para editar este usu\xE1rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Preparar dados para atualiza\xE7\xE3o\r\n      const updateData: any = {};\r\n\r\n      if (name) updateData.name = name;\r\n      if (email) {\r\n        // Validar formato do email\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(email)) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Formato de email inv\xE1lido'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Verificar se o email j\xE1 est\xE1 em uso por outro usu\xE1rio\r\n        const emailInUse = await prisma.user.findFirst({\r\n          where: {\r\n            email,\r\n            id: { not: id }\r\n          }\r\n        });\r\n\r\n        if (emailInUse) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email j\xE1 est\xE1 em uso por outro usu\xE1rio'\r\n          });\r\n          return;\r\n        }\r\n\r\n        updateData.email = email;\r\n      }\r\n\r\n      if (password) {\r\n        if (password.length < 6) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'A senha deve ter pelo menos 6 caracteres'\r\n          });\r\n          return;\r\n        }\r\n        const saltRounds = 12;\r\n        updateData.password = await bcrypt.hash(password, saltRounds);\r\n      }\r\n\r\n      // Apenas admin pode alterar role e isActive\r\n      if (currentUser.role === 'ADMIN') {\r\n        if (role !== undefined) updateData.role = role;\r\n        if (isActive !== undefined) updateData.isActive = isActive;\r\n      }\r\n\r\n      updateData.updatedAt = new Date();\r\n\r\n      // Atualizar usu\xE1rio\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id },\r\n        data: updateData,\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Usu\xE1rio atualizado', {\r\n        userId: id,\r\n        updatedBy: currentUser.id,\r\n        changes: Object.keys(updateData)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usu\xE1rio atualizado com sucesso',\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar usu\xE1rio', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza o status de um usu\xE1rio (ativo/inativo)\r\n   */\r\n  static async updateUserStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { isActive, reason } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usu\xE1rio \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (typeof isActive !== 'boolean') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Campo isActive \xE9 obrigat\xF3rio e deve ser boolean'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usu\xE1rio existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usu\xE1rio n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // N\xE3o permitir que o usu\xE1rio desative a si mesmo\r\n      if (currentUser.id === id && !isActive) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'N\xE3o \xE9 poss\xEDvel desativar sua pr\xF3pria conta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar status do usu\xE1rio\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id },\r\n        data: {\r\n          isActive,\r\n          updatedAt: new Date()\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Status do usu\xE1rio atualizado', {\r\n        userId: id,\r\n        oldStatus: existingUser.isActive,\r\n        newStatus: isActive,\r\n        reason: reason || 'N\xE3o informado',\r\n        updatedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Usu\xE1rio ${isActive ? 'ativado' : 'desativado'} com sucesso`,\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar status do usu\xE1rio', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um usu\xE1rio (soft delete)\r\n   */\r\n  static async deleteUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usu\xE1rio \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usu\xE1rio existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usu\xE1rio n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // N\xE3o permitir que o usu\xE1rio delete a si mesmo\r\n      if (currentUser.id === id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'N\xE3o \xE9 poss\xEDvel deletar sua pr\xF3pria conta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Soft delete - apenas desativar o usu\xE1rio\r\n      await prisma.user.update({\r\n        where: { id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Usu\xE1rio desativado', {\r\n        userId: id,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usu\xE1rio desativado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar usu\xE1rio', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obt\xE9m o perfil do usu\xE1rio logado\r\n   */\r\n  static async getProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usu\xE1rio n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil obtido com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter perfil', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza o perfil do usu\xE1rio logado\r\n   */\r\n  static async updateProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { name, email, password }: UserData = req.body;\r\n\r\n      // Preparar dados para atualiza\xE7\xE3o\r\n      const updateData: any = {};\r\n\r\n      if (name) updateData.name = name;\r\n      \r\n      if (email) {\r\n        // Validar formato do email\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(email)) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Formato de email inv\xE1lido'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Verificar se o email j\xE1 est\xE1 em uso\r\n        const emailInUse = await prisma.user.findFirst({\r\n          where: {\r\n            email,\r\n            id: { not: currentUser.id }\r\n          }\r\n        });\r\n\r\n        if (emailInUse) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email j\xE1 est\xE1 em uso'\r\n          });\r\n          return;\r\n        }\r\n\r\n        updateData.email = email;\r\n      }\r\n\r\n      if (password) {\r\n        if (password.length < 6) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'A senha deve ter pelo menos 6 caracteres'\r\n          });\r\n          return;\r\n        }\r\n        const saltRounds = 12;\r\n        updateData.password = await bcrypt.hash(password, saltRounds);\r\n      }\r\n\r\n      updateData.updatedAt = new Date();\r\n\r\n      // Atualizar perfil\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: updateData,\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Perfil atualizado', {\r\n        userId: currentUser.id,\r\n        changes: Object.keys(updateData)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil atualizado com sucesso',\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar perfil', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exclui a conta do usu\xE1rio logado\r\n   */\r\n  static async deleteAccount(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { password, confirmation } = req.body;\r\n\r\n      if (!password || !confirmation) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha e confirma\xE7\xE3o s\xE3o obrigat\xF3rios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (confirmation !== 'DELETE_MY_ACCOUNT') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Confirma\xE7\xE3o inv\xE1lida. Digite \"DELETE_MY_ACCOUNT\" para confirmar'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar senha atual\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usu\xE1rio n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const isPasswordValid = await bcrypt.compare(password, user.password);\r\n      if (!isPasswordValid) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha incorreta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Soft delete - desativar a conta\r\n      await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Conta exclu\xEDda pelo pr\xF3prio usu\xE1rio', {\r\n        userId: currentUser.id,\r\n        email: user.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Conta exclu\xEDda com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao excluir conta', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Altera a senha do usu\xE1rio logado\r\n   */\r\n  static async changePassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { currentPassword, newPassword, confirmPassword } = req.body;\r\n\r\n      // Validar dados obrigat\xF3rios\r\n      if (!currentPassword || !newPassword || !confirmPassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha atual, nova senha e confirma\xE7\xE3o s\xE3o obrigat\xF3rios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar se as novas senhas coincidem\r\n      if (newPassword !== confirmPassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nova senha e confirma\xE7\xE3o n\xE3o coincidem'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tamanho da nova senha\r\n      if (newPassword.length < 6) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A nova senha deve ter pelo menos 6 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar usu\xE1rio atual\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usu\xE1rio n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar senha atual\r\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n      if (!isCurrentPasswordValid) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha atual incorreta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se a nova senha \xE9 diferente da atual\r\n      const isSamePassword = await bcrypt.compare(newPassword, user.password);\r\n      if (isSamePassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A nova senha deve ser diferente da senha atual'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Hash da nova senha\r\n      const saltRounds = 12;\r\n      const hashedNewPassword = await bcrypt.hash(newPassword, saltRounds);\r\n\r\n      // Atualizar senha\r\n      await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          password: hashedNewPassword,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Senha alterada', {\r\n        userId: currentUser.id,\r\n        userEmail: user.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Senha alterada com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao alterar senha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload de avatar do usu\xE1rio\r\n   */\r\n  static async uploadAvatar(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const file = req.file;\r\n\r\n      if (!file) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo foi enviado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tipo de arquivo\r\n      const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n      if (!allowedTypes.includes(file.mimetype)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Tipo de arquivo n\xE3o permitido. Use JPG, PNG, GIF ou WebP'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tamanho do arquivo (5MB)\r\n      const maxSize = 5 * 1024 * 1024; // 5MB\r\n      if (file.size > maxSize) {\r\n        res.status(413).json({\r\n          success: false,\r\n          message: 'Arquivo muito grande. Tamanho m\xE1ximo: 5MB'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar URL do avatar (simulado - em produ\xE7\xE3o seria o caminho real do arquivo)\r\n      const avatarUrl = `/uploads/avatars/${currentUser.id}_${Date.now()}_${file.originalname}`;\r\n\r\n      // Atualizar usu\xE1rio com nova URL do avatar\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          // Nota: O campo avatar n\xE3o existe no modelo atual, ent\xE3o vamos simular\r\n          updatedAt: new Date()\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Avatar atualizado', {\r\n        userId: currentUser.id,\r\n        fileName: file.originalname,\r\n        fileSize: file.size\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Avatar atualizado com sucesso',\r\n        data: {\r\n          avatarUrl,\r\n          user: updatedUser\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer upload do avatar', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserController;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "716e412790ec4f7ea479cd9a39f2ad70e3fd9b3f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_8q76owmrl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_8q76owmrl();
var __importDefault =
/* istanbul ignore next */
(cov_8q76owmrl().s[0]++,
/* istanbul ignore next */
(cov_8q76owmrl().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_8q76owmrl().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_8q76owmrl().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_8q76owmrl().f[0]++;
  cov_8q76owmrl().s[1]++;
  return /* istanbul ignore next */(cov_8q76owmrl().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_8q76owmrl().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_8q76owmrl().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_8q76owmrl().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_8q76owmrl().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_8q76owmrl().s[3]++;
exports.UserController = void 0;
const bcrypt_1 =
/* istanbul ignore next */
(cov_8q76owmrl().s[4]++, __importDefault(require("bcrypt")));
const client_1 =
/* istanbul ignore next */
(cov_8q76owmrl().s[5]++, require("@prisma/client"));
const logger_1 =
/* istanbul ignore next */
(cov_8q76owmrl().s[6]++, __importDefault(require("../utils/logger")));
const prisma =
/* istanbul ignore next */
(cov_8q76owmrl().s[7]++, new client_1.PrismaClient());
/**
 * Controller responsável pelo gerenciamento de usuários
 */
class UserController {
  /**
   * Lista todos os usuários com paginação e filtros
   */
  static async getUsers(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[1]++;
    cov_8q76owmrl().s[8]++;
    try {
      const {
        search,
        role,
        isActive,
        page =
        /* istanbul ignore next */
        (cov_8q76owmrl().b[3][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_8q76owmrl().b[4][0]++, 10)
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[9]++, req.query);
      const skip =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[10]++, (Number(page) - 1) * Number(limit));
      const take =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[11]++, Number(limit));
      // Construir filtros
      const where =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[12]++, {});
      /* istanbul ignore next */
      cov_8q76owmrl().s[13]++;
      if (search) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[5][0]++;
        cov_8q76owmrl().s[14]++;
        where.OR = [{
          name: {
            contains: search,
            mode: 'insensitive'
          }
        }, {
          email: {
            contains: search,
            mode: 'insensitive'
          }
        }];
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[5][1]++;
      }
      cov_8q76owmrl().s[15]++;
      if (role) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[6][0]++;
        cov_8q76owmrl().s[16]++;
        where.role = role;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[6][1]++;
      }
      cov_8q76owmrl().s[17]++;
      if (isActive !== undefined) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[7][0]++;
        cov_8q76owmrl().s[18]++;
        where.isActive = typeof isActive === 'string' ?
        /* istanbul ignore next */
        (cov_8q76owmrl().b[8][0]++, isActive === 'true') :
        /* istanbul ignore next */
        (cov_8q76owmrl().b[8][1]++, Boolean(isActive));
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[7][1]++;
      }
      // Buscar usuários
      const [users, total] =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[19]++, await Promise.all([prisma.user.findMany({
        where,
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true,
          updatedAt: true
        },
        skip,
        take,
        orderBy: {
          createdAt: 'desc'
        }
      }), prisma.user.count({
        where
      })]));
      const totalPages =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[20]++, Math.ceil(total / take));
      /* istanbul ignore next */
      cov_8q76owmrl().s[21]++;
      res.status(200).json({
        success: true,
        message: 'Usuários listados com sucesso',
        data: {
          users,
          pagination: {
            page: Number(page),
            limit: take,
            total,
            totalPages,
            hasNext: Number(page) < totalPages,
            hasPrev: Number(page) > 1
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[22]++;
      logger_1.default.error('Erro ao listar usuários', {
        error
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[23]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Busca um usuário por ID
   */
  static async getUserById(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[2]++;
    cov_8q76owmrl().s[24]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[25]++, req.params);
      /* istanbul ignore next */
      cov_8q76owmrl().s[26]++;
      if (!id) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[9][0]++;
        cov_8q76owmrl().s[27]++;
        res.status(400).json({
          success: false,
          message: 'ID do usuário é obrigatório'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[28]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[9][1]++;
      }
      const user =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[29]++, await prisma.user.findUnique({
        where: {
          id
        },
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true,
          updatedAt: true
        }
      }));
      /* istanbul ignore next */
      cov_8q76owmrl().s[30]++;
      if (!user) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[10][0]++;
        cov_8q76owmrl().s[31]++;
        res.status(404).json({
          success: false,
          message: 'Usuário não encontrado'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[32]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[10][1]++;
      }
      cov_8q76owmrl().s[33]++;
      res.status(200).json({
        success: true,
        message: 'Usuário encontrado',
        data: {
          user
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[34]++;
      logger_1.default.error('Erro ao buscar usuário', {
        error,
        userId: req.params.id
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[35]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Cria um novo usuário
   */
  static async createUser(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[3]++;
    cov_8q76owmrl().s[36]++;
    try {
      const {
        name,
        email,
        password,
        role =
        /* istanbul ignore next */
        (cov_8q76owmrl().b[11][0]++, 'USER'),
        isActive =
        /* istanbul ignore next */
        (cov_8q76owmrl().b[12][0]++, true)
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[37]++, req.body);
      // Validações básicas
      /* istanbul ignore next */
      cov_8q76owmrl().s[38]++;
      if (
      /* istanbul ignore next */
      (cov_8q76owmrl().b[14][0]++, !name) ||
      /* istanbul ignore next */
      (cov_8q76owmrl().b[14][1]++, !email) ||
      /* istanbul ignore next */
      (cov_8q76owmrl().b[14][2]++, !password)) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[13][0]++;
        cov_8q76owmrl().s[39]++;
        res.status(400).json({
          success: false,
          message: 'Nome, email e senha são obrigatórios'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[40]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[13][1]++;
      }
      // Validar formato do email
      const emailRegex =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[41]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
      /* istanbul ignore next */
      cov_8q76owmrl().s[42]++;
      if (!emailRegex.test(email)) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[15][0]++;
        cov_8q76owmrl().s[43]++;
        res.status(400).json({
          success: false,
          message: 'Formato de email inválido'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[44]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[15][1]++;
      }
      // Validar força da senha
      cov_8q76owmrl().s[45]++;
      if (password.length < 6) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[16][0]++;
        cov_8q76owmrl().s[46]++;
        res.status(400).json({
          success: false,
          message: 'A senha deve ter pelo menos 6 caracteres'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[47]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[16][1]++;
      }
      // Verificar se o usuário já existe
      const existingUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[48]++, await prisma.user.findUnique({
        where: {
          email
        }
      }));
      /* istanbul ignore next */
      cov_8q76owmrl().s[49]++;
      if (existingUser) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[17][0]++;
        cov_8q76owmrl().s[50]++;
        res.status(409).json({
          success: false,
          message: 'Usuário já existe com este email'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[51]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[17][1]++;
      }
      // Hash da senha
      const saltRounds =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[52]++, 12);
      const hashedPassword =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[53]++, await bcrypt_1.default.hash(password, saltRounds));
      // Criar usuário
      const user =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[54]++, await prisma.user.create({
        data: {
          name,
          email,
          password: hashedPassword,
          role: role,
          isActive
        },
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true
        }
      }));
      // Log da ação
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[55]++, req.user);
      /* istanbul ignore next */
      cov_8q76owmrl().s[56]++;
      logger_1.default.info('Usuário criado', {
        newUserId: user.id,
        newUserEmail: user.email,
        createdBy: currentUser?.id
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[57]++;
      res.status(201).json({
        success: true,
        message: 'Usuário criado com sucesso',
        data: {
          user
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[58]++;
      logger_1.default.error('Erro ao criar usuário', {
        error
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[59]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Atualiza um usuário existente
   */
  static async updateUser(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[4]++;
    cov_8q76owmrl().s[60]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[61]++, req.params);
      const {
        name,
        email,
        password,
        role,
        isActive
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[62]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[63]++, req.user);
      /* istanbul ignore next */
      cov_8q76owmrl().s[64]++;
      if (!id) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[18][0]++;
        cov_8q76owmrl().s[65]++;
        res.status(400).json({
          success: false,
          message: 'ID do usuário é obrigatório'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[66]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[18][1]++;
      }
      // Verificar se o usuário existe
      const existingUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[67]++, await prisma.user.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_8q76owmrl().s[68]++;
      if (!existingUser) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[19][0]++;
        cov_8q76owmrl().s[69]++;
        res.status(404).json({
          success: false,
          message: 'Usuário não encontrado'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[70]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[19][1]++;
      }
      // Verificar permissões (usuário só pode editar próprio perfil, admin pode editar qualquer um)
      cov_8q76owmrl().s[71]++;
      if (
      /* istanbul ignore next */
      (cov_8q76owmrl().b[21][0]++, currentUser.role !== 'ADMIN') &&
      /* istanbul ignore next */
      (cov_8q76owmrl().b[21][1]++, currentUser.id !== id)) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[20][0]++;
        cov_8q76owmrl().s[72]++;
        res.status(403).json({
          success: false,
          message: 'Sem permissão para editar este usuário'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[73]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[20][1]++;
      }
      // Preparar dados para atualização
      const updateData =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[74]++, {});
      /* istanbul ignore next */
      cov_8q76owmrl().s[75]++;
      if (name) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[22][0]++;
        cov_8q76owmrl().s[76]++;
        updateData.name = name;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[22][1]++;
      }
      cov_8q76owmrl().s[77]++;
      if (email) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[23][0]++;
        // Validar formato do email
        const emailRegex =
        /* istanbul ignore next */
        (cov_8q76owmrl().s[78]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        /* istanbul ignore next */
        cov_8q76owmrl().s[79]++;
        if (!emailRegex.test(email)) {
          /* istanbul ignore next */
          cov_8q76owmrl().b[24][0]++;
          cov_8q76owmrl().s[80]++;
          res.status(400).json({
            success: false,
            message: 'Formato de email inválido'
          });
          /* istanbul ignore next */
          cov_8q76owmrl().s[81]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_8q76owmrl().b[24][1]++;
        }
        // Verificar se o email já está em uso por outro usuário
        const emailInUse =
        /* istanbul ignore next */
        (cov_8q76owmrl().s[82]++, await prisma.user.findFirst({
          where: {
            email,
            id: {
              not: id
            }
          }
        }));
        /* istanbul ignore next */
        cov_8q76owmrl().s[83]++;
        if (emailInUse) {
          /* istanbul ignore next */
          cov_8q76owmrl().b[25][0]++;
          cov_8q76owmrl().s[84]++;
          res.status(409).json({
            success: false,
            message: 'Email já está em uso por outro usuário'
          });
          /* istanbul ignore next */
          cov_8q76owmrl().s[85]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_8q76owmrl().b[25][1]++;
        }
        cov_8q76owmrl().s[86]++;
        updateData.email = email;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[23][1]++;
      }
      cov_8q76owmrl().s[87]++;
      if (password) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[26][0]++;
        cov_8q76owmrl().s[88]++;
        if (password.length < 6) {
          /* istanbul ignore next */
          cov_8q76owmrl().b[27][0]++;
          cov_8q76owmrl().s[89]++;
          res.status(400).json({
            success: false,
            message: 'A senha deve ter pelo menos 6 caracteres'
          });
          /* istanbul ignore next */
          cov_8q76owmrl().s[90]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_8q76owmrl().b[27][1]++;
        }
        const saltRounds =
        /* istanbul ignore next */
        (cov_8q76owmrl().s[91]++, 12);
        /* istanbul ignore next */
        cov_8q76owmrl().s[92]++;
        updateData.password = await bcrypt_1.default.hash(password, saltRounds);
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[26][1]++;
      }
      // Apenas admin pode alterar role e isActive
      cov_8q76owmrl().s[93]++;
      if (currentUser.role === 'ADMIN') {
        /* istanbul ignore next */
        cov_8q76owmrl().b[28][0]++;
        cov_8q76owmrl().s[94]++;
        if (role !== undefined) {
          /* istanbul ignore next */
          cov_8q76owmrl().b[29][0]++;
          cov_8q76owmrl().s[95]++;
          updateData.role = role;
        } else
        /* istanbul ignore next */
        {
          cov_8q76owmrl().b[29][1]++;
        }
        cov_8q76owmrl().s[96]++;
        if (isActive !== undefined) {
          /* istanbul ignore next */
          cov_8q76owmrl().b[30][0]++;
          cov_8q76owmrl().s[97]++;
          updateData.isActive = isActive;
        } else
        /* istanbul ignore next */
        {
          cov_8q76owmrl().b[30][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[28][1]++;
      }
      cov_8q76owmrl().s[98]++;
      updateData.updatedAt = new Date();
      // Atualizar usuário
      const updatedUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[99]++, await prisma.user.update({
        where: {
          id
        },
        data: updateData,
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true,
          updatedAt: true
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_8q76owmrl().s[100]++;
      logger_1.default.info('Usuário atualizado', {
        userId: id,
        updatedBy: currentUser.id,
        changes: Object.keys(updateData)
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[101]++;
      res.status(200).json({
        success: true,
        message: 'Usuário atualizado com sucesso',
        data: {
          user: updatedUser
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[102]++;
      logger_1.default.error('Erro ao atualizar usuário', {
        error,
        userId: req.params.id
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[103]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Atualiza o status de um usuário (ativo/inativo)
   */
  static async updateUserStatus(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[5]++;
    cov_8q76owmrl().s[104]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[105]++, req.params);
      const {
        isActive,
        reason
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[106]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[107]++, req.user);
      /* istanbul ignore next */
      cov_8q76owmrl().s[108]++;
      if (!id) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[31][0]++;
        cov_8q76owmrl().s[109]++;
        res.status(400).json({
          success: false,
          message: 'ID do usuário é obrigatório'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[110]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[31][1]++;
      }
      cov_8q76owmrl().s[111]++;
      if (typeof isActive !== 'boolean') {
        /* istanbul ignore next */
        cov_8q76owmrl().b[32][0]++;
        cov_8q76owmrl().s[112]++;
        res.status(400).json({
          success: false,
          message: 'Campo isActive é obrigatório e deve ser boolean'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[113]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[32][1]++;
      }
      // Verificar se o usuário existe
      const existingUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[114]++, await prisma.user.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_8q76owmrl().s[115]++;
      if (!existingUser) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[33][0]++;
        cov_8q76owmrl().s[116]++;
        res.status(404).json({
          success: false,
          message: 'Usuário não encontrado'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[117]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[33][1]++;
      }
      // Não permitir que o usuário desative a si mesmo
      cov_8q76owmrl().s[118]++;
      if (
      /* istanbul ignore next */
      (cov_8q76owmrl().b[35][0]++, currentUser.id === id) &&
      /* istanbul ignore next */
      (cov_8q76owmrl().b[35][1]++, !isActive)) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[34][0]++;
        cov_8q76owmrl().s[119]++;
        res.status(400).json({
          success: false,
          message: 'Não é possível desativar sua própria conta'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[120]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[34][1]++;
      }
      // Atualizar status do usuário
      const updatedUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[121]++, await prisma.user.update({
        where: {
          id
        },
        data: {
          isActive,
          updatedAt: new Date()
        },
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true,
          updatedAt: true
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_8q76owmrl().s[122]++;
      logger_1.default.info('Status do usuário atualizado', {
        userId: id,
        oldStatus: existingUser.isActive,
        newStatus: isActive,
        reason:
        /* istanbul ignore next */
        (cov_8q76owmrl().b[36][0]++, reason) ||
        /* istanbul ignore next */
        (cov_8q76owmrl().b[36][1]++, 'Não informado'),
        updatedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[123]++;
      res.status(200).json({
        success: true,
        message: `Usuário ${isActive ?
        /* istanbul ignore next */
        (cov_8q76owmrl().b[37][0]++, 'ativado') :
        /* istanbul ignore next */
        (cov_8q76owmrl().b[37][1]++, 'desativado')} com sucesso`,
        data: {
          user: updatedUser
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[124]++;
      logger_1.default.error('Erro ao atualizar status do usuário', {
        error,
        userId: req.params.id
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[125]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Remove um usuário (soft delete)
   */
  static async deleteUser(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[6]++;
    cov_8q76owmrl().s[126]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[127]++, req.params);
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[128]++, req.user);
      /* istanbul ignore next */
      cov_8q76owmrl().s[129]++;
      if (!id) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[38][0]++;
        cov_8q76owmrl().s[130]++;
        res.status(400).json({
          success: false,
          message: 'ID do usuário é obrigatório'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[131]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[38][1]++;
      }
      // Verificar se o usuário existe
      const existingUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[132]++, await prisma.user.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_8q76owmrl().s[133]++;
      if (!existingUser) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[39][0]++;
        cov_8q76owmrl().s[134]++;
        res.status(404).json({
          success: false,
          message: 'Usuário não encontrado'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[135]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[39][1]++;
      }
      // Não permitir que o usuário delete a si mesmo
      cov_8q76owmrl().s[136]++;
      if (currentUser.id === id) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[40][0]++;
        cov_8q76owmrl().s[137]++;
        res.status(400).json({
          success: false,
          message: 'Não é possível deletar sua própria conta'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[138]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[40][1]++;
      }
      // Soft delete - apenas desativar o usuário
      cov_8q76owmrl().s[139]++;
      await prisma.user.update({
        where: {
          id
        },
        data: {
          isActive: false,
          updatedAt: new Date()
        }
      });
      // Log da ação
      /* istanbul ignore next */
      cov_8q76owmrl().s[140]++;
      logger_1.default.info('Usuário desativado', {
        userId: id,
        deletedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[141]++;
      res.status(200).json({
        success: true,
        message: 'Usuário desativado com sucesso'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[142]++;
      logger_1.default.error('Erro ao deletar usuário', {
        error,
        userId: req.params.id
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[143]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Obtém o perfil do usuário logado
   */
  static async getProfile(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[7]++;
    cov_8q76owmrl().s[144]++;
    try {
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[145]++, req.user);
      const user =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[146]++, await prisma.user.findUnique({
        where: {
          id: currentUser.id
        },
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true,
          updatedAt: true
        }
      }));
      /* istanbul ignore next */
      cov_8q76owmrl().s[147]++;
      if (!user) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[41][0]++;
        cov_8q76owmrl().s[148]++;
        res.status(404).json({
          success: false,
          message: 'Usuário não encontrado'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[149]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[41][1]++;
      }
      cov_8q76owmrl().s[150]++;
      res.status(200).json({
        success: true,
        message: 'Perfil obtido com sucesso',
        data: {
          user
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[151]++;
      logger_1.default.error('Erro ao obter perfil', {
        error
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[152]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Atualiza o perfil do usuário logado
   */
  static async updateProfile(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[8]++;
    cov_8q76owmrl().s[153]++;
    try {
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[154]++, req.user);
      const {
        name,
        email,
        password
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[155]++, req.body);
      // Preparar dados para atualização
      const updateData =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[156]++, {});
      /* istanbul ignore next */
      cov_8q76owmrl().s[157]++;
      if (name) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[42][0]++;
        cov_8q76owmrl().s[158]++;
        updateData.name = name;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[42][1]++;
      }
      cov_8q76owmrl().s[159]++;
      if (email) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[43][0]++;
        // Validar formato do email
        const emailRegex =
        /* istanbul ignore next */
        (cov_8q76owmrl().s[160]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        /* istanbul ignore next */
        cov_8q76owmrl().s[161]++;
        if (!emailRegex.test(email)) {
          /* istanbul ignore next */
          cov_8q76owmrl().b[44][0]++;
          cov_8q76owmrl().s[162]++;
          res.status(400).json({
            success: false,
            message: 'Formato de email inválido'
          });
          /* istanbul ignore next */
          cov_8q76owmrl().s[163]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_8q76owmrl().b[44][1]++;
        }
        // Verificar se o email já está em uso
        const emailInUse =
        /* istanbul ignore next */
        (cov_8q76owmrl().s[164]++, await prisma.user.findFirst({
          where: {
            email,
            id: {
              not: currentUser.id
            }
          }
        }));
        /* istanbul ignore next */
        cov_8q76owmrl().s[165]++;
        if (emailInUse) {
          /* istanbul ignore next */
          cov_8q76owmrl().b[45][0]++;
          cov_8q76owmrl().s[166]++;
          res.status(409).json({
            success: false,
            message: 'Email já está em uso'
          });
          /* istanbul ignore next */
          cov_8q76owmrl().s[167]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_8q76owmrl().b[45][1]++;
        }
        cov_8q76owmrl().s[168]++;
        updateData.email = email;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[43][1]++;
      }
      cov_8q76owmrl().s[169]++;
      if (password) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[46][0]++;
        cov_8q76owmrl().s[170]++;
        if (password.length < 6) {
          /* istanbul ignore next */
          cov_8q76owmrl().b[47][0]++;
          cov_8q76owmrl().s[171]++;
          res.status(400).json({
            success: false,
            message: 'A senha deve ter pelo menos 6 caracteres'
          });
          /* istanbul ignore next */
          cov_8q76owmrl().s[172]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_8q76owmrl().b[47][1]++;
        }
        const saltRounds =
        /* istanbul ignore next */
        (cov_8q76owmrl().s[173]++, 12);
        /* istanbul ignore next */
        cov_8q76owmrl().s[174]++;
        updateData.password = await bcrypt_1.default.hash(password, saltRounds);
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[46][1]++;
      }
      cov_8q76owmrl().s[175]++;
      updateData.updatedAt = new Date();
      // Atualizar perfil
      const updatedUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[176]++, await prisma.user.update({
        where: {
          id: currentUser.id
        },
        data: updateData,
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true,
          updatedAt: true
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_8q76owmrl().s[177]++;
      logger_1.default.info('Perfil atualizado', {
        userId: currentUser.id,
        changes: Object.keys(updateData)
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[178]++;
      res.status(200).json({
        success: true,
        message: 'Perfil atualizado com sucesso',
        data: {
          user: updatedUser
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[179]++;
      logger_1.default.error('Erro ao atualizar perfil', {
        error
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[180]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Exclui a conta do usuário logado
   */
  static async deleteAccount(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[9]++;
    cov_8q76owmrl().s[181]++;
    try {
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[182]++, req.user);
      const {
        password,
        confirmation
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[183]++, req.body);
      /* istanbul ignore next */
      cov_8q76owmrl().s[184]++;
      if (
      /* istanbul ignore next */
      (cov_8q76owmrl().b[49][0]++, !password) ||
      /* istanbul ignore next */
      (cov_8q76owmrl().b[49][1]++, !confirmation)) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[48][0]++;
        cov_8q76owmrl().s[185]++;
        res.status(400).json({
          success: false,
          message: 'Senha e confirmação são obrigatórios'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[186]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[48][1]++;
      }
      cov_8q76owmrl().s[187]++;
      if (confirmation !== 'DELETE_MY_ACCOUNT') {
        /* istanbul ignore next */
        cov_8q76owmrl().b[50][0]++;
        cov_8q76owmrl().s[188]++;
        res.status(400).json({
          success: false,
          message: 'Confirmação inválida. Digite "DELETE_MY_ACCOUNT" para confirmar'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[189]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[50][1]++;
      }
      // Verificar senha atual
      const user =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[190]++, await prisma.user.findUnique({
        where: {
          id: currentUser.id
        }
      }));
      /* istanbul ignore next */
      cov_8q76owmrl().s[191]++;
      if (!user) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[51][0]++;
        cov_8q76owmrl().s[192]++;
        res.status(404).json({
          success: false,
          message: 'Usuário não encontrado'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[193]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[51][1]++;
      }
      const isPasswordValid =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[194]++, await bcrypt_1.default.compare(password, user.password));
      /* istanbul ignore next */
      cov_8q76owmrl().s[195]++;
      if (!isPasswordValid) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[52][0]++;
        cov_8q76owmrl().s[196]++;
        res.status(400).json({
          success: false,
          message: 'Senha incorreta'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[197]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[52][1]++;
      }
      // Soft delete - desativar a conta
      cov_8q76owmrl().s[198]++;
      await prisma.user.update({
        where: {
          id: currentUser.id
        },
        data: {
          isActive: false,
          updatedAt: new Date()
        }
      });
      // Log da ação
      /* istanbul ignore next */
      cov_8q76owmrl().s[199]++;
      logger_1.default.info('Conta excluída pelo próprio usuário', {
        userId: currentUser.id,
        email: user.email
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[200]++;
      res.status(200).json({
        success: true,
        message: 'Conta excluída com sucesso'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[201]++;
      logger_1.default.error('Erro ao excluir conta', {
        error
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[202]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Altera a senha do usuário logado
   */
  static async changePassword(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[10]++;
    cov_8q76owmrl().s[203]++;
    try {
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[204]++, req.user);
      const {
        currentPassword,
        newPassword,
        confirmPassword
      } =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[205]++, req.body);
      // Validar dados obrigatórios
      /* istanbul ignore next */
      cov_8q76owmrl().s[206]++;
      if (
      /* istanbul ignore next */
      (cov_8q76owmrl().b[54][0]++, !currentPassword) ||
      /* istanbul ignore next */
      (cov_8q76owmrl().b[54][1]++, !newPassword) ||
      /* istanbul ignore next */
      (cov_8q76owmrl().b[54][2]++, !confirmPassword)) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[53][0]++;
        cov_8q76owmrl().s[207]++;
        res.status(400).json({
          success: false,
          message: 'Senha atual, nova senha e confirmação são obrigatórios'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[208]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[53][1]++;
      }
      // Validar se as novas senhas coincidem
      cov_8q76owmrl().s[209]++;
      if (newPassword !== confirmPassword) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[55][0]++;
        cov_8q76owmrl().s[210]++;
        res.status(400).json({
          success: false,
          message: 'Nova senha e confirmação não coincidem'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[211]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[55][1]++;
      }
      // Validar tamanho da nova senha
      cov_8q76owmrl().s[212]++;
      if (newPassword.length < 6) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[56][0]++;
        cov_8q76owmrl().s[213]++;
        res.status(400).json({
          success: false,
          message: 'A nova senha deve ter pelo menos 6 caracteres'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[214]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[56][1]++;
      }
      // Buscar usuário atual
      const user =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[215]++, await prisma.user.findUnique({
        where: {
          id: currentUser.id
        }
      }));
      /* istanbul ignore next */
      cov_8q76owmrl().s[216]++;
      if (!user) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[57][0]++;
        cov_8q76owmrl().s[217]++;
        res.status(404).json({
          success: false,
          message: 'Usuário não encontrado'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[218]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[57][1]++;
      }
      // Verificar senha atual
      const isCurrentPasswordValid =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[219]++, await bcrypt_1.default.compare(currentPassword, user.password));
      /* istanbul ignore next */
      cov_8q76owmrl().s[220]++;
      if (!isCurrentPasswordValid) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[58][0]++;
        cov_8q76owmrl().s[221]++;
        res.status(400).json({
          success: false,
          message: 'Senha atual incorreta'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[222]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[58][1]++;
      }
      // Verificar se a nova senha é diferente da atual
      const isSamePassword =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[223]++, await bcrypt_1.default.compare(newPassword, user.password));
      /* istanbul ignore next */
      cov_8q76owmrl().s[224]++;
      if (isSamePassword) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[59][0]++;
        cov_8q76owmrl().s[225]++;
        res.status(400).json({
          success: false,
          message: 'A nova senha deve ser diferente da senha atual'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[226]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[59][1]++;
      }
      // Hash da nova senha
      const saltRounds =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[227]++, 12);
      const hashedNewPassword =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[228]++, await bcrypt_1.default.hash(newPassword, saltRounds));
      // Atualizar senha
      /* istanbul ignore next */
      cov_8q76owmrl().s[229]++;
      await prisma.user.update({
        where: {
          id: currentUser.id
        },
        data: {
          password: hashedNewPassword,
          updatedAt: new Date()
        }
      });
      // Log da ação
      /* istanbul ignore next */
      cov_8q76owmrl().s[230]++;
      logger_1.default.info('Senha alterada', {
        userId: currentUser.id,
        userEmail: user.email
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[231]++;
      res.status(200).json({
        success: true,
        message: 'Senha alterada com sucesso'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[232]++;
      logger_1.default.error('Erro ao alterar senha', {
        error
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[233]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Upload de avatar do usuário
   */
  static async uploadAvatar(req, res) {
    /* istanbul ignore next */
    cov_8q76owmrl().f[11]++;
    cov_8q76owmrl().s[234]++;
    try {
      const currentUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[235]++, req.user);
      const file =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[236]++, req.file);
      /* istanbul ignore next */
      cov_8q76owmrl().s[237]++;
      if (!file) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[60][0]++;
        cov_8q76owmrl().s[238]++;
        res.status(400).json({
          success: false,
          message: 'Nenhum arquivo foi enviado'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[239]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[60][1]++;
      }
      // Validar tipo de arquivo
      const allowedTypes =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[240]++, ['image/jpeg', 'image/png', 'image/gif', 'image/webp']);
      /* istanbul ignore next */
      cov_8q76owmrl().s[241]++;
      if (!allowedTypes.includes(file.mimetype)) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[61][0]++;
        cov_8q76owmrl().s[242]++;
        res.status(400).json({
          success: false,
          message: 'Tipo de arquivo não permitido. Use JPG, PNG, GIF ou WebP'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[243]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[61][1]++;
      }
      // Validar tamanho do arquivo (5MB)
      const maxSize =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[244]++, 5 * 1024 * 1024); // 5MB
      /* istanbul ignore next */
      cov_8q76owmrl().s[245]++;
      if (file.size > maxSize) {
        /* istanbul ignore next */
        cov_8q76owmrl().b[62][0]++;
        cov_8q76owmrl().s[246]++;
        res.status(413).json({
          success: false,
          message: 'Arquivo muito grande. Tamanho máximo: 5MB'
        });
        /* istanbul ignore next */
        cov_8q76owmrl().s[247]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_8q76owmrl().b[62][1]++;
      }
      // Gerar URL do avatar (simulado - em produção seria o caminho real do arquivo)
      const avatarUrl =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[248]++, `/uploads/avatars/${currentUser.id}_${Date.now()}_${file.originalname}`);
      // Atualizar usuário com nova URL do avatar
      const updatedUser =
      /* istanbul ignore next */
      (cov_8q76owmrl().s[249]++, await prisma.user.update({
        where: {
          id: currentUser.id
        },
        data: {
          // Nota: O campo avatar não existe no modelo atual, então vamos simular
          updatedAt: new Date()
        },
        select: {
          id: true,
          name: true,
          email: true,
          role: true,
          isActive: true,
          createdAt: true,
          updatedAt: true
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_8q76owmrl().s[250]++;
      logger_1.default.info('Avatar atualizado', {
        userId: currentUser.id,
        fileName: file.originalname,
        fileSize: file.size
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[251]++;
      res.status(200).json({
        success: true,
        message: 'Avatar atualizado com sucesso',
        data: {
          avatarUrl,
          user: updatedUser
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_8q76owmrl().s[252]++;
      logger_1.default.error('Erro ao fazer upload do avatar', {
        error
      });
      /* istanbul ignore next */
      cov_8q76owmrl().s[253]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
}
/* istanbul ignore next */
cov_8q76owmrl().s[254]++;
exports.UserController = UserController;
/* istanbul ignore next */
cov_8q76owmrl().s[255]++;
exports.default = UserController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\__tests__\\authService.test.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\__tests__\\authService.test.ts"],"sourcesContent":["import { AuthService } from '../authService';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { AuthenticationError, ValidationError } from '../../utils/error';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport logger from '../../utils/logger';\r\n\r\n// Mock das dependÃªncias\r\njest.mock('bcrypt');\r\njest.mock('jsonwebtoken');\r\njest.mock('../../utils/logger');\r\njest.mock('@prisma/client');\r\n\r\nconst mockBcrypt = bcrypt as jest.Mocked<typeof bcrypt>;\r\nconst mockJwt = jwt as jest.Mocked<typeof jwt>;\r\nconst mockLogger = logger as jest.Mocked<typeof logger>;\r\n\r\n// Mock do PrismaClient\r\nconst mockPrisma = {\r\n  user: {\r\n    create: jest.fn(),\r\n    findUnique: jest.fn(),\r\n    update: jest.fn(),\r\n  },\r\n  refreshToken: {\r\n    create: jest.fn(),\r\n    findFirst: jest.fn(),\r\n    delete: jest.fn(),\r\n    deleteMany: jest.fn(),\r\n  },\r\n};\r\n\r\n(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrisma as any);\r\n\r\ndescribe('AuthService', () => {\r\n  let authService: AuthService;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    authService = new AuthService(mockPrisma as any);\r\n  });\r\n\r\n  describe('register', () => {\r\n    const validUserData = {\r\n      name: 'Test User',\r\n      email: 'test@example.com',\r\n      password: 'Password123!',\r\n      role: 'USER' as const,\r\n    };\r\n\r\n    it('should register a new user successfully', async () => {\r\n      // Arrange\r\n      const userData = {\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        password: 'Password123!',\r\n        role: 'USER' as const,\r\n      };\r\n\r\n      const hashedPassword = 'hashedpassword';\r\n      const createdUser = {\r\n        id: '1',\r\n        ...userData,\r\n        password: hashedPassword,\r\n        isActive: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      mockPrisma.user.findUnique.mockResolvedValue(null); // User doesn't exist\r\n      mockBcrypt.hash.mockResolvedValue(hashedPassword as never);\r\n      mockPrisma.user.create.mockResolvedValue(createdUser as any);\r\n      mockJwt.sign.mockReturnValue('access_token' as never);\r\n      mockPrisma.refreshToken.create.mockResolvedValue({} as any);\r\n      \r\n      // Act\r\n      const result = await authService.register(userData);\r\n      \r\n      // Assert\r\n      expect(result).toHaveProperty('tokens');\r\n      expect(result).toHaveProperty('user');\r\n      expect(result.user.email).toBe(userData.email);\r\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\r\n        where: { email: userData.email },\r\n      });\r\n      expect(mockBcrypt.hash).toHaveBeenCalledWith(userData.password, 12);\r\n      expect(mockPrisma.user.create).toHaveBeenCalledWith({\r\n        data: {\r\n          name: userData.name,\r\n          email: userData.email,\r\n          password: hashedPassword,\r\n          role: userData.role,\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should throw an error if user already exists', async () => {\r\n      // Arrange\r\n      const userData = {\r\n        name: 'Test User',\r\n        email: 'existing@example.com',\r\n        password: 'Password123!',\r\n        role: 'USER' as const,\r\n      };\r\n\r\n      const existingUser = {\r\n        id: '1',\r\n        email: userData.email,\r\n      };\r\n\r\n      mockPrisma.user.findUnique.mockResolvedValue(existingUser as any);\r\n      \r\n      // Act & Assert\r\n      await expect(authService.register(userData)).rejects.toThrow('UsuÃ¡rio jÃ¡ existe');\r\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\r\n        where: { email: userData.email },\r\n      });\r\n      expect(mockBcrypt.hash).not.toHaveBeenCalled();\r\n      expect(mockPrisma.user.create).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw ValidationError for invalid email format', async () => {\r\n      const invalidUserData = {\r\n        ...validUserData,\r\n        email: 'invalid-email',\r\n      };\r\n\r\n      await expect(authService.register(invalidUserData))\r\n        .rejects\r\n        .toThrow(ValidationError);\r\n    });\r\n\r\n    it('should throw ValidationError for weak password', async () => {\r\n      const weakPasswordData = {\r\n        ...validUserData,\r\n        password: '123',\r\n      };\r\n\r\n      await expect(authService.register(weakPasswordData))\r\n        .rejects\r\n        .toThrow(ValidationError);\r\n    });\r\n  });\r\n\r\n  describe('login', () => {\r\n    it('should login successfully with valid credentials', async () => {\r\n      // Arrange\r\n      const credentials = {\r\n        email: 'test@example.com',\r\n        password: 'Password123!',\r\n      };\r\n\r\n      const existingUser = {\r\n        id: '1',\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        password: 'hashedpassword',\r\n        role: 'USER',\r\n        isActive: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n      };\r\n\r\n      mockPrisma.user.findUnique.mockResolvedValue(existingUser as any);\r\n      mockBcrypt.compare.mockResolvedValue(true as never);\r\n      mockJwt.sign.mockReturnValue('access_token' as never);\r\n      mockPrisma.refreshToken.create.mockResolvedValue({} as any);\r\n      \r\n      // Act\r\n      const result = await authService.login(credentials);\r\n      \r\n      // Assert\r\n      expect(result).toHaveProperty('tokens');\r\n      expect(result).toHaveProperty('user');\r\n      expect(result.user.email).toBe(credentials.email);\r\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\r\n        where: { email: credentials.email },\r\n      });\r\n      expect(mockBcrypt.compare).toHaveBeenCalledWith(credentials.password, existingUser.password);\r\n    });\r\n\r\n    it('should throw an error with invalid email', async () => {\r\n      // Arrange\r\n      const credentials = {\r\n        email: 'nonexistent@example.com',\r\n        password: 'password123',\r\n      };\r\n      \r\n      mockPrisma.user.findUnique.mockResolvedValue(null);\r\n      \r\n      // Act & Assert\r\n      await expect(authService.login(credentials)).rejects.toThrow('Credenciais invÃ¡lidas');\r\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\r\n        where: { email: credentials.email },\r\n      });\r\n      expect(mockBcrypt.compare).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw an error with invalid password', async () => {\r\n      // Arrange\r\n      const credentials = {\r\n        email: 'test@example.com',\r\n        password: 'wrongpassword',\r\n      };\r\n\r\n      const existingUser = {\r\n        id: '1',\r\n        email: 'test@example.com',\r\n        password: 'hashedpassword',\r\n        isActive: true,\r\n      };\r\n\r\n      mockPrisma.user.findUnique.mockResolvedValue(existingUser as any);\r\n      mockBcrypt.compare.mockResolvedValue(false as never);\r\n      \r\n      // Act & Assert\r\n      await expect(authService.login(credentials)).rejects.toThrow('Credenciais invÃ¡lidas');\r\n      expect(mockBcrypt.compare).toHaveBeenCalledWith(credentials.password, existingUser.password);\r\n    });\r\n  });\r\n\r\n  describe('refreshToken', () => {\r\n    it('should refresh token successfully', async () => {\r\n      // Arrange\r\n      const refreshTokenValue = 'valid_refresh_token';\r\n      const tokenPayload = {\r\n        userId: '1',\r\n        email: 'test@example.com',\r\n        role: 'USER',\r\n      };\r\n      \r\n      const storedToken = {\r\n        id: 'token_id',\r\n        token: refreshTokenValue,\r\n        userId: '1',\r\n      };\r\n      \r\n      const user = {\r\n        id: '1',\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        role: 'USER',\r\n        isActive: true,\r\n        tokenVersion: 1,\r\n      };\r\n      \r\n      mockJwt.verify.mockReturnValue(tokenPayload as never);\r\n      mockPrisma.refreshToken.findFirst.mockResolvedValue(storedToken as any);\r\n      mockPrisma.user.findUnique.mockResolvedValue(user as any);\r\n      mockJwt.sign.mockReturnValue('new_access_token' as never);\r\n      mockPrisma.refreshToken.delete.mockResolvedValue({} as any);\r\n      mockPrisma.refreshToken.create.mockResolvedValue({} as any);\r\n      \r\n      // Act\r\n      const result = await authService.refreshToken(refreshTokenValue);\r\n      \r\n      // Assert\r\n      expect(result).toHaveProperty('accessToken');\r\n      expect(result).toHaveProperty('refreshToken');\r\n      expect(mockJwt.verify).toHaveBeenCalledWith(refreshTokenValue, expect.any(String));\r\n      expect(mockPrisma.refreshToken.findFirst).toHaveBeenCalledWith({\r\n        where: {\r\n          token: refreshTokenValue,\r\n          userId: tokenPayload.userId\r\n        }\r\n      });\r\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\r\n        where: { id: tokenPayload.userId },\r\n      });\r\n    });\r\n\r\n    it('should throw error for invalid refresh token', async () => {\r\n      // Arrange\r\n      const invalidToken = 'invalid_token';\r\n      \r\n      mockJwt.verify.mockImplementation(() => {\r\n        throw new Error('Invalid token');\r\n      });\r\n      \r\n      // Act & Assert\r\n      await expect(authService.refreshToken(invalidToken))\r\n        .rejects\r\n        .toThrow();\r\n      expect(mockJwt.verify).toHaveBeenCalledWith(invalidToken, expect.any(String));\r\n    });\r\n\r\n    it('should throw error for user not found', async () => {\r\n      // Arrange\r\n      const refreshTokenValue = 'valid_refresh_token';\r\n      const tokenPayload = { userId: '999', tokenVersion: 1 };\r\n      \r\n      mockJwt.verify.mockReturnValue(tokenPayload as never);\r\n      mockPrisma.user.findUnique.mockResolvedValue(null);\r\n      \r\n      // Act & Assert\r\n      await expect(authService.refreshToken(refreshTokenValue))\r\n        .rejects\r\n        .toThrow();\r\n    });\r\n  });\r\n});"],"version":3}
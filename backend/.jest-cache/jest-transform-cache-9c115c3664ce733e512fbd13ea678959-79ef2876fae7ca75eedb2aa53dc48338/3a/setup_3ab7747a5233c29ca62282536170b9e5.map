{"file":"D:\\dev\\contabil\\contabil-site\\backend\\tests\\setup.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\tests\\setup.ts"],"sourcesContent":["/**\n * Configuração global para testes unitários\n * Contabilidade Igrejinha Backend\n */\n\nimport { jest } from '@jest/globals';\n\n// Configurar timezone para testes consistentes\nprocess.env.TZ = 'UTC';\n\n// Configurar variáveis de ambiente para testes\nprocess.env.NODE_ENV = 'test';\nprocess.env.JWT_SECRET = 'test-jwt-secret';\nprocess.env.JWT_EXPIRES_IN = '1h';\nprocess.env.JWT_REFRESH_SECRET = 'test-refresh-secret';\nprocess.env.JWT_REFRESH_EXPIRES_IN = '7d';\nprocess.env.DATABASE_URL = 'file:./test.db';\nprocess.env.REDIS_URL = 'redis://localhost:6379/1';\nprocess.env.LOG_LEVEL = 'error';\nprocess.env.UPLOAD_PATH = './test-uploads';\n\n// Mock de console para testes mais limpos\nglobal.console = {\n  ...console,\n  // Manter apenas erros importantes\n  log: jest.fn(),\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: console.error, // Manter erros visíveis\n};\n\n// Mock de setTimeout e setInterval para testes mais rápidos\njest.useFakeTimers();\n\n// Configurações globais de timeout\njest.setTimeout(30000);\n\n// Limpar todos os mocks após cada teste\nafterEach(() => {\n  jest.clearAllMocks();\n  jest.clearAllTimers();\n});\n\n// Restaurar timers reais após todos os testes\nafterAll(() => {\n  jest.useRealTimers();\n});\n\n// Configurar matchers customizados (se necessário)\nexpect.extend({\n  toBeValidDate(received: any) {\n    const pass = received instanceof Date && !isNaN(received.getTime());\n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid date`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid date`,\n        pass: false,\n      };\n    }\n  },\n  \n  toBeValidUUID(received: string) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    const pass = typeof received === 'string' && uuidRegex.test(received);\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid UUID`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid UUID`,\n        pass: false,\n      };\n    }\n  },\n});\n\n// Declarar tipos para os matchers customizados\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeValidDate(): R;\n      toBeValidUUID(): R;\n    }\n  }\n}\n\n// Configurar mocks globais para módulos externos\n// jest.mock('nodemailer', () => ({\n//   createTransport: jest.fn(() => ({\n//     sendMail: jest.fn().mockResolvedValue(\"Teste\" ),\n//     verify: jest.fn().mockResolvedValue(true),\n//   })),\n// }));\n\njest.mock('ioredis', () => {\n  const mockRedis = {\n    get: jest.fn(),\n    set: jest.fn(),\n    del: jest.fn(),\n    exists: jest.fn(),\n    expire: jest.fn(),\n    flushall: jest.fn(),\n    quit: jest.fn(),\n    // ping: jest.fn().mockResolvedValue('PONG'),\n    on: jest.fn(),\n    connect: jest.fn(),\n    disconnect: jest.fn(),\n  };\n  \n  return jest.fn(() => mockRedis);\n});\n\n// Mock do Winston para logs\njest.mock('winston', () => ({\n  createLogger: jest.fn(() => ({\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n  })),\n  format: {\n    combine: jest.fn(),\n    timestamp: jest.fn(),\n    errors: jest.fn(),\n    json: jest.fn(),\n    colorize: jest.fn(),\n    simple: jest.fn(),\n  },\n  transports: {\n    Console: jest.fn(),\n    File: jest.fn(),\n  },\n}));\n\n// Mock do multer para upload de arquivos\njest.mock('multer', () => {\n  const multer = () => ({\n    single: () => (req: any, res: any, next: any) => {\n      req.file = {\n        fieldname: 'file',\n        originalname: 'test.jpg',\n        encoding: '7bit',\n        mimetype: 'image/jpeg',\n        size: 1024,\n        filename: 'test-123.jpg',\n        path: '/tmp/test-123.jpg',\n      };\n      next();\n    },\n    array: () => (req: any, res: any, next: any) => {\n      req.files = [\n        {\n          fieldname: 'files',\n          originalname: 'test1.jpg',\n          encoding: '7bit',\n          mimetype: 'image/jpeg',\n          size: 1024,\n          filename: 'test1-123.jpg',\n          path: '/tmp/test1-123.jpg',\n        },\n      ];\n      next();\n    },\n  });\n  \n  multer.memoryStorage = jest.fn();\n  multer.diskStorage = jest.fn();\n  \n  return multer;\n});\n\n// Utilitários para testes\nexport const testUtils = {\n  // Criar um usuário de teste\n  createTestUser: () => ({\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    email: 'test@example.com',\n    name: 'Test User',\n    role: 'USER',\n    isActive: true,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  }),\n  \n  // Criar um token JWT de teste\n  createTestToken: () => 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token',\n  \n  // Criar dados de requisição de teste\n  createTestRequest: (overrides = {}) => ({\n    body: {},\n    params: {},\n    query: {},\n    headers: {},\n    user: testUtils.createTestUser(),\n    ...overrides,\n  }),\n  \n  // Criar dados de resposta de teste\n  createTestResponse: () => {\n    const res: any = {};\n    res.status = jest.fn().mockReturnValue(res);\n    res.json = jest.fn().mockReturnValue(res);\n    res.send = jest.fn().mockReturnValue(res);\n    res.cookie = jest.fn().mockReturnValue(res);\n    res.clearCookie = jest.fn().mockReturnValue(res);\n    return res;\n  },\n  \n  // Aguardar um tempo específico (para testes com timers)\n  waitFor: (ms: number) => new Promise(resolve => setTimeout(resolve, ms)),\n};\n\nconsole.log('🧪 Configuração de testes carregada');"],"version":3}
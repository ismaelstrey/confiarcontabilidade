{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\__tests__\\cache.test.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\__tests__\\cache.test.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport {\r\n  cacheMiddleware,\r\n  userCacheMiddleware,\r\n  publicCacheMiddleware,\r\n  articleCacheMiddleware,\r\n  invalidateCacheMiddleware,\r\n  invalidateUserCacheMiddleware,\r\n  invalidatePublicCacheMiddleware,\r\n  invalidateArticleCacheMiddleware\r\n} from '../cache';\r\nimport { cacheService } from '../../services/cacheService';\r\nimport logger from '../../utils/logger';\r\n\r\n// Mock do cacheService\r\njest.mock('../../services/cacheService', () => ({\r\n  cacheService: {\r\n    get: jest.fn(),\r\n    set: jest.fn(),\r\n    delPattern: jest.fn(),\r\n  },\r\n}));\r\n\r\n// Mock do logger\r\njest.mock('../../utils/logger', () => ({\r\n  info: jest.fn(),\r\n  warn: jest.fn(),\r\n  error: jest.fn(),\r\n  debug: jest.fn(),\r\n}));\r\n\r\nconst mockCacheService = cacheService as jest.Mocked<typeof cacheService>;\r\nconst mockLogger = logger as jest.Mocked<typeof logger>;\r\n\r\ndescribe('Cache Middleware', () => {\r\n  let mockReq: Partial<Request>;\r\n  let mockRes: Partial<Response>;\r\n  let mockNext: NextFunction;\r\n  let jsonSpy: jest.SpyInstance;\r\n  let onSpy: jest.SpyInstance;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n\r\n    mockReq = {\r\n      method: 'GET',\r\n      originalUrl: '/api/v1/test',\r\n      query: {},\r\n      params: {},\r\n      user: { id: '123', email: 'test@example.com', role: 'USER' }\r\n    } as any;\r\n\r\n    jsonSpy = jest.fn();\r\n    onSpy = jest.fn();\r\n\r\n    mockRes = {\r\n      json: jsonSpy,\r\n      on: onSpy,\r\n      statusCode: 200\r\n    } as any;\r\n\r\n    mockNext = jest.fn();\r\n  });\r\n\r\n  describe('cacheMiddleware', () => {\r\n    it('should return cached data when available', async () => {\r\n      const cachedData = { message: 'cached response' };\r\n      mockCacheService.get.mockResolvedValue(cachedData);\r\n\r\n      const middleware = cacheMiddleware();\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).toHaveBeenCalled();\r\n      expect(jsonSpy).toHaveBeenCalledWith(cachedData);\r\n      expect(mockNext).not.toHaveBeenCalled();\r\n      expect(mockLogger.debug).toHaveBeenCalledWith(expect.stringContaining('Cache hit'));\r\n    });\r\n\r\n    it('should proceed to next middleware when cache miss', async () => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n\r\n      const middleware = cacheMiddleware();\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).toHaveBeenCalled();\r\n      expect(jsonSpy).not.toHaveBeenCalled();\r\n      expect(mockNext).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should skip cache for non-GET requests', async () => {\r\n      mockReq.method = 'POST';\r\n\r\n      const middleware = cacheMiddleware();\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).not.toHaveBeenCalled();\r\n      expect(mockNext).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should skip cache when skipCache condition is true', async () => {\r\n      const middleware = cacheMiddleware({\r\n        skipCache: () => true\r\n      });\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).not.toHaveBeenCalled();\r\n      expect(mockNext).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should use custom key generator', async () => {\r\n      const customKey = 'custom:key';\r\n      mockCacheService.get.mockResolvedValue(null);\r\n\r\n      const middleware = cacheMiddleware({\r\n        keyGenerator: () => customKey\r\n      });\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).toHaveBeenCalledWith(customKey);\r\n    });\r\n\r\n    it('should handle cache errors gracefully', async () => {\r\n      const error = new Error('Cache error');\r\n      mockCacheService.get.mockRejectedValue(error);\r\n\r\n      const middleware = cacheMiddleware();\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockLogger.error).toHaveBeenCalledWith('Cache middleware error:', error);\r\n      expect(mockNext).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should cache response data on finish event', async () => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      const responseData = { message: 'response data' };\r\n\r\n      // Mock do comportamento do res.json\r\n      jsonSpy.mockImplementation(function(data) {\r\n        return data;\r\n      });\r\n\r\n      // Mock do comportamento do res.on\r\n      onSpy.mockImplementation((event, callback) => {\r\n        if (event === 'finish') {\r\n          // Simula o evento finish sendo chamado\r\n          setTimeout(() => callback(), 0);\r\n        }\r\n      });\r\n\r\n      const middleware = cacheMiddleware({ ttl: 600 });\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(onSpy).toHaveBeenCalledWith('finish', expect.any(Function));\r\n    });\r\n  });\r\n\r\n  describe('userCacheMiddleware', () => {\r\n    it('should generate user-specific cache key', async () => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      mockReq.user = { id: '456', email: 'test@example.com', role: 'user' };\r\n\r\n      const middleware = userCacheMiddleware(300);\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).toHaveBeenCalledWith(\r\n        expect.stringContaining('user:456:')\r\n      );\r\n    });\r\n\r\n    it('should handle anonymous users', async () => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      delete mockReq.user;\r\n\r\n      const middleware = userCacheMiddleware();\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).toHaveBeenCalledWith(\r\n        expect.stringContaining('user:anonymous:')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('publicCacheMiddleware', () => {\r\n    it('should generate public cache key', async () => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      mockReq.query = { page: '1', limit: '10' };\r\n\r\n      const middleware = publicCacheMiddleware(1800);\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).toHaveBeenCalledWith(\r\n        expect.stringContaining('public:')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('articleCacheMiddleware', () => {\r\n    it('should generate article cache key with slug', async () => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      mockReq.params = { slug: 'test-article' };\r\n\r\n      const middleware = articleCacheMiddleware(3600);\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).toHaveBeenCalledWith(\r\n        expect.stringContaining('article:test-article:')\r\n      );\r\n    });\r\n\r\n    it('should generate article cache key with id', async () => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      mockReq.params = { id: '123' };\r\n\r\n      const middleware = articleCacheMiddleware();\r\n      await middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockCacheService.get).toHaveBeenCalledWith(\r\n        expect.stringContaining('article:123:')\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('invalidateCacheMiddleware', () => {\r\n    it('should invalidate cache patterns on successful response', async () => {\r\n      const patterns = ['user:*', 'public:*'];\r\n      mockRes.statusCode = 200;\r\n      mockCacheService.delPattern.mockResolvedValue(undefined);\r\n\r\n      const middleware = invalidateCacheMiddleware(patterns);\r\n      middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(onSpy).toHaveBeenCalledWith('finish', expect.any(Function));\r\n\r\n      // Simula o evento 'finish'\r\n      const finishCallback = onSpy.mock.calls.find(call => call[0] === 'finish')?.[1];\r\n      if (finishCallback) {\r\n        await finishCallback();\r\n      }\r\n\r\n      expect(mockCacheService.delPattern).toHaveBeenCalledTimes(patterns.length);\r\n      patterns.forEach(pattern => {\r\n        expect(mockCacheService.delPattern).toHaveBeenCalledWith(pattern);\r\n      });\r\n    });\r\n\r\n    it('should not invalidate cache on error response', async () => {\r\n      const patterns = ['user:*', 'public:*'];\r\n      mockRes.statusCode = 500;\r\n      mockCacheService.delPattern.mockResolvedValue(undefined);\r\n\r\n      const middleware = invalidateCacheMiddleware(patterns);\r\n      middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      // Simula o evento 'finish'\r\n      const finishCallback = onSpy.mock.calls.find(call => call[0] === 'finish')?.[1];\r\n      if (finishCallback) {\r\n        await finishCallback();\r\n      }\r\n\r\n      expect(mockCacheService.delPattern).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('invalidateUserCacheMiddleware', () => {\r\n    it('should invalidate user cache with default pattern', async () => {\r\n      mockRes.statusCode = 200;\r\n      mockCacheService.delPattern.mockResolvedValue(undefined);\r\n\r\n      const middleware = invalidateUserCacheMiddleware();\r\n      middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      // Simula o evento 'finish'\r\n      const finishCallback = onSpy.mock.calls.find(call => call[0] === 'finish')?.[1];\r\n      if (finishCallback) {\r\n        await finishCallback();\r\n      }\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(mockCacheService.delPattern).toHaveBeenCalledWith('user:*');\r\n    });\r\n\r\n    it('should invalidate user cache with custom getUserId', async () => {\r\n      mockRes.statusCode = 200;\r\n      const getUserId = (req: Request) => '789';\r\n      mockCacheService.delPattern.mockResolvedValue(undefined);\r\n\r\n      const middleware = invalidateUserCacheMiddleware(getUserId);\r\n      middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      // Simula o evento 'finish'\r\n      const finishCallback = onSpy.mock.calls.find(call => call[0] === 'finish')?.[1];\r\n      if (finishCallback) {\r\n        await finishCallback();\r\n      }\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(mockCacheService.delPattern).toHaveBeenCalledWith('user:789:*');\r\n    });\r\n  });\r\n\r\n  describe('invalidatePublicCacheMiddleware', () => {\r\n    it('should invalidate public cache', async () => {\r\n      mockRes.statusCode = 200;\r\n      mockCacheService.delPattern.mockResolvedValue(undefined);\r\n\r\n      const middleware = invalidatePublicCacheMiddleware();\r\n      middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      // Simula o evento 'finish'\r\n      const finishCallback = onSpy.mock.calls.find(call => call[0] === 'finish')?.[1];\r\n      if (finishCallback) {\r\n        await finishCallback();\r\n      }\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(mockCacheService.delPattern).toHaveBeenCalledWith('public:*');\r\n    });\r\n  });\r\n\r\n  describe('invalidateArticleCacheMiddleware', () => {\r\n    it('should invalidate article cache', async () => {\r\n      mockRes.statusCode = 200;\r\n      mockCacheService.delPattern.mockResolvedValue(undefined);\r\n\r\n      const middleware = invalidateArticleCacheMiddleware();\r\n      middleware(mockReq as Request, mockRes as Response, mockNext);\r\n\r\n      // Simula o evento 'finish'\r\n      const finishCallback = onSpy.mock.calls.find(call => call[0] === 'finish')?.[1];\r\n      if (finishCallback) {\r\n        await finishCallback();\r\n      }\r\n\r\n      expect(mockNext).toHaveBeenCalled();\r\n      expect(mockCacheService.delPattern).toHaveBeenCalledWith('article:*');\r\n    });\r\n  });\r\n});"],"version":3}
{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\authController.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\authController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { authService, RegisterData, LoginCredentials } from '../services/authService';\r\nimport { prisma } from '../server';\r\nimport logger from '../utils/logger';\r\n\r\n// Interface para refresh token\r\ninterface RefreshTokenData {\r\n  refreshToken: string;\r\n}\r\n\r\n/**\r\n * Controller responsável pela autenticação de usuários\r\n */\r\nexport class AuthController {\r\n  /**\r\n   * Registra um novo usuário no sistema\r\n   */\r\n  static async register(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const registerData: RegisterData = req.body;\r\n      \r\n      const result = await authService.register(registerData);\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Usuário registrado com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao registrar usuário', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('já existe')) {\r\n        statusCode = 409;\r\n      } else if (error.message.includes('obrigatórios') || \r\n                 error.message.includes('inválido') || \r\n                 error.message.includes('senha deve')) {\r\n        statusCode = 400;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza login do usuário\r\n   */\r\n  static async login(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const loginData: LoginCredentials = req.body;\r\n      \r\n      const result = await authService.login(loginData);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Login realizado com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao fazer login', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('não encontrado') || \r\n          error.message.includes('inválidas')) {\r\n        statusCode = 401;\r\n      } else if (error.message.includes('obrigatórios') || \r\n                 error.message.includes('inválido')) {\r\n        statusCode = 400;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza tokens usando refresh token\r\n   */\r\n  static async refreshToken(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { refreshToken }: RefreshTokenData = req.body;\r\n      \r\n      const result = await authService.refreshToken(refreshToken);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Tokens atualizados com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao atualizar tokens', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('obrigatório') || \r\n          error.message.includes('inválido') ||\r\n          error.message.includes('expirado')) {\r\n        statusCode = 401;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza logout do usuário\r\n   */\r\n  static async logout(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Em uma implementação mais robusta, você poderia:\r\n      // 1. Adicionar o token a uma blacklist\r\n      // 2. Invalidar refresh tokens no banco\r\n      // 3. Limpar sessões ativas\r\n      \r\n      const userId = (req as any).user?.id;\r\n      \r\n      if (userId) {\r\n        logger.info('Usuário fez logout', { userId });\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Logout realizado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer logout', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se o token é válido\r\n   */\r\n  static async verifyToken(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const user = (req as any).user;\r\n      \r\n      if (!user) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Token válido',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao verificar token', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solicita reset de senha\r\n   */\r\n  static async forgotPassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { email } = req.body;\r\n\r\n      if (!email) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Email é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar usuário\r\n      const user = await prisma.user.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      // Por segurança, sempre retornamos sucesso mesmo se o email não existir\r\n      if (user) {\r\n        // Aqui você implementaria o envio de email com token de reset\r\n        // Por enquanto, apenas logamos a ação\r\n        logger.info('Solicitação de reset de senha', {\r\n          userId: user.id,\r\n          email: user.email\r\n        });\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Se o email existir, você receberá instruções para reset da senha'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao solicitar reset de senha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém informações do usuário logado\r\n   */\r\n  static async getProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.id;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token de acesso inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const user = await authService.getUserById(userId);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil obtido com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao obter perfil', { error: error.message });\r\n      \r\n      let statusCode = 500;\r\n      if (error.message.includes('não encontrado')) {\r\n        statusCode = 404;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Altera senha do usuário\r\n   */\r\n  static async changePassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.id;\r\n      const { currentPassword, newPassword } = req.body;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token de acesso inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      await authService.changePassword(userId, currentPassword, newPassword);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Senha alterada com sucesso'\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao alterar senha', { error: error.message });\r\n      \r\n      let statusCode = 500;\r\n      if (error.message.includes('obrigatórios') || \r\n          error.message.includes('senha deve')) {\r\n        statusCode = 400;\r\n      } else if (error.message.includes('atual incorreta')) {\r\n        statusCode = 401;\r\n      } else if (error.message.includes('não encontrado')) {\r\n        statusCode = 404;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthController;"],"version":3}
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Iniciando otimiza√ß√£o de build...');

// Fun√ß√£o para executar comandos
function runCommand(command, description) {
  console.log(`\nüì¶ ${description}...`);
  try {
    execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ ${description} conclu√≠do!`);
  } catch (error) {
    console.error(`‚ùå Erro em ${description}:`, error.message);
    process.exit(1);
  }
}

// Fun√ß√£o para verificar se um arquivo existe
function fileExists(filePath) {
  return fs.existsSync(filePath);
}

// Fun√ß√£o para ler arquivo JSON
function readJsonFile(filePath) {
  try {
    return JSON.parse(fs.readFileSync(filePath, 'utf8'));
  } catch (error) {
    console.error(`Erro ao ler ${filePath}:`, error.message);
    return null;
  }
}

// Fun√ß√£o para escrever arquivo JSON
function writeJsonFile(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    return true;
  } catch (error) {
    console.error(`Erro ao escrever ${filePath}:`, error.message);
    return false;
  }
}

// Verificar depend√™ncias
console.log('\nüîç Verificando depend√™ncias...');
const packageJsonPath = path.join(process.cwd(), 'package.json');
if (!fileExists(packageJsonPath)) {
  console.error('‚ùå package.json n√£o encontrado!');
  process.exit(1);
}

const packageJson = readJsonFile(packageJsonPath);
if (!packageJson) {
  console.error('‚ùå Erro ao ler package.json!');
  process.exit(1);
}

// Verificar se √© um projeto Next.js
if (!packageJson.dependencies?.next && !packageJson.devDependencies?.next) {
  console.error('‚ùå Este n√£o parece ser um projeto Next.js!');
  process.exit(1);
}

console.log('‚úÖ Projeto Next.js detectado!');

// Limpar cache e builds anteriores
runCommand('npm run clean || rm -rf .next out node_modules/.cache', 'Limpando cache e builds anteriores');

// Instalar depend√™ncias (se necess√°rio)
if (!fileExists(path.join(process.cwd(), 'node_modules'))) {
  runCommand('npm ci', 'Instalando depend√™ncias');
}

// Verificar e otimizar package.json
console.log('\nüîß Otimizando configura√ß√µes...');

// Adicionar scripts de otimiza√ß√£o se n√£o existirem
const optimizedScripts = {
  ...packageJson.scripts,
  'build:analyze': 'cross-env ANALYZE=true npm run build',
  'build:prod': 'cross-env NODE_ENV=production npm run build',
  'start:prod': 'cross-env NODE_ENV=production npm start',
  'clean': 'rm -rf .next out node_modules/.cache',
  'type-check': 'tsc --noEmit',
  'lint:fix': 'next lint --fix',
  'format': 'prettier --write "**/*.{js,jsx,ts,tsx,json,md}"',
};

if (JSON.stringify(packageJson.scripts) !== JSON.stringify(optimizedScripts)) {
  packageJson.scripts = optimizedScripts;
  writeJsonFile(packageJsonPath, packageJson);
  console.log('‚úÖ Scripts otimizados adicionados ao package.json');
}

// Verificar TypeScript
if (fileExists(path.join(process.cwd(), 'tsconfig.json'))) {
  runCommand('npm run type-check', 'Verificando tipos TypeScript');
}

// Executar linting
runCommand('npm run lint:fix', 'Executando linting e corre√ß√µes autom√°ticas');

// Build de produ√ß√£o
runCommand('npm run build:prod', 'Executando build de produ√ß√£o otimizado');

// An√°lise de bundle (se dispon√≠vel)
if (process.env.ANALYZE === 'true') {
  console.log('\nüìä Executando an√°lise de bundle...');
  runCommand('npm run build:analyze', 'Analisando tamanho do bundle');
}

// Verificar tamanho dos arquivos gerados
console.log('\nüìè Verificando tamanho dos arquivos gerados...');
const nextDir = path.join(process.cwd(), '.next');
if (fileExists(nextDir)) {
  try {
    const stats = execSync('du -sh .next', { encoding: 'utf8' });
    console.log(`üì¶ Tamanho total do build: ${stats.trim()}`);
  } catch (error) {
    console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel calcular o tamanho do build');
  }
}

// Verificar arquivos est√°ticos
const staticDir = path.join(process.cwd(), '.next/static');
if (fileExists(staticDir)) {
  try {
    const staticStats = execSync('find .next/static -name "*.js" -o -name "*.css" | wc -l', { encoding: 'utf8' });
    console.log(`üìÑ Arquivos est√°ticos gerados: ${staticStats.trim()}`);
  } catch (error) {
    console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel contar arquivos est√°ticos');
  }
}

// Gerar relat√≥rio de otimiza√ß√£o
console.log('\nüìã Gerando relat√≥rio de otimiza√ß√£o...');
const report = {
  timestamp: new Date().toISOString(),
  nodeVersion: process.version,
  npmVersion: execSync('npm --version', { encoding: 'utf8' }).trim(),
  nextVersion: packageJson.dependencies?.next || packageJson.devDependencies?.next,
  buildSuccess: true,
  optimizations: [
    'Cache limpo',
    'Depend√™ncias atualizadas',
    'TypeScript verificado',
    'Linting executado',
    'Build de produ√ß√£o conclu√≠do',
    'PWA configurado',
    'SEO otimizado',
    'Performance monitorada',
  ],
};

writeJsonFile(path.join(process.cwd(), 'build-report.json'), report);

// Dicas de otimiza√ß√£o
console.log('\nüí° Dicas de otimiza√ß√£o:');
console.log('‚Ä¢ Use `npm run start:prod` para testar em modo produ√ß√£o');
console.log('‚Ä¢ Execute `npm run build:analyze` para analisar o bundle');
console.log('‚Ä¢ Considere usar um CDN para assets est√°ticos');
console.log('‚Ä¢ Configure compress√£o gzip/brotli no servidor');
console.log('‚Ä¢ Monitore Core Web Vitals em produ√ß√£o');

// Verificar se h√° atualiza√ß√µes de depend√™ncias
console.log('\nüîÑ Verificando atualiza√ß√µes dispon√≠veis...');
try {
  execSync('npm outdated', { stdio: 'inherit' });
} catch (error) {
  console.log('‚úÖ Todas as depend√™ncias est√£o atualizadas!');
}

console.log('\nüéâ Otimiza√ß√£o de build conclu√≠da com sucesso!');
console.log('\nüìä Pr√≥ximos passos:');
console.log('1. Teste o build localmente: npm run start:prod');
console.log('2. Execute testes de performance');
console.log('3. Configure monitoramento em produ√ß√£o');
console.log('4. Implante em seu servidor/CDN');

console.log('\nüöÄ Seu site est√° pronto para produ√ß√£o!');
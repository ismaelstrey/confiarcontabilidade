{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\requestLogger.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\requestLogger.ts"],"sourcesContent":["import type { Request, Response, NextFunction } from 'express';\r\nimport { logger } from './logger';\r\n\r\n// Interface para dados da requisição\r\ninterface RequestLogData {\r\n  method: string;\r\n  url: string;\r\n  ip: string;\r\n  userAgent?: string | undefined;\r\n  userId?: string;\r\n  statusCode?: number;\r\n  responseTime?: number;\r\n  contentLength?: number | undefined;\r\n  referer?: string | undefined;\r\n}\r\n\r\n// Middleware para logging de requisições\r\nexport const requestLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  const startTime = Date.now();\r\n  \r\n  // Capturar dados da requisição\r\n  const requestData: RequestLogData = {\r\n    method: req.method,\r\n    url: req.originalUrl || req.url,\r\n    ip: req.ip || req.socket.remoteAddress || 'unknown',\r\n    userAgent: req.get('User-Agent'),\r\n    referer: req.get('Referer'),\r\n  };\r\n\r\n  // Capturar userId se disponível (após autenticação)\r\n  if ((req as any).user?.id) {\r\n    requestData.userId = (req as any).user.id;\r\n  }\r\n\r\n  // Override do método res.end para capturar dados da resposta\r\n  const originalEnd = res.end;\r\n  res.end = function (chunk?: any, encoding?: BufferEncoding | (() => void), callback?: () => void) {\r\n    const endTime = Date.now();\r\n    const responseTime = endTime - startTime;\r\n    \r\n    // Dados da resposta\r\n    requestData.statusCode = res.statusCode;\r\n    requestData.responseTime = responseTime;\r\n    const contentLengthHeader = res.get('Content-Length');\r\n    requestData.contentLength = contentLengthHeader ? parseInt(contentLengthHeader, 10) : undefined;\r\n\r\n    // Determinar nível do log baseado no status code\r\n    let logLevel: 'info' | 'warn' | 'error' = 'info';\r\n    if (res.statusCode >= 400 && res.statusCode < 500) {\r\n      logLevel = 'warn';\r\n    } else if (res.statusCode >= 500) {\r\n      logLevel = 'error';\r\n    }\r\n\r\n    // Criar mensagem de log\r\n    const message = `${requestData.method} ${requestData.url} ${requestData.statusCode} - ${responseTime}ms`;\r\n    \r\n    // Log da requisição\r\n    logger.log(logLevel, message, {\r\n      type: 'request',\r\n      ...requestData,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    // Log adicional para requisições lentas (> 1 segundo)\r\n    if (responseTime > 1000) {\r\n      logger.warn('Slow Request Detected', {\r\n        type: 'performance',\r\n        ...requestData,\r\n        threshold: '1000ms',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Log adicional para erros 5xx\r\n    if (res.statusCode >= 500) {\r\n      logger.error('Server Error Response', {\r\n        type: 'server_error',\r\n        ...requestData,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Chamar o método original\r\n    return (originalEnd as any).call(this, chunk, encoding, callback);\r\n  };\r\n\r\n  // Log inicial da requisição (apenas em modo debug)\r\n  if (process.env.DEBUG === 'true') {\r\n    logger.debug('Incoming Request', {\r\n      type: 'request_start',\r\n      method: requestData.method,\r\n      url: requestData.url,\r\n      ip: requestData.ip,\r\n      userAgent: requestData.userAgent,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  }\r\n\r\n  next();\r\n};\r\n\r\n// Middleware para logging de body da requisição (apenas em desenvolvimento)\r\nexport const requestBodyLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  if (process.env.NODE_ENV === 'development' && process.env.DEBUG === 'true') {\r\n    // Não logar senhas e dados sensíveis\r\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'authorization'];\r\n    const body = { ...req.body };\r\n    \r\n    // Remover campos sensíveis\r\n    Object.keys(body).forEach(key => {\r\n      if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {\r\n        body[key] = '[REDACTED]';\r\n      }\r\n    });\r\n\r\n    if (Object.keys(body).length > 0) {\r\n      logger.debug('Request Body', {\r\n        type: 'request_body',\r\n        method: req.method,\r\n        url: req.originalUrl || req.url,\r\n        body,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\n// Middleware para logging de headers específicos\r\nexport const requestHeaderLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  if (process.env.NODE_ENV === 'development' && process.env.DEBUG === 'true') {\r\n    const importantHeaders = {\r\n      'content-type': req.get('Content-Type'),\r\n      'accept': req.get('Accept'),\r\n      'authorization': req.get('Authorization') ? '[PRESENT]' : '[NOT_PRESENT]',\r\n      'x-forwarded-for': req.get('X-Forwarded-For'),\r\n      'x-real-ip': req.get('X-Real-IP'),\r\n    };\r\n\r\n    // Filtrar headers undefined\r\n    const filteredHeaders = Object.fromEntries(\r\n      Object.entries(importantHeaders).filter(([, value]) => value !== undefined)\r\n    );\r\n\r\n    if (Object.keys(filteredHeaders).length > 0) {\r\n      logger.debug('Request Headers', {\r\n        type: 'request_headers',\r\n        method: req.method,\r\n        url: req.originalUrl || req.url,\r\n        headers: filteredHeaders,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\nexport default requestLogger;"],"version":3}
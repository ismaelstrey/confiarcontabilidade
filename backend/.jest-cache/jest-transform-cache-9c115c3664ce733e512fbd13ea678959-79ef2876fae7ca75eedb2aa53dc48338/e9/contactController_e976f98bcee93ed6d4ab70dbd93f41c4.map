{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\contactController.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\contactController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de contato\r\ninterface ContactData {\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  subject: string;\r\n  message: string;\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface ContactFilters {\r\n  search?: string;\r\n  status?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'name' | 'subject';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n// Interface para resposta de contato\r\ninterface ContactReplyData {\r\n  message: string;\r\n}\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de contatos\r\n */\r\nexport class ContactController {\r\n  /**\r\n   * Cria um novo contato (formulário público)\r\n   */\r\n  static async createContact(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { name, email, phone, subject, message }: ContactData = req.body;\r\n\r\n      // Validações básicas\r\n      if (!name || !email || !subject || !message) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nome, email, assunto e mensagem são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar formato do email\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(email)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Formato de email inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tamanho da mensagem\r\n      if (message.length < 10) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A mensagem deve ter pelo menos 10 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (message.length > 5000) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A mensagem não pode exceder 5000 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar telefone se fornecido\r\n      if (phone) {\r\n        const phoneRegex = /^[\\d\\s\\(\\)\\+\\-\\.]{10,}$/;\r\n        if (!phoneRegex.test(phone.replace(/\\s/g, ''))) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Formato de telefone inválido'\r\n          });\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Verificar rate limiting (máximo 3 contatos por email por hora)\r\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\r\n      const recentContacts = await prisma.contact.count({\r\n        where: {\r\n          email,\r\n          createdAt: {\r\n            gte: oneHourAgo\r\n          }\r\n        }\r\n      });\r\n\r\n      if (recentContacts >= 3) {\r\n        res.status(429).json({\r\n          success: false,\r\n          message: 'Muitas mensagens enviadas. Tente novamente em uma hora.'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Criar contato\r\n      const contact = await prisma.contact.create({\r\n        data: {\r\n          name: name.trim(),\r\n          email: email.toLowerCase().trim(),\r\n          phone: phone?.trim() || null,\r\n          subject: subject.trim(),\r\n          message: message.trim(),\r\n          status: 'PENDING'\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Novo contato recebido', {\r\n        contactId: contact.id,\r\n        email: contact.email,\r\n        subject: contact.subject\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Mensagem enviada com sucesso! Entraremos em contato em breve.',\r\n        data: {\r\n          id: contact.id,\r\n          createdAt: contact.createdAt\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar contato', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor. Tente novamente mais tarde.'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista todos os contatos com paginação e filtros (admin)\r\n   */\r\n  static async getContacts(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        search,\r\n        status,\r\n        dateFrom,\r\n        dateTo,\r\n        page = 1,\r\n        limit = 10,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: ContactFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { name: { contains: search, mode: 'insensitive' } },\r\n          { email: { contains: search, mode: 'insensitive' } },\r\n          { subject: { contains: search, mode: 'insensitive' } },\r\n          { message: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (status) {\r\n        where.status = status;\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.createdAt = {};\r\n        if (dateFrom) {\r\n          where.createdAt.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.createdAt.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar contatos\r\n      const [contacts, total] = await Promise.all([\r\n        prisma.contact.findMany({\r\n          where,\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.contact.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      // Estatísticas\r\n      const stats = await prisma.contact.groupBy({\r\n        by: ['status'],\r\n        _count: true\r\n      });\r\n\r\n      const statistics = {\r\n        total,\r\n        pending: stats.find(s => s.status === 'PENDING')?._count || 0,\r\n        inProgress: stats.find(s => s.status === 'IN_PROGRESS')?._count || 0,\r\n        resolved: stats.find(s => s.status === 'RESOLVED')?._count || 0,\r\n        closed: stats.find(s => s.status === 'CLOSED')?._count || 0\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contatos listados com sucesso',\r\n        data: {\r\n          contacts,\r\n          statistics,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar contatos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um contato por ID (admin)\r\n   */\r\n  static async getContactById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      // Removido markAsRead pois não existe no modelo\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!contact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Funcionalidade de marcar como lido removida pois não existe no modelo\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contato encontrado',\r\n        data: { contact }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar contato', { error, contactId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n/**\r\n   * Atualiza status do contato\r\n   */\r\n  static async updateContactStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { status } = req.body;\r\n\r\n      // Validar status\r\n      const validStatuses = ['PENDING', 'IN_PROGRESS', 'RESOLVED', 'CLOSED'];\r\n      if (!status || !validStatuses.includes(status)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Status deve ser: PENDING, IN_PROGRESS, RESOLVED ou CLOSED'\r\n        });\r\n        return;\r\n      }\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n      // Verificar se o contato existe\r\n      const existingContact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingContact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar status\r\n      const updatedContact = await prisma.contact.update({\r\n        where: { id },\r\n        data: {\r\n          status,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      logger.info('Status do contato atualizado', {\r\n        contactId: id,\r\n        oldStatus: existingContact.status,\r\n        newStatus: status,\r\n        updatedBy: req.user?.id || 'system'\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Status atualizado com sucesso',\r\n        data: {\r\n          contact: {\r\n            id: updatedContact.id,\r\n            status: updatedContact.status,\r\n            updatedAt: updatedContact.updatedAt\r\n          }\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar status do contato:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marca contato como lido\r\n   */\r\n  static async markAsRead(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!contact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (contact.status !== 'PENDING') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Contato já foi processado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      await prisma.contact.update({\r\n        where: { id },\r\n        data: {\r\n          status: 'IN_PROGRESS'\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Contato marcado como lido', {\r\n        contactId: id,\r\n        readBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contato marcado como lido'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao marcar contato como lido', { error, contactId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marca múltiplos contatos como lidos (admin)\r\n   */\r\n  static async markMultipleAsRead(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { contactIds }: { contactIds: string[] } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!contactIds || !Array.isArray(contactIds) || contactIds.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Lista de IDs de contatos é obrigatória'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (contactIds.length > 100) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Máximo de 100 contatos por vez'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const result = await prisma.contact.updateMany({\r\n        where: {\r\n          id: { in: contactIds },\r\n          status: 'PENDING'\r\n        },\r\n        data: {\r\n          status: 'IN_PROGRESS'\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Múltiplos contatos marcados como lidos', {\r\n        count: result.count,\r\n        readBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${result.count} contatos marcados como lidos`,\r\n        data: { updatedCount: result.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao marcar múltiplos contatos como lidos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Responde a um contato (admin)\r\n   */\r\n  static async replyToContact(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { message }: ContactReplyData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!message) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Mensagem de resposta é obrigatória'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (message.length < 10) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A resposta deve ter pelo menos 10 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!contact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar contato com resposta\r\n      const updatedContact = await prisma.contact.update({\r\n        where: { id },\r\n        data: {\r\n          status: 'RESOLVED'\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Resposta enviada para contato', {\r\n        contactId: id,\r\n        repliedBy: currentUser.id,\r\n        recipientEmail: contact.email\r\n      });\r\n\r\n      // TODO: Implementar envio de email real aqui\r\n      // await emailService.sendReply({\r\n      //   to: contact.email,\r\n      //   message: message,\r\n      //   originalMessage: contact.message\r\n      // });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Resposta enviada com sucesso',\r\n        data: {\r\n          contact: {\r\n            id: updatedContact.id,\r\n            status: updatedContact.status\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao responder contato', { error, contactId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um contato (admin)\r\n   */\r\n  static async deleteContact(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!contact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      await prisma.contact.delete({\r\n        where: { id }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Contato deletado', {\r\n        contactId: id,\r\n        email: contact.email,\r\n        subject: contact.subject,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contato deletado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar contato', { error, contactId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove múltiplos contatos (admin)\r\n   */\r\n  static async deleteMultipleContacts(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { contactIds }: { contactIds: string[] } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!contactIds || !Array.isArray(contactIds) || contactIds.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Lista de IDs de contatos é obrigatória'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (contactIds.length > 100) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Máximo de 100 contatos por vez'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const result = await prisma.contact.deleteMany({\r\n        where: {\r\n          id: { in: contactIds }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Múltiplos contatos deletados', {\r\n        count: result.count,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${result.count} contatos deletados com sucesso`,\r\n        data: { deletedCount: result.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar múltiplos contatos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém estatísticas de contatos (admin)\r\n   */\r\n  static async getContactStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const [totalStats, periodStats, dailyStats] = await Promise.all([\r\n        // Estatísticas gerais\r\n        prisma.contact.groupBy({\r\n          by: ['status'],\r\n          _count: true\r\n        }),\r\n        // Estatísticas do período\r\n        prisma.contact.groupBy({\r\n          by: ['status'],\r\n          where: {\r\n            createdAt: { gte: dateLimit }\r\n          },\r\n          _count: true\r\n        }),\r\n        // Estatísticas diárias dos últimos 7 dias\r\n        prisma.$queryRaw`\r\n          SELECT \r\n            DATE(createdAt) as date,\r\n            COUNT(*) as count\r\n          FROM Contact \r\n          WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n          GROUP BY DATE(createdAt)\r\n          ORDER BY date DESC\r\n        `\r\n      ]);\r\n\r\n      const total = await prisma.contact.count();\r\n      const totalInPeriod = await prisma.contact.count({\r\n        where: { createdAt: { gte: dateLimit } }\r\n      });\r\n\r\n      const statistics = {\r\n        total: {\r\n          all: total,\r\n          pending: totalStats.find(s => s.status === 'PENDING')?._count || 0,\r\n          inProgress: totalStats.find(s => s.status === 'IN_PROGRESS')?._count || 0,\r\n          resolved: totalStats.find(s => s.status === 'RESOLVED')?._count || 0,\r\n          closed: totalStats.find(s => s.status === 'CLOSED')?._count || 0\r\n        },\r\n        period: {\r\n          days: periodDays,\r\n          all: totalInPeriod,\r\n          pending: periodStats.find(s => s.status === 'PENDING')?._count || 0,\r\n          inProgress: periodStats.find(s => s.status === 'IN_PROGRESS')?._count || 0,\r\n          resolved: periodStats.find(s => s.status === 'RESOLVED')?._count || 0,\r\n          closed: periodStats.find(s => s.status === 'CLOSED')?._count || 0\r\n        },\r\n        daily: dailyStats\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estatísticas obtidas com sucesso',\r\n        data: { statistics }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estatísticas de contatos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default ContactController;"],"version":3}
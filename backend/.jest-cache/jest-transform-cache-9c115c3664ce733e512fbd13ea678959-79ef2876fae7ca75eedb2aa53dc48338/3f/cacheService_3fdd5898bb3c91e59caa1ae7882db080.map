{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\cacheService.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\cacheService.ts"],"sourcesContent":["import Redis from 'ioredis';\r\nimport { config } from '../config/config';\r\nimport logger from '../utils/logger';\r\n\r\n/**\r\n * Serviço de cache usando Redis\r\n * Gerencia operações de cache para melhorar performance da aplicação\r\n */\r\nclass CacheService {\r\n  private redis: Redis;\r\n  private isConnected: boolean = false;\r\n\r\n  constructor() {\r\n    this.redis = new Redis({\r\n      host: config.cache.redis.host,\r\n      port: config.cache.redis.port,\r\n      password: config.cache.redis.password || '',\r\n      db: config.cache.redis.db,\r\n      maxRetriesPerRequest: 3,\r\n      lazyConnect: true,\r\n    });\r\n\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Configura os listeners de eventos do Redis\r\n   */\r\n  private setupEventListeners(): void {\r\n    this.redis.on('connect', () => {\r\n      this.isConnected = true;\r\n      logger.info('Redis connected successfully');\r\n    });\r\n\r\n    this.redis.on('error', (error) => {\r\n      this.isConnected = false;\r\n      logger.error('Redis connection error:', error);\r\n    });\r\n\r\n    this.redis.on('close', () => {\r\n      this.isConnected = false;\r\n      logger.warn('Redis connection closed');\r\n    });\r\n\r\n    this.redis.on('reconnecting', () => {\r\n      logger.info('Redis reconnecting...');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Conecta ao Redis\r\n   */\r\n  async connect(): Promise<void> {\r\n    try {\r\n      await this.redis.connect();\r\n    } catch (error) {\r\n      logger.error('Failed to connect to Redis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Desconecta do Redis\r\n   */\r\n  async disconnect(): Promise<void> {\r\n    try {\r\n      await this.redis.disconnect();\r\n      this.isConnected = false;\r\n    } catch (error) {\r\n      logger.error('Failed to disconnect from Redis:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se o Redis está conectado\r\n   */\r\n  isRedisConnected(): boolean {\r\n    return this.isConnected && this.redis.status === 'ready';\r\n  }\r\n\r\n  /**\r\n   * Define um valor no cache\r\n   * @param key - Chave do cache\r\n   * @param value - Valor a ser armazenado\r\n   * @param ttl - Tempo de vida em segundos (opcional)\r\n   */\r\n  async set(key: string, value: any, ttl?: number): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        logger.warn('Redis not connected, skipping cache set');\r\n        return;\r\n      }\r\n\r\n      const serializedValue = JSON.stringify(value);\r\n      const cacheTtl = ttl || config.cache.ttl;\r\n\r\n      await this.redis.setex(key, cacheTtl, serializedValue);\r\n      logger.debug(`Cache set: ${key} (TTL: ${cacheTtl}s)`);\r\n    } catch (error) {\r\n      logger.error(`Failed to set cache for key ${key}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém um valor do cache\r\n   * @param key - Chave do cache\r\n   * @returns Valor do cache ou null se não encontrado\r\n   */\r\n  async get<T = any>(key: string): Promise<T | null> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        logger.warn('Redis not connected, skipping cache get');\r\n        return null;\r\n      }\r\n\r\n      const value = await this.redis.get(key);\r\n      if (!value) {\r\n        return null;\r\n      }\r\n\r\n      const parsedValue = JSON.parse(value);\r\n      logger.debug(`Cache hit: ${key}`);\r\n      return parsedValue;\r\n    } catch (error) {\r\n      logger.error(`Failed to get cache for key ${key}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um valor do cache\r\n   * @param key - Chave do cache\r\n   */\r\n  async del(key: string): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        logger.warn('Redis not connected, skipping cache delete');\r\n        return;\r\n      }\r\n\r\n      await this.redis.del(key);\r\n      logger.debug(`Cache deleted: ${key}`);\r\n    } catch (error) {\r\n      logger.error(`Failed to delete cache for key ${key}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove múltiplas chaves do cache\r\n   * @param keys - Array de chaves do cache\r\n   */\r\n  async delMany(keys: string[]): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected() || keys.length === 0) {\r\n        return;\r\n      }\r\n\r\n      await this.redis.del(...keys);\r\n      logger.debug(`Cache deleted: ${keys.join(', ')}`);\r\n    } catch (error) {\r\n      logger.error(`Failed to delete cache for keys ${keys.join(', ')}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove todas as chaves que correspondem ao padrão\r\n   * @param pattern - Padrão das chaves (ex: 'user:*')\r\n   */\r\n  async delPattern(pattern: string): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return;\r\n      }\r\n\r\n      const keys = await this.redis.keys(pattern);\r\n      if (keys.length > 0) {\r\n        await this.redis.del(...keys);\r\n        logger.debug(`Cache pattern deleted: ${pattern} (${keys.length} keys)`);\r\n      }\r\n    } catch (error) {\r\n      logger.error(`Failed to delete cache pattern ${pattern}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se uma chave existe no cache\r\n   * @param key - Chave do cache\r\n   * @returns True se a chave existe\r\n   */\r\n  async exists(key: string): Promise<boolean> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return false;\r\n      }\r\n\r\n      const result = await this.redis.exists(key);\r\n      return result === 1;\r\n    } catch (error) {\r\n      logger.error(`Failed to check cache existence for key ${key}:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Define o tempo de vida de uma chave\r\n   * @param key - Chave do cache\r\n   * @param ttl - Tempo de vida em segundos\r\n   */\r\n  async expire(key: string, ttl: number): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return;\r\n      }\r\n\r\n      await this.redis.expire(key, ttl);\r\n      logger.debug(`Cache TTL set: ${key} (${ttl}s)`);\r\n    } catch (error) {\r\n      logger.error(`Failed to set TTL for key ${key}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém o tempo de vida restante de uma chave\r\n   * @param key - Chave do cache\r\n   * @returns Tempo de vida em segundos (-1 se não tem TTL, -2 se não existe)\r\n   */\r\n  async ttl(key: string): Promise<number> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return -2;\r\n      }\r\n\r\n      return await this.redis.ttl(key);\r\n    } catch (error) {\r\n      logger.error(`Failed to get TTL for key ${key}:`, error);\r\n      return -2;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpa todo o cache\r\n   */\r\n  async flush(): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return;\r\n      }\r\n\r\n      await this.redis.flushdb();\r\n      logger.info('Cache flushed');\r\n    } catch (error) {\r\n      logger.error('Failed to flush cache:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém informações sobre o Redis\r\n   */\r\n  async info(): Promise<any> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return null;\r\n      }\r\n\r\n      const info = await this.redis.info();\r\n      return info;\r\n    } catch (error) {\r\n      logger.error('Failed to get Redis info:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Instância singleton do serviço de cache\r\nexport const cacheService = new CacheService();\r\n\r\n// Exportar a classe para testes\r\nexport { CacheService };"],"version":3}
99c0979f0c2b80e1c0d119a32e921d42
"use strict";

/* istanbul ignore next */
function cov_1bo5l6lcb9() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\authController.ts";
  var hash = "0026962c1511d071f0d17d22119840cdba54f801";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\authController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 32
        }
      },
      "4": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 56
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 37
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 60
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "8": {
        start: {
          line: 19,
          column: 33
        },
        end: {
          line: 19,
          column: 41
        }
      },
      "9": {
        start: {
          line: 20,
          column: 27
        },
        end: {
          line: 20,
          column: 81
        }
      },
      "10": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 25,
          column: 15
        }
      },
      "11": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 90
        }
      },
      "12": {
        start: {
          line: 30,
          column: 29
        },
        end: {
          line: 30,
          column: 32
        }
      },
      "13": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "14": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 33
        }
      },
      "15": {
        start: {
          line: 34,
          column: 17
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "16": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 33
        }
      },
      "17": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 42,
          column: 15
        }
      },
      "18": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "19": {
        start: {
          line: 50,
          column: 30
        },
        end: {
          line: 50,
          column: 38
        }
      },
      "20": {
        start: {
          line: 51,
          column: 27
        },
        end: {
          line: 51,
          column: 75
        }
      },
      "21": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "22": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 84
        }
      },
      "23": {
        start: {
          line: 61,
          column: 29
        },
        end: {
          line: 61,
          column: 32
        }
      },
      "24": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "25": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 33
        }
      },
      "26": {
        start: {
          line: 66,
          column: 17
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "27": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 33
        }
      },
      "28": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "29": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "30": {
        start: {
          line: 81,
          column: 37
        },
        end: {
          line: 81,
          column: 45
        }
      },
      "31": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 85
        }
      },
      "32": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 87,
          column: 15
        }
      },
      "33": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 89
        }
      },
      "34": {
        start: {
          line: 92,
          column: 29
        },
        end: {
          line: 92,
          column: 32
        }
      },
      "35": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "36": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 33
        }
      },
      "37": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 101,
          column: 15
        }
      },
      "38": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "39": {
        start: {
          line: 113,
          column: 27
        },
        end: {
          line: 113,
          column: 39
        }
      },
      "40": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "41": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 72
        }
      },
      "42": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "43": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 70
        }
      },
      "44": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 127,
          column: 15
        }
      },
      "45": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "46": {
        start: {
          line: 135,
          column: 25
        },
        end: {
          line: 135,
          column: 33
        }
      },
      "47": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "48": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 140,
          column: 19
        }
      },
      "49": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 23
        }
      },
      "50": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 147,
          column: 15
        }
      },
      "51": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 150,
          column: 73
        }
      },
      "52": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 154,
          column: 15
        }
      },
      "53": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "54": {
        start: {
          line: 162,
          column: 30
        },
        end: {
          line: 162,
          column: 38
        }
      },
      "55": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "56": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 167,
          column: 19
        }
      },
      "57": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 23
        }
      },
      "58": {
        start: {
          line: 171,
          column: 25
        },
        end: {
          line: 173,
          column: 14
        }
      },
      "59": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "60": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 181,
          column: 19
        }
      },
      "61": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 186,
          column: 15
        }
      },
      "62": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 82
        }
      },
      "63": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 193,
          column: 15
        }
      },
      "64": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "65": {
        start: {
          line: 201,
          column: 27
        },
        end: {
          line: 201,
          column: 39
        }
      },
      "66": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "67": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 206,
          column: 19
        }
      },
      "68": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 23
        }
      },
      "69": {
        start: {
          line: 209,
          column: 25
        },
        end: {
          line: 209,
          column: 76
        }
      },
      "70": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "71": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 85
        }
      },
      "72": {
        start: {
          line: 218,
          column: 29
        },
        end: {
          line: 218,
          column: 32
        }
      },
      "73": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "74": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 33
        }
      },
      "75": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 225,
          column: 15
        }
      },
      "76": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "77": {
        start: {
          line: 233,
          column: 27
        },
        end: {
          line: 233,
          column: 39
        }
      },
      "78": {
        start: {
          line: 234,
          column: 53
        },
        end: {
          line: 234,
          column: 61
        }
      },
      "79": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 241,
          column: 13
        }
      },
      "80": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 239,
          column: 19
        }
      },
      "81": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 23
        }
      },
      "82": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 97
        }
      },
      "83": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 246,
          column: 15
        }
      },
      "84": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 86
        }
      },
      "85": {
        start: {
          line: 250,
          column: 29
        },
        end: {
          line: 250,
          column: 32
        }
      },
      "86": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 260,
          column: 13
        }
      },
      "87": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 33
        }
      },
      "88": {
        start: {
          line: 255,
          column: 17
        },
        end: {
          line: 260,
          column: 13
        }
      },
      "89": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 256,
          column: 33
        }
      },
      "90": {
        start: {
          line: 258,
          column: 17
        },
        end: {
          line: 260,
          column: 13
        }
      },
      "91": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 259,
          column: 33
        }
      },
      "92": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 264,
          column: 15
        }
      },
      "93": {
        start: {
          line: 268,
          column: 0
        },
        end: {
          line: 268,
          column: 40
        }
      },
      "94": {
        start: {
          line: 269,
          column: 0
        },
        end: {
          line: 269,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 36
          },
          end: {
            line: 44,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 48
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 79
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 34
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 107
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 39
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 133
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 42
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 160
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 38
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 199
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 42
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 231
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 38,
            column: 13
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 17
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "5": {
        loc: {
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 36,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 34,
            column: 59
          }
        }, {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 50
          }
        }, {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 36,
            column: 52
          }
        }],
        line: 34
      },
      "6": {
        loc: {
          start: {
            line: 41,
            column: 25
          },
          end: {
            line: 41,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 25
          },
          end: {
            line: 41,
            column: 38
          }
        }, {
          start: {
            line: 41,
            column: 42
          },
          end: {
            line: 41,
            column: 68
          }
        }],
        line: 41
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        }, {
          start: {
            line: 66,
            column: 17
          },
          end: {
            line: 69,
            column: 13
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 16
          },
          end: {
            line: 63,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 16
          },
          end: {
            line: 62,
            column: 56
          }
        }, {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 51
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 66,
            column: 17
          },
          end: {
            line: 69,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 17
          },
          end: {
            line: 69,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "10": {
        loc: {
          start: {
            line: 66,
            column: 21
          },
          end: {
            line: 67,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 21
          },
          end: {
            line: 66,
            column: 59
          }
        }, {
          start: {
            line: 67,
            column: 16
          },
          end: {
            line: 67,
            column: 50
          }
        }],
        line: 66
      },
      "11": {
        loc: {
          start: {
            line: 72,
            column: 25
          },
          end: {
            line: 72,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 25
          },
          end: {
            line: 72,
            column: 38
          }
        }, {
          start: {
            line: 72,
            column: 42
          },
          end: {
            line: 72,
            column: 68
          }
        }],
        line: 72
      },
      "12": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "13": {
        loc: {
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 95,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 93,
            column: 53
          }
        }, {
          start: {
            line: 94,
            column: 16
          },
          end: {
            line: 94,
            column: 50
          }
        }, {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 95,
            column: 50
          }
        }],
        line: 93
      },
      "14": {
        loc: {
          start: {
            line: 100,
            column: 25
          },
          end: {
            line: 100,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 25
          },
          end: {
            line: 100,
            column: 38
          }
        }, {
          start: {
            line: 100,
            column: 42
          },
          end: {
            line: 100,
            column: 68
          }
        }],
        line: 100
      },
      "15": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "16": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "17": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "18": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "19": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "20": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "21": {
        loc: {
          start: {
            line: 224,
            column: 25
          },
          end: {
            line: 224,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 25
          },
          end: {
            line: 224,
            column: 38
          }
        }, {
          start: {
            line: 224,
            column: 42
          },
          end: {
            line: 224,
            column: 68
          }
        }],
        line: 224
      },
      "22": {
        loc: {
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 12
          },
          end: {
            line: 241,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "23": {
        loc: {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 260,
            column: 13
          }
        }, {
          start: {
            line: 255,
            column: 17
          },
          end: {
            line: 260,
            column: 13
          }
        }],
        line: 251
      },
      "24": {
        loc: {
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 252,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 251,
            column: 54
          }
        }, {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 252,
            column: 52
          }
        }],
        line: 251
      },
      "25": {
        loc: {
          start: {
            line: 255,
            column: 17
          },
          end: {
            line: 260,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 17
          },
          end: {
            line: 260,
            column: 13
          }
        }, {
          start: {
            line: 258,
            column: 17
          },
          end: {
            line: 260,
            column: 13
          }
        }],
        line: 255
      },
      "26": {
        loc: {
          start: {
            line: 258,
            column: 17
          },
          end: {
            line: 260,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 17
          },
          end: {
            line: 260,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "27": {
        loc: {
          start: {
            line: 263,
            column: 25
          },
          end: {
            line: 263,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 25
          },
          end: {
            line: 263,
            column: 38
          }
        }, {
          start: {
            line: 263,
            column: 42
          },
          end: {
            line: 263,
            column: 68
          }
        }],
        line: 263
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0]
    },
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\authController.ts",
      mappings: "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",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\authController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\r\nimport { authService, RegisterData, LoginCredentials } from '../services/authService';\r\nimport { prisma } from '../server';\r\nimport logger from '../utils/logger';\r\n\r\n// Interface para refresh token\r\ninterface RefreshTokenData {\r\n  refreshToken: string;\r\n}\r\n\r\n/**\r\n * Controller respons\xE1vel pela autentica\xE7\xE3o de usu\xE1rios\r\n */\r\nexport class AuthController {\r\n  /**\r\n   * Registra um novo usu\xE1rio no sistema\r\n   */\r\n  static async register(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const registerData: RegisterData = req.body;\r\n      \r\n      const result = await authService.register(registerData);\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Usu\xE1rio registrado com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao registrar usu\xE1rio', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('j\xE1 existe')) {\r\n        statusCode = 409;\r\n      } else if (error.message.includes('obrigat\xF3rios') || \r\n                 error.message.includes('inv\xE1lido') || \r\n                 error.message.includes('senha deve')) {\r\n        statusCode = 400;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza login do usu\xE1rio\r\n   */\r\n  static async login(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const loginData: LoginCredentials = req.body;\r\n      \r\n      const result = await authService.login(loginData);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Login realizado com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao fazer login', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('n\xE3o encontrado') || \r\n          error.message.includes('inv\xE1lidas')) {\r\n        statusCode = 401;\r\n      } else if (error.message.includes('obrigat\xF3rios') || \r\n                 error.message.includes('inv\xE1lido')) {\r\n        statusCode = 400;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza tokens usando refresh token\r\n   */\r\n  static async refreshToken(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { refreshToken }: RefreshTokenData = req.body;\r\n      \r\n      const result = await authService.refreshToken(refreshToken);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Tokens atualizados com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao atualizar tokens', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('obrigat\xF3rio') || \r\n          error.message.includes('inv\xE1lido') ||\r\n          error.message.includes('expirado')) {\r\n        statusCode = 401;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza logout do usu\xE1rio\r\n   */\r\n  static async logout(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Em uma implementa\xE7\xE3o mais robusta, voc\xEA poderia:\r\n      // 1. Adicionar o token a uma blacklist\r\n      // 2. Invalidar refresh tokens no banco\r\n      // 3. Limpar sess\xF5es ativas\r\n      \r\n      const userId = (req as any).user?.id;\r\n      \r\n      if (userId) {\r\n        logger.info('Usu\xE1rio fez logout', { userId });\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Logout realizado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer logout', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se o token \xE9 v\xE1lido\r\n   */\r\n  static async verifyToken(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const user = (req as any).user;\r\n      \r\n      if (!user) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token inv\xE1lido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Token v\xE1lido',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao verificar token', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solicita reset de senha\r\n   */\r\n  static async forgotPassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { email } = req.body;\r\n\r\n      if (!email) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Email \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar usu\xE1rio\r\n      const user = await prisma.user.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      // Por seguran\xE7a, sempre retornamos sucesso mesmo se o email n\xE3o existir\r\n      if (user) {\r\n        // Aqui voc\xEA implementaria o envio de email com token de reset\r\n        // Por enquanto, apenas logamos a a\xE7\xE3o\r\n        logger.info('Solicita\xE7\xE3o de reset de senha', {\r\n          userId: user.id,\r\n          email: user.email\r\n        });\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Se o email existir, voc\xEA receber\xE1 instru\xE7\xF5es para reset da senha'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao solicitar reset de senha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obt\xE9m informa\xE7\xF5es do usu\xE1rio logado\r\n   */\r\n  static async getProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.id;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token de acesso inv\xE1lido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const user = await authService.getUserById(userId);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil obtido com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao obter perfil', { error: error.message });\r\n      \r\n      let statusCode = 500;\r\n      if (error.message.includes('n\xE3o encontrado')) {\r\n        statusCode = 404;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Altera senha do usu\xE1rio\r\n   */\r\n  static async changePassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.id;\r\n      const { currentPassword, newPassword } = req.body;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token de acesso inv\xE1lido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      await authService.changePassword(userId, currentPassword, newPassword);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Senha alterada com sucesso'\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao alterar senha', { error: error.message });\r\n      \r\n      let statusCode = 500;\r\n      if (error.message.includes('obrigat\xF3rios') || \r\n          error.message.includes('senha deve')) {\r\n        statusCode = 400;\r\n      } else if (error.message.includes('atual incorreta')) {\r\n        statusCode = 401;\r\n      } else if (error.message.includes('n\xE3o encontrado')) {\r\n        statusCode = 404;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthController;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0026962c1511d071f0d17d22119840cdba54f801"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1bo5l6lcb9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1bo5l6lcb9();
var __importDefault =
/* istanbul ignore next */
(cov_1bo5l6lcb9().s[0]++,
/* istanbul ignore next */
(cov_1bo5l6lcb9().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1bo5l6lcb9().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1bo5l6lcb9().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1bo5l6lcb9().f[0]++;
  cov_1bo5l6lcb9().s[1]++;
  return /* istanbul ignore next */(cov_1bo5l6lcb9().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1bo5l6lcb9().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1bo5l6lcb9().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1bo5l6lcb9().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1bo5l6lcb9().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1bo5l6lcb9().s[3]++;
exports.AuthController = void 0;
const authService_1 =
/* istanbul ignore next */
(cov_1bo5l6lcb9().s[4]++, require("../services/authService"));
const server_1 =
/* istanbul ignore next */
(cov_1bo5l6lcb9().s[5]++, require("../server"));
const logger_1 =
/* istanbul ignore next */
(cov_1bo5l6lcb9().s[6]++, __importDefault(require("../utils/logger")));
/**
 * Controller responsável pela autenticação de usuários
 */
class AuthController {
  /**
   * Registra um novo usuário no sistema
   */
  static async register(req, res) {
    /* istanbul ignore next */
    cov_1bo5l6lcb9().f[1]++;
    cov_1bo5l6lcb9().s[7]++;
    try {
      const registerData =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[8]++, req.body);
      const result =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[9]++, await authService_1.authService.register(registerData));
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[10]++;
      res.status(201).json({
        success: true,
        message: 'Usuário registrado com sucesso',
        data: result
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[11]++;
      logger_1.default.error('Erro ao registrar usuário', {
        error: error.message
      });
      // Determinar status code baseado no tipo de erro
      let statusCode =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[12]++, 500);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[13]++;
      if (error.message.includes('já existe')) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[3][0]++;
        cov_1bo5l6lcb9().s[14]++;
        statusCode = 409;
      } else {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[3][1]++;
        cov_1bo5l6lcb9().s[15]++;
        if (
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[5][0]++, error.message.includes('obrigatórios')) ||
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[5][1]++, error.message.includes('inválido')) ||
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[5][2]++, error.message.includes('senha deve'))) {
          /* istanbul ignore next */
          cov_1bo5l6lcb9().b[4][0]++;
          cov_1bo5l6lcb9().s[16]++;
          statusCode = 400;
        } else
        /* istanbul ignore next */
        {
          cov_1bo5l6lcb9().b[4][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[17]++;
      res.status(statusCode).json({
        success: false,
        message:
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[6][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[6][1]++, 'Erro interno do servidor')
      });
    }
  }
  /**
   * Realiza login do usuário
   */
  static async login(req, res) {
    /* istanbul ignore next */
    cov_1bo5l6lcb9().f[2]++;
    cov_1bo5l6lcb9().s[18]++;
    try {
      const loginData =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[19]++, req.body);
      const result =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[20]++, await authService_1.authService.login(loginData));
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[21]++;
      res.status(200).json({
        success: true,
        message: 'Login realizado com sucesso',
        data: result
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[22]++;
      logger_1.default.error('Erro ao fazer login', {
        error: error.message
      });
      // Determinar status code baseado no tipo de erro
      let statusCode =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[23]++, 500);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[24]++;
      if (
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().b[8][0]++, error.message.includes('não encontrado')) ||
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().b[8][1]++, error.message.includes('inválidas'))) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[7][0]++;
        cov_1bo5l6lcb9().s[25]++;
        statusCode = 401;
      } else {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[7][1]++;
        cov_1bo5l6lcb9().s[26]++;
        if (
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[10][0]++, error.message.includes('obrigatórios')) ||
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[10][1]++, error.message.includes('inválido'))) {
          /* istanbul ignore next */
          cov_1bo5l6lcb9().b[9][0]++;
          cov_1bo5l6lcb9().s[27]++;
          statusCode = 400;
        } else
        /* istanbul ignore next */
        {
          cov_1bo5l6lcb9().b[9][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[28]++;
      res.status(statusCode).json({
        success: false,
        message:
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[11][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[11][1]++, 'Erro interno do servidor')
      });
    }
  }
  /**
   * Atualiza tokens usando refresh token
   */
  static async refreshToken(req, res) {
    /* istanbul ignore next */
    cov_1bo5l6lcb9().f[3]++;
    cov_1bo5l6lcb9().s[29]++;
    try {
      const {
        refreshToken
      } =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[30]++, req.body);
      const result =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[31]++, await authService_1.authService.refreshToken(refreshToken));
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[32]++;
      res.status(200).json({
        success: true,
        message: 'Tokens atualizados com sucesso',
        data: result
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[33]++;
      logger_1.default.error('Erro ao atualizar tokens', {
        error: error.message
      });
      // Determinar status code baseado no tipo de erro
      let statusCode =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[34]++, 500);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[35]++;
      if (
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().b[13][0]++, error.message.includes('obrigatório')) ||
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().b[13][1]++, error.message.includes('inválido')) ||
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().b[13][2]++, error.message.includes('expirado'))) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[12][0]++;
        cov_1bo5l6lcb9().s[36]++;
        statusCode = 401;
      } else
      /* istanbul ignore next */
      {
        cov_1bo5l6lcb9().b[12][1]++;
      }
      cov_1bo5l6lcb9().s[37]++;
      res.status(statusCode).json({
        success: false,
        message:
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[14][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[14][1]++, 'Erro interno do servidor')
      });
    }
  }
  /**
   * Realiza logout do usuário
   */
  static async logout(req, res) {
    /* istanbul ignore next */
    cov_1bo5l6lcb9().f[4]++;
    cov_1bo5l6lcb9().s[38]++;
    try {
      // Em uma implementação mais robusta, você poderia:
      // 1. Adicionar o token a uma blacklist
      // 2. Invalidar refresh tokens no banco
      // 3. Limpar sessões ativas
      const userId =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[39]++, req.user?.id);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[40]++;
      if (userId) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[15][0]++;
        cov_1bo5l6lcb9().s[41]++;
        logger_1.default.info('Usuário fez logout', {
          userId
        });
      } else
      /* istanbul ignore next */
      {
        cov_1bo5l6lcb9().b[15][1]++;
      }
      cov_1bo5l6lcb9().s[42]++;
      res.status(200).json({
        success: true,
        message: 'Logout realizado com sucesso'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[43]++;
      logger_1.default.error('Erro ao fazer logout', {
        error
      });
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[44]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Verifica se o token é válido
   */
  static async verifyToken(req, res) {
    /* istanbul ignore next */
    cov_1bo5l6lcb9().f[5]++;
    cov_1bo5l6lcb9().s[45]++;
    try {
      const user =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[46]++, req.user);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[47]++;
      if (!user) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[16][0]++;
        cov_1bo5l6lcb9().s[48]++;
        res.status(401).json({
          success: false,
          message: 'Token inválido'
        });
        /* istanbul ignore next */
        cov_1bo5l6lcb9().s[49]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1bo5l6lcb9().b[16][1]++;
      }
      cov_1bo5l6lcb9().s[50]++;
      res.status(200).json({
        success: true,
        message: 'Token válido',
        data: {
          user
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[51]++;
      logger_1.default.error('Erro ao verificar token', {
        error
      });
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[52]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Solicita reset de senha
   */
  static async forgotPassword(req, res) {
    /* istanbul ignore next */
    cov_1bo5l6lcb9().f[6]++;
    cov_1bo5l6lcb9().s[53]++;
    try {
      const {
        email
      } =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[54]++, req.body);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[55]++;
      if (!email) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[17][0]++;
        cov_1bo5l6lcb9().s[56]++;
        res.status(400).json({
          success: false,
          message: 'Email é obrigatório'
        });
        /* istanbul ignore next */
        cov_1bo5l6lcb9().s[57]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1bo5l6lcb9().b[17][1]++;
      }
      // Buscar usuário
      const user =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[58]++, await server_1.prisma.user.findUnique({
        where: {
          email
        }
      }));
      // Por segurança, sempre retornamos sucesso mesmo se o email não existir
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[59]++;
      if (user) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[18][0]++;
        cov_1bo5l6lcb9().s[60]++;
        // Aqui você implementaria o envio de email com token de reset
        // Por enquanto, apenas logamos a ação
        logger_1.default.info('Solicitação de reset de senha', {
          userId: user.id,
          email: user.email
        });
      } else
      /* istanbul ignore next */
      {
        cov_1bo5l6lcb9().b[18][1]++;
      }
      cov_1bo5l6lcb9().s[61]++;
      res.status(200).json({
        success: true,
        message: 'Se o email existir, você receberá instruções para reset da senha'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[62]++;
      logger_1.default.error('Erro ao solicitar reset de senha', {
        error
      });
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[63]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Obtém informações do usuário logado
   */
  static async getProfile(req, res) {
    /* istanbul ignore next */
    cov_1bo5l6lcb9().f[7]++;
    cov_1bo5l6lcb9().s[64]++;
    try {
      const userId =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[65]++, req.user?.id);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[66]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[19][0]++;
        cov_1bo5l6lcb9().s[67]++;
        res.status(401).json({
          success: false,
          message: 'Token de acesso inválido'
        });
        /* istanbul ignore next */
        cov_1bo5l6lcb9().s[68]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1bo5l6lcb9().b[19][1]++;
      }
      const user =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[69]++, await authService_1.authService.getUserById(userId));
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[70]++;
      res.status(200).json({
        success: true,
        message: 'Perfil obtido com sucesso',
        data: {
          user
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[71]++;
      logger_1.default.error('Erro ao obter perfil', {
        error: error.message
      });
      let statusCode =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[72]++, 500);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[73]++;
      if (error.message.includes('não encontrado')) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[20][0]++;
        cov_1bo5l6lcb9().s[74]++;
        statusCode = 404;
      } else
      /* istanbul ignore next */
      {
        cov_1bo5l6lcb9().b[20][1]++;
      }
      cov_1bo5l6lcb9().s[75]++;
      res.status(statusCode).json({
        success: false,
        message:
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[21][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[21][1]++, 'Erro interno do servidor')
      });
    }
  }
  /**
   * Altera senha do usuário
   */
  static async changePassword(req, res) {
    /* istanbul ignore next */
    cov_1bo5l6lcb9().f[8]++;
    cov_1bo5l6lcb9().s[76]++;
    try {
      const userId =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[77]++, req.user?.id);
      const {
        currentPassword,
        newPassword
      } =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[78]++, req.body);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[79]++;
      if (!userId) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[22][0]++;
        cov_1bo5l6lcb9().s[80]++;
        res.status(401).json({
          success: false,
          message: 'Token de acesso inválido'
        });
        /* istanbul ignore next */
        cov_1bo5l6lcb9().s[81]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1bo5l6lcb9().b[22][1]++;
      }
      cov_1bo5l6lcb9().s[82]++;
      await authService_1.authService.changePassword(userId, currentPassword, newPassword);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[83]++;
      res.status(200).json({
        success: true,
        message: 'Senha alterada com sucesso'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[84]++;
      logger_1.default.error('Erro ao alterar senha', {
        error: error.message
      });
      let statusCode =
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().s[85]++, 500);
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[86]++;
      if (
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().b[24][0]++, error.message.includes('obrigatórios')) ||
      /* istanbul ignore next */
      (cov_1bo5l6lcb9().b[24][1]++, error.message.includes('senha deve'))) {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[23][0]++;
        cov_1bo5l6lcb9().s[87]++;
        statusCode = 400;
      } else {
        /* istanbul ignore next */
        cov_1bo5l6lcb9().b[23][1]++;
        cov_1bo5l6lcb9().s[88]++;
        if (error.message.includes('atual incorreta')) {
          /* istanbul ignore next */
          cov_1bo5l6lcb9().b[25][0]++;
          cov_1bo5l6lcb9().s[89]++;
          statusCode = 401;
        } else {
          /* istanbul ignore next */
          cov_1bo5l6lcb9().b[25][1]++;
          cov_1bo5l6lcb9().s[90]++;
          if (error.message.includes('não encontrado')) {
            /* istanbul ignore next */
            cov_1bo5l6lcb9().b[26][0]++;
            cov_1bo5l6lcb9().s[91]++;
            statusCode = 404;
          } else
          /* istanbul ignore next */
          {
            cov_1bo5l6lcb9().b[26][1]++;
          }
        }
      }
      /* istanbul ignore next */
      cov_1bo5l6lcb9().s[92]++;
      res.status(statusCode).json({
        success: false,
        message:
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[27][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1bo5l6lcb9().b[27][1]++, 'Erro interno do servidor')
      });
    }
  }
}
/* istanbul ignore next */
cov_1bo5l6lcb9().s[93]++;
exports.AuthController = AuthController;
/* istanbul ignore next */
cov_1bo5l6lcb9().s[94]++;
exports.default = AuthController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
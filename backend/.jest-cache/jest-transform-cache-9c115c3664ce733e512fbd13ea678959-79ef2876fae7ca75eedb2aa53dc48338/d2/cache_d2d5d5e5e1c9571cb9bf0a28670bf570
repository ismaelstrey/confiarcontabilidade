0d05553883d9c1a1a1ef6bd3b259f1c8
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cacheMiddleware = cacheMiddleware;
exports.userCacheMiddleware = userCacheMiddleware;
exports.publicCacheMiddleware = publicCacheMiddleware;
exports.articleCacheMiddleware = articleCacheMiddleware;
exports.invalidateCacheMiddleware = invalidateCacheMiddleware;
exports.invalidateUserCacheMiddleware = invalidateUserCacheMiddleware;
exports.invalidatePublicCacheMiddleware = invalidatePublicCacheMiddleware;
exports.invalidateArticleCacheMiddleware = invalidateArticleCacheMiddleware;
const cacheService_1 = require("../services/cacheService");
const logger_1 = __importDefault(require("../utils/logger"));
/**
 * Gera uma chave de cache padrão baseada na requisição
 * @param req - Objeto de requisição Express
 * @returns Chave de cache
 */
function generateDefaultCacheKey(req) {
    const { method, originalUrl, query, user } = req;
    const userId = user?.id || 'anonymous';
    const queryString = Object.keys(query).length > 0 ? JSON.stringify(query) : '';
    return `cache:${method}:${originalUrl}:${userId}:${queryString}`;
}
/**
 * Middleware de cache para requisições HTTP
 * @param options - Opções de configuração do cache
 * @returns Middleware Express
 */
function cacheMiddleware(options = {}) {
    const { ttl = 300, // 5 minutos por padrão
    keyGenerator = generateDefaultCacheKey, condition = () => true, skipCache = () => false } = options;
    return async (req, res, next) => {
        try {
            // Pula o cache se a condição for verdadeira
            if (skipCache(req)) {
                return next();
            }
            // Só cacheia métodos GET
            if (req.method !== 'GET') {
                return next();
            }
            const cacheKey = keyGenerator(req);
            // Tenta obter do cache
            const cachedData = await cacheService_1.cacheService.get(cacheKey);
            if (cachedData) {
                logger_1.default.debug(`Cache hit for key: ${cacheKey}`);
                return res.json(cachedData);
            }
            // Se não encontrou no cache, intercepta a resposta
            const originalJson = res.json;
            let responseData;
            res.json = function (data) {
                responseData = data;
                return originalJson.call(this, data);
            };
            // Intercepta o final da resposta
            res.on('finish', async () => {
                try {
                    // Só cacheia se a resposta foi bem-sucedida e a condição for verdadeira
                    if (res.statusCode >= 200 && res.statusCode < 300 && condition(req, res) && responseData) {
                        await cacheService_1.cacheService.set(cacheKey, responseData, ttl);
                        logger_1.default.debug(`Cache set for key: ${cacheKey}`);
                    }
                }
                catch (error) {
                    logger_1.default.error('Error setting cache:', error);
                }
            });
            next();
        }
        catch (error) {
            logger_1.default.error('Cache middleware error:', error);
            next();
        }
    };
}
/**
 * Middleware de cache específico para dados de usuário
 * @param ttl - Tempo de vida em segundos (padrão: 600 = 10 minutos)
 */
function userCacheMiddleware(ttl = 600) {
    return cacheMiddleware({
        ttl,
        keyGenerator: (req) => {
            const userId = req.user?.id || 'anonymous';
            return `user:${userId}:${req.originalUrl}`;
        },
        condition: (req, res) => {
            // Só cacheia se o usuário estiver autenticado
            return !!req.user;
        }
    });
}
/**
 * Middleware de cache específico para dados públicos
 * @param ttl - Tempo de vida em segundos (padrão: 1800 = 30 minutos)
 */
function publicCacheMiddleware(ttl = 1800) {
    return cacheMiddleware({
        ttl,
        keyGenerator: (req) => {
            return `public:${req.originalUrl}:${JSON.stringify(req.query)}`;
        },
        condition: () => true
    });
}
/**
 * Middleware de cache específico para artigos/blog
 * @param ttl - Tempo de vida em segundos (padrão: 3600 = 1 hora)
 */
function articleCacheMiddleware(ttl = 3600) {
    return cacheMiddleware({
        ttl,
        keyGenerator: (req) => {
            const { slug, id } = req.params;
            const identifier = slug || id || req.originalUrl;
            return `article:${identifier}:${JSON.stringify(req.query)}`;
        },
        condition: () => true
    });
}
/**
 * Middleware para invalidar cache baseado em padrões
 * @param patterns - Padrões de chaves para invalidar
 */
function invalidateCacheMiddleware(patterns) {
    return async (req, res, next) => {
        try {
            // Executa a operação primeiro
            next();
            // Invalida o cache após a resposta ser enviada
            res.on('finish', async () => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                    for (const pattern of patterns) {
                        await cacheService_1.cacheService.delPattern(pattern);
                        logger_1.default.debug(`Cache invalidated for pattern: ${pattern}`);
                    }
                }
            });
        }
        catch (error) {
            logger_1.default.error('Cache invalidation middleware error:', error);
            next();
        }
    };
}
/**
 * Middleware para invalidar cache de usuário específico
 * @param getUserId - Função para extrair o ID do usuário da requisição
 */
function invalidateUserCacheMiddleware(getUserId) {
    return (req, res, next) => {
        const pattern = getUserId ? `user:${getUserId(req)}:*` : 'user:*';
        const middleware = invalidateCacheMiddleware([pattern]);
        return middleware(req, res, next);
    };
}
/**
 * Middleware para invalidar cache público
 */
function invalidatePublicCacheMiddleware() {
    return invalidateCacheMiddleware(['public:*']);
}
/**
 * Middleware para invalidar cache de artigos
 */
function invalidateArticleCacheMiddleware() {
    return invalidateCacheMiddleware(['article:*']);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
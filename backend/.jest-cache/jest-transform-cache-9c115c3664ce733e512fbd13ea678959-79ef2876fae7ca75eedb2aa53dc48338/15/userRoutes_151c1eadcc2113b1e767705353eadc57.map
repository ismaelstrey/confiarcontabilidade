{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\userRoutes.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\userRoutes.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\r\nimport { authenticate, authorize, authorizeOwnerOrAdmin } from '../middlewares/auth';\r\nimport {\r\n  userCacheMiddleware,\r\n  publicCacheMiddleware,\r\n  invalidateUserCacheMiddleware\r\n} from '../middlewares/cache';\r\nimport UserController from '../controllers/userController';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     UserProfile:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         name:\r\n *           type: string\r\n *         email:\r\n *           type: string\r\n *         role:\r\n *           type: string\r\n *           enum: [ADMIN, EDITOR, USER]\r\n *         avatar:\r\n *           type: string\r\n *         phone:\r\n *           type: string\r\n *         bio:\r\n *           type: string\r\n *         website:\r\n *           type: string\r\n *         location:\r\n *           type: string\r\n *         isActive:\r\n *           type: boolean\r\n *         emailVerified:\r\n *           type: boolean\r\n *         lastLoginAt:\r\n *           type: string\r\n *           format: date-time\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *         updatedAt:\r\n *           type: string\r\n *           format: date-time\r\n *     UpdateProfileRequest:\r\n *       type: object\r\n *       properties:\r\n *         name:\r\n *           type: string\r\n *           minLength: 2\r\n *           description: Nome completo\r\n *         phone:\r\n *           type: string\r\n *           description: Telefone\r\n *         bio:\r\n *           type: string\r\n *           maxLength: 500\r\n *           description: Biografia\r\n *         website:\r\n *           type: string\r\n *           description: Website pessoal\r\n *         location:\r\n *           type: string\r\n *           description: Localização\r\n *         avatar:\r\n *           type: string\r\n *           description: URL do avatar\r\n *     ChangePasswordRequest:\r\n *       type: object\r\n *       required:\r\n *         - currentPassword\r\n *         - newPassword\r\n *       properties:\r\n *         currentPassword:\r\n *           type: string\r\n *           description: Senha atual\r\n *         newPassword:\r\n *           type: string\r\n *           minLength: 6\r\n *           description: Nova senha\r\n *         confirmPassword:\r\n *           type: string\r\n *           description: Confirmação da nova senha\r\n *     CreateUserRequest:\r\n *       type: object\r\n *       required:\r\n *         - name\r\n *         - email\r\n *         - password\r\n *         - role\r\n *       properties:\r\n *         name:\r\n *           type: string\r\n *           minLength: 2\r\n *           description: Nome completo\r\n *         email:\r\n *           type: string\r\n *           format: email\r\n *           description: Email do usuário\r\n *         password:\r\n *           type: string\r\n *           minLength: 6\r\n *           description: Senha do usuário\r\n *         role:\r\n *           type: string\r\n *           enum: [ADMIN, EDITOR, USER]\r\n *           description: Papel do usuário\r\n *         phone:\r\n *           type: string\r\n *           description: Telefone (opcional)\r\n *         isActive:\r\n *           type: boolean\r\n *           default: true\r\n *           description: Status ativo\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/profile:\r\n *   get:\r\n *     summary: Obter perfil do usuário logado\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Dados do perfil\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/UserProfile'\r\n *       401:\r\n *         description: Token inválido\r\n */\r\nrouter.get('/profile', authenticate, userCacheMiddleware(600), UserController.getProfile);\r\n\r\nrouter.put('/profile', authenticate, invalidateUserCacheMiddleware((req) => (req as any).user?.id), UserController.updateProfile);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/profile:\r\n *   put:\r\n *     summary: Atualizar perfil do usuário logado\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/UpdateProfileRequest'\r\n *     responses:\r\n *       200:\r\n *         description: Perfil atualizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/UserProfile'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n */\r\nrouter.put('/profile', authenticate, UserController.updateProfile);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/change-password:\r\n *   put:\r\n *     summary: Alterar senha do usuário logado\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/ChangePasswordRequest'\r\n *     responses:\r\n *       200:\r\n *         description: Senha alterada com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos ou senha atual incorreta\r\n *       401:\r\n *         description: Token inválido\r\n */\r\nrouter.put('/change-password', authenticate, UserController.changePassword);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/avatar:\r\n *   post:\r\n *     summary: Upload de avatar do usuário\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               avatar:\r\n *                 type: string\r\n *                 format: binary\r\n *                 description: Imagem do avatar (JPG, PNG, GIF)\r\n *     responses:\r\n *       200:\r\n *         description: Avatar atualizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     avatarUrl:\r\n *                       type: string\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Arquivo inválido\r\n *       401:\r\n *         description: Token inválido\r\n *       413:\r\n *         description: Arquivo muito grande\r\n */\r\nrouter.post('/avatar', authenticate, UserController.uploadAvatar);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/delete-account:\r\n *   delete:\r\n *     summary: Excluir conta do usuário logado\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - password\r\n *               - confirmation\r\n *             properties:\r\n *               password:\r\n *                 type: string\r\n *                 description: Senha atual para confirmação\r\n *               confirmation:\r\n *                 type: string\r\n *                 enum: [DELETE_MY_ACCOUNT]\r\n *                 description: Texto de confirmação\r\n *     responses:\r\n *       200:\r\n *         description: Conta excluída com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos ou senha incorreta\r\n *       401:\r\n *         description: Token inválido\r\n */\r\nrouter.delete('/delete-account', authenticate, UserController.deleteAccount);\r\n\r\n// Rotas administrativas\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users:\r\n *   get:\r\n *     summary: Listar usuários (Admin)\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: Número da página\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 100\r\n *           default: 20\r\n *         description: Itens por página\r\n *       - in: query\r\n *         name: role\r\n *         schema:\r\n *           type: string\r\n *           enum: [ADMIN, EDITOR, USER]\r\n *         description: Filtrar por papel\r\n *       - in: query\r\n *         name: status\r\n *         schema:\r\n *           type: string\r\n *           enum: [active, inactive]\r\n *         description: Filtrar por status\r\n *       - in: query\r\n *         name: search\r\n *         schema:\r\n *           type: string\r\n *         description: Buscar por nome ou email\r\n *       - in: query\r\n *         name: dateFrom\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Data inicial (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: dateTo\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Data final (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: sortBy\r\n *         schema:\r\n *           type: string\r\n *           enum: [createdAt, name, email, lastLoginAt]\r\n *           default: createdAt\r\n *         description: Campo para ordenação\r\n *       - in: query\r\n *         name: sortOrder\r\n *         schema:\r\n *           type: string\r\n *           enum: [asc, desc]\r\n *           default: desc\r\n *         description: Ordem da classificação\r\n *     responses:\r\n *       200:\r\n *         description: Lista de usuários\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     users:\r\n *                       type: array\r\n *                       items:\r\n *                         $ref: '#/components/schemas/UserProfile'\r\n *                     pagination:\r\n *                       type: object\r\n *                       properties:\r\n *                         page:\r\n *                           type: integer\r\n *                         limit:\r\n *                           type: integer\r\n *                         total:\r\n *                           type: integer\r\n *                         pages:\r\n *                           type: integer\r\n *                     stats:\r\n *                       type: object\r\n *                       properties:\r\n *                         total:\r\n *                           type: integer\r\n *                         active:\r\n *                           type: integer\r\n *                         inactive:\r\n *                           type: integer\r\n *                         byRole:\r\n *                           type: object\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n */\r\nrouter.get('/', authenticate, authorize('ADMIN'), publicCacheMiddleware(300), UserController.getUsers);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users:\r\n *   post:\r\n *     summary: Criar novo usuário (Admin)\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/CreateUserRequest'\r\n *     responses:\r\n *       201:\r\n *         description: Usuário criado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/UserProfile'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n *       409:\r\n *         description: Email já cadastrado\r\n */\r\nrouter.post('/', authenticate, authorize('ADMIN'), UserController.createUser);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/{id}:\r\n *   get:\r\n *     summary: Obter usuário por ID\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do usuário\r\n *     responses:\r\n *       200:\r\n *         description: Dados do usuário\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/UserProfile'\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n *       404:\r\n *         description: Usuário não encontrado\r\n */\r\nrouter.get('/:id', authenticate, authorizeOwnerOrAdmin, userCacheMiddleware(600), UserController.getUserById);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/{id}:\r\n *   put:\r\n *     summary: Atualizar usuário (Admin)\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do usuário\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               name:\r\n *                 type: string\r\n *               email:\r\n *                 type: string\r\n *                 format: email\r\n *               role:\r\n *                 type: string\r\n *                 enum: [ADMIN, EDITOR, USER]\r\n *               phone:\r\n *                 type: string\r\n *               isActive:\r\n *                 type: boolean\r\n *               bio:\r\n *                 type: string\r\n *               website:\r\n *                 type: string\r\n *               location:\r\n *                 type: string\r\n *     responses:\r\n *       200:\r\n *         description: Usuário atualizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/UserProfile'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n *       404:\r\n *         description: Usuário não encontrado\r\n *       409:\r\n *         description: Email já cadastrado\r\n */\r\nrouter.put('/:id', authenticate, authorize('ADMIN'), invalidateUserCacheMiddleware((req) => req.params.id || ''), UserController.updateUser);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/{id}/status:\r\n *   patch:\r\n *     summary: Alterar status do usuário (Admin)\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do usuário\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - isActive\r\n *             properties:\r\n *               isActive:\r\n *                 type: boolean\r\n *                 description: Novo status ativo\r\n *               reason:\r\n *                 type: string\r\n *                 description: Motivo da alteração (opcional)\r\n *     responses:\r\n *       200:\r\n *         description: Status alterado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/UserProfile'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n *       404:\r\n *         description: Usuário não encontrado\r\n */\r\nrouter.patch('/:id/status', authenticate, authorize('ADMIN'), UserController.updateUserStatus);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/users/{id}:\r\n *   delete:\r\n *     summary: Excluir usuário (Admin)\r\n *     tags: [Usuários]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do usuário\r\n *     responses:\r\n *       200:\r\n *         description: Usuário excluído com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n *       404:\r\n *         description: Usuário não encontrado\r\n */\r\nrouter.delete('/:id', authenticate, authorize('ADMIN'), invalidateUserCacheMiddleware((req) => req.params.id || ''), UserController.deleteUser);\r\n\r\nexport default router;"],"version":3}
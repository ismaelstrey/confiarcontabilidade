{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\cache.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\cache.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { cacheService } from '../services/cacheService';\r\nimport logger from '../utils/logger';\r\n\r\n/**\r\n * Interface para opções do middleware de cache\r\n */\r\ninterface CacheOptions {\r\n  ttl?: number; // Tempo de vida em segundos\r\n  keyGenerator?: (req: Request) => string; // Função para gerar chave personalizada\r\n  condition?: (req: Request, res: Response) => boolean; // Condição para cachear\r\n  skipCache?: (req: Request) => boolean; // Condição para pular o cache\r\n}\r\n\r\n/**\r\n * Gera uma chave de cache padrão baseada na requisição\r\n * @param req - Objeto de requisição Express\r\n * @returns Chave de cache\r\n */\r\nfunction generateDefaultCacheKey(req: Request): string {\r\n  const { method, originalUrl, query, user } = req;\r\n  const userId = (user as any)?.id || 'anonymous';\r\n  const queryString = Object.keys(query).length > 0 ? JSON.stringify(query) : '';\r\n  \r\n  return `cache:${method}:${originalUrl}:${userId}:${queryString}`;\r\n}\r\n\r\n/**\r\n * Middleware de cache para requisições HTTP\r\n * @param options - Opções de configuração do cache\r\n * @returns Middleware Express\r\n */\r\nexport function cacheMiddleware(options: CacheOptions = {}) {\r\n  const {\r\n    ttl = 300, // 5 minutos por padrão\r\n    keyGenerator = generateDefaultCacheKey,\r\n    condition = () => true,\r\n    skipCache = () => false\r\n  } = options;\r\n\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      // Pula o cache se a condição for verdadeira\r\n      if (skipCache(req)) {\r\n        return next();\r\n      }\r\n\r\n      // Só cacheia métodos GET\r\n      if (req.method !== 'GET') {\r\n        return next();\r\n      }\r\n\r\n      const cacheKey = keyGenerator(req);\r\n      \r\n      // Tenta obter do cache\r\n      const cachedData = await cacheService.get(cacheKey);\r\n      \r\n      if (cachedData) {\r\n        logger.debug(`Cache hit for key: ${cacheKey}`);\r\n        return res.json(cachedData);\r\n      }\r\n\r\n      // Se não encontrou no cache, intercepta a resposta\r\n      const originalJson = res.json;\r\n      let responseData: any;\r\n\r\n      res.json = function(data: any) {\r\n        responseData = data;\r\n        return originalJson.call(this, data);\r\n      };\r\n\r\n      // Intercepta o final da resposta\r\n      res.on('finish', async () => {\r\n        try {\r\n          // Só cacheia se a resposta foi bem-sucedida e a condição for verdadeira\r\n          if (res.statusCode >= 200 && res.statusCode < 300 && condition(req, res) && responseData) {\r\n            await cacheService.set(cacheKey, responseData, ttl);\r\n            logger.debug(`Cache set for key: ${cacheKey}`);\r\n          }\r\n        } catch (error) {\r\n          logger.error('Error setting cache:', error);\r\n        }\r\n      });\r\n\r\n      next();\r\n    } catch (error) {\r\n      logger.error('Cache middleware error:', error);\r\n      next();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware de cache específico para dados de usuário\r\n * @param ttl - Tempo de vida em segundos (padrão: 600 = 10 minutos)\r\n */\r\nexport function userCacheMiddleware(ttl: number = 600) {\r\n  return cacheMiddleware({\r\n    ttl,\r\n    keyGenerator: (req) => {\r\n      const userId = (req as any).user?.id || 'anonymous';\r\n      return `user:${userId}:${req.originalUrl}`;\r\n    },\r\n    condition: (req, res) => {\r\n      // Só cacheia se o usuário estiver autenticado\r\n      return !!(req as any).user;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Middleware de cache específico para dados públicos\r\n * @param ttl - Tempo de vida em segundos (padrão: 1800 = 30 minutos)\r\n */\r\nexport function publicCacheMiddleware(ttl: number = 1800) {\r\n  return cacheMiddleware({\r\n    ttl,\r\n    keyGenerator: (req) => {\r\n      return `public:${req.originalUrl}:${JSON.stringify(req.query)}`;\r\n    },\r\n    condition: () => true\r\n  });\r\n}\r\n\r\n/**\r\n * Middleware de cache específico para artigos/blog\r\n * @param ttl - Tempo de vida em segundos (padrão: 3600 = 1 hora)\r\n */\r\nexport function articleCacheMiddleware(ttl: number = 3600) {\r\n  return cacheMiddleware({\r\n    ttl,\r\n    keyGenerator: (req) => {\r\n      const { slug, id } = req.params;\r\n      const identifier = slug || id || req.originalUrl;\r\n      return `article:${identifier}:${JSON.stringify(req.query)}`;\r\n    },\r\n    condition: () => true\r\n  });\r\n}\r\n\r\n/**\r\n * Middleware para invalidar cache baseado em padrões\r\n * @param patterns - Padrões de chaves para invalidar\r\n */\r\nexport function invalidateCacheMiddleware(patterns: string[]) {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      // Executa a operação primeiro\r\n      next();\r\n\r\n      // Invalida o cache após a resposta ser enviada\r\n      res.on('finish', async () => {\r\n        if (res.statusCode >= 200 && res.statusCode < 300) {\r\n          for (const pattern of patterns) {\r\n            await cacheService.delPattern(pattern);\r\n            logger.debug(`Cache invalidated for pattern: ${pattern}`);\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Cache invalidation middleware error:', error);\r\n      next();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para invalidar cache de usuário específico\r\n * @param getUserId - Função para extrair o ID do usuário da requisição\r\n */\r\nexport function invalidateUserCacheMiddleware(getUserId?: (req: Request) => string) {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    const pattern = getUserId ? `user:${getUserId(req)}:*` : 'user:*';\r\n    const middleware = invalidateCacheMiddleware([pattern]);\r\n    return middleware(req, res, next);\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para invalidar cache público\r\n */\r\nexport function invalidatePublicCacheMiddleware() {\r\n  return invalidateCacheMiddleware(['public:*']);\r\n}\r\n\r\n/**\r\n * Middleware para invalidar cache de artigos\r\n */\r\nexport function invalidateArticleCacheMiddleware() {\r\n  return invalidateCacheMiddleware(['article:*']);\r\n}"],"version":3}
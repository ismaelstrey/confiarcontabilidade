{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\auth.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\auth.ts"],"sourcesContent":["\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { authService } from '../services/authService';\r\nimport logger from '../utils/logger';\r\n\r\n// Interface para payload do JWT\r\n\r\n\r\n// Estender interface Request para incluir user\r\ndeclare global {\r\n  namespace Express {\r\n    interface Request {\r\n      user?: {\r\n        id: string;\r\n        email: string;\r\n        role: string;\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Middleware de autenticação JWT\r\n */\r\nexport const authenticateToken = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): Promise<void> => {\r\n  try {\r\n    const authHeader = req.headers.authorization;\r\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\r\n\r\n    if (!token) {\r\n      res.status(401).json({\r\n        success: false,\r\n        message: 'Token de acesso requerido'\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Verificar token usando authService\r\n    const decoded = await authService.verifyAccessToken(token);\r\n\r\n    if (!decoded) {\r\n      res.status(401).json({\r\n        success: false,\r\n        message: 'Token inválido ou expirado'\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Buscar usuário no banco de dados\r\n    const user = await authService.getUserById(decoded.userId);\r\n\r\n    if (!user) {\r\n      res.status(401).json({\r\n        success: false,\r\n        message: 'Usuário não encontrado'\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Adicionar usuário ao request\r\n    req.user = {\r\n      id: user.id,\r\n      email: user.email,\r\n      role: user.role\r\n    };\r\n\r\n    next();\r\n  } catch (error: any) {\r\n    logger.error('Erro na autenticação', { error: error.message });\r\n    res.status(401).json({\r\n      success: false,\r\n      message: 'Token inválido'\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Middleware para verificar roles específicas\r\n */\r\nexport const requireRole = (roles: string[]) => {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    const user = req.user;\r\n\r\n    if (!user) {\r\n      res.status(401).json({\r\n        success: false,\r\n        message: 'Usuário não autenticado'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!roles.includes(user.role)) {\r\n      res.status(403).json({\r\n        success: false,\r\n        message: 'Acesso negado. Permissão insuficiente'\r\n      });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  };\r\n};\r\n\r\n/**\r\n * Middleware para verificar se é admin\r\n */\r\nexport const requireAdmin = requireRole(['ADMIN']);\r\n\r\n/**\r\n * Middleware para verificar se é admin ou moderador\r\n */\r\nexport const requireAdminOrModerator = requireRole(['ADMIN', 'MODERATOR']);\r\n\r\n/**\r\n * Alias para compatibilidade com código existente\r\n */\r\nexport const authenticate = authenticateToken;\r\nexport const authorize = (...roles: string[]) => {\r\n  return requireRole(roles);\r\n};\r\nexport const authorizeOwnerOrAdmin = (req: Request, res: Response, next: NextFunction): void => {\r\n  const user = req.user;\r\n  const resourceUserId = req.params.id || req.params.userId;\r\n\r\n  if (!user) {\r\n    res.status(401).json({\r\n      success: false,\r\n      message: 'Usuário não autenticado'\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Permite se for admin ou se for o próprio usuário\r\n  if (user.role === 'ADMIN' || user.id === resourceUserId) {\r\n    next();\r\n    return;\r\n  }\r\n\r\n  res.status(403).json({\r\n    success: false,\r\n    message: 'Acesso negado. Você só pode acessar seus próprios recursos'\r\n  });\r\n};"],"version":3}
4f8014d3a656d23fd1375e4888b525d4
"use strict";
/**
 * Configura칞칚o global para testes unit치rios
 * Contabilidade Igrejinha Backend
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.testUtils = void 0;
const globals_1 = require("@jest/globals");
// Configurar mocks globais para m칩dulos externos
// jest.mock('nodemailer', () => ({
//   createTransport: jest.fn(() => ({
//     sendMail: jest.fn().mockResolvedValue("Teste" ),
//     verify: jest.fn().mockResolvedValue(true),
//   })),
// }));
globals_1.jest.mock('ioredis', () => {
    const mockRedis = {
        get: globals_1.jest.fn(),
        set: globals_1.jest.fn(),
        del: globals_1.jest.fn(),
        exists: globals_1.jest.fn(),
        expire: globals_1.jest.fn(),
        flushall: globals_1.jest.fn(),
        quit: globals_1.jest.fn(),
        // ping: jest.fn().mockResolvedValue('PONG'),
        on: globals_1.jest.fn(),
        connect: globals_1.jest.fn(),
        disconnect: globals_1.jest.fn(),
    };
    return globals_1.jest.fn(() => mockRedis);
});
// Mock do winston para evitar problemas de logging em testes
globals_1.jest.mock('winston', () => ({
    createLogger: globals_1.jest.fn(() => ({
        info: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        debug: globals_1.jest.fn(),
    })),
    format: {
        combine: globals_1.jest.fn(() => globals_1.jest.fn()),
        timestamp: globals_1.jest.fn(() => globals_1.jest.fn()),
        errors: globals_1.jest.fn(() => globals_1.jest.fn()),
        json: globals_1.jest.fn(() => globals_1.jest.fn()),
        colorize: globals_1.jest.fn(() => globals_1.jest.fn()),
        simple: globals_1.jest.fn(() => globals_1.jest.fn()),
        printf: globals_1.jest.fn(() => globals_1.jest.fn()),
    },
    transports: {
        Console: globals_1.jest.fn(),
        File: globals_1.jest.fn(),
    },
}));
// Mock do logger middleware
globals_1.jest.mock('../src/middlewares/logger', () => ({
    logger: {
        info: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        debug: globals_1.jest.fn(),
    },
    logStream: {
        write: globals_1.jest.fn(),
    },
    logPerformance: globals_1.jest.fn(),
    logDatabaseQuery: globals_1.jest.fn(),
    logAuth: globals_1.jest.fn(),
    logFileUpload: globals_1.jest.fn(),
    logEmail: globals_1.jest.fn(),
    logCache: globals_1.jest.fn(),
}));
// Mock dos middlewares de seguran칞a
globals_1.jest.mock('../src/middlewares/security', () => ({
    corsMiddleware: globals_1.jest.fn((req, res, next) => next()),
    helmetMiddleware: globals_1.jest.fn((req, res, next) => next()),
    generalRateLimit: globals_1.jest.fn((req, res, next) => next()),
    authRateLimit: globals_1.jest.fn((req, res, next) => next()),
    apiRateLimit: globals_1.jest.fn((req, res, next) => next()),
    uploadRateLimit: globals_1.jest.fn((req, res, next) => next()),
    compressionMiddleware: globals_1.jest.fn((req, res, next) => next()),
    customSecurityHeaders: globals_1.jest.fn((req, res, next) => next()),
    securityLogger: globals_1.jest.fn((req, res, next) => next()),
}));
// Mock do express-rate-limit
globals_1.jest.mock('express-rate-limit', () => {
    return globals_1.jest.fn(() => (req, res, next) => next());
});
// Mock do multer para upload de arquivos
globals_1.jest.mock('multer', () => {
    const multer = () => ({
        single: () => (req, res, next) => {
            req.file = {
                fieldname: 'file',
                originalname: 'test.jpg',
                encoding: '7bit',
                mimetype: 'image/jpeg',
                size: 1024,
                filename: 'test-123.jpg',
                path: '/tmp/test-123.jpg',
            };
            next();
        },
        array: () => (req, res, next) => {
            req.files = [
                {
                    fieldname: 'files',
                    originalname: 'test1.jpg',
                    encoding: '7bit',
                    mimetype: 'image/jpeg',
                    size: 1024,
                    filename: 'test1-123.jpg',
                    path: '/tmp/test1-123.jpg',
                },
            ];
            next();
        },
    });
    multer.memoryStorage = globals_1.jest.fn();
    multer.diskStorage = globals_1.jest.fn();
    return multer;
});
// Configurar timezone para testes consistentes
process.env.TZ = 'UTC';
// Configurar vari치veis de ambiente para testes
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-jwt-secret';
process.env.JWT_EXPIRES_IN = '1h';
process.env.JWT_REFRESH_SECRET = 'test-refresh-secret';
process.env.JWT_REFRESH_EXPIRES_IN = '7d';
process.env.DATABASE_URL = 'file:./test.db';
process.env.REDIS_URL = 'redis://localhost:6379/1';
process.env.LOG_LEVEL = 'error';
process.env.UPLOAD_PATH = './test-uploads';
// Mock de console para testes mais limpos
global.console = {
    ...console,
    // Manter apenas erros importantes
    log: globals_1.jest.fn(),
    debug: globals_1.jest.fn(),
    info: globals_1.jest.fn(),
    warn: globals_1.jest.fn(),
    error: console.error, // Manter erros vis칤veis
};
// Configura칞칫es globais de timeout
globals_1.jest.setTimeout(30000);
// Limpar todos os mocks ap칩s cada teste
afterEach(() => {
    globals_1.jest.clearAllMocks();
});
// Configurar matchers customizados (se necess치rio)
expect.extend({
    toBeValidDate(received) {
        const pass = received instanceof Date && !isNaN(received.getTime());
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid date`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid date`,
                pass: false,
            };
        }
    },
    toBeValidUUID(received) {
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        const pass = typeof received === 'string' && uuidRegex.test(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid UUID`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid UUID`,
                pass: false,
            };
        }
    },
});
// Utilit치rios para testes
exports.testUtils = {
    // Criar um usu치rio de teste
    createTestUser: () => ({
        id: '123e4567-e89b-12d3-a456-426614174000',
        email: 'test@example.com',
        name: 'Test User',
        role: 'USER',
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
    }),
    // Criar um token JWT de teste
    createTestToken: () => 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token',
    // Criar dados de requisi칞칚o de teste
    createTestRequest: (overrides = {}) => ({
        body: {},
        params: {},
        query: {},
        headers: {},
        user: exports.testUtils.createTestUser(),
        ...overrides,
    }),
    // Criar dados de resposta de teste
    createTestResponse: () => {
        const res = {};
        res.status = globals_1.jest.fn().mockReturnValue(res);
        res.json = globals_1.jest.fn().mockReturnValue(res);
        res.send = globals_1.jest.fn().mockReturnValue(res);
        res.cookie = globals_1.jest.fn().mockReturnValue(res);
        res.clearCookie = globals_1.jest.fn().mockReturnValue(res);
        return res;
    },
    // Aguardar um tempo espec칤fico (para testes com timers)
    waitFor: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
};
console.log('游빍 Configura칞칚o de testes carregada');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
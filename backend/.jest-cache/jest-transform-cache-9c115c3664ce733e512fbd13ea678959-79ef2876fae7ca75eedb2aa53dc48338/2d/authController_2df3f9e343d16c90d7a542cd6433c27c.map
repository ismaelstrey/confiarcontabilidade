{"version":3,"names":["cov_1bo5l6lcb9","actualCoverage","authService_1","s","require","prisma_1","logger_1","__importDefault","AuthController","register","req","res","f","registerData","body","result","authService","status","json","success","message","data","error","default","statusCode","includes","b","login","loginData","refreshToken","logout","userId","user","id","info","verifyToken","forgotPassword","email","prisma","findUnique","where","getProfile","getUserById","changePassword","currentPassword","newPassword","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\authController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { authService, RegisterData, LoginCredentials } from '../services/authService';\r\nimport { prisma } from '../lib/prisma';\r\nimport logger from '../utils/logger';\r\n\r\n// Interface para refresh token\r\ninterface RefreshTokenData {\r\n  refreshToken: string;\r\n}\r\n\r\n/**\r\n * Controller responsável pela autenticação de usuários\r\n */\r\nexport class AuthController {\r\n  /**\r\n   * Registra um novo usuário no sistema\r\n   */\r\n  static async register(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const registerData: RegisterData = req.body;\r\n      \r\n      const result = await authService.register(registerData);\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Usuário registrado com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao registrar usuário', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('já existe')) {\r\n        statusCode = 409;\r\n      } else if (error.message.includes('obrigatórios') || \r\n                 error.message.includes('inválido') || \r\n                 error.message.includes('senha deve')) {\r\n        statusCode = 400;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza login do usuário\r\n   */\r\n  static async login(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const loginData: LoginCredentials = req.body;\r\n      \r\n      const result = await authService.login(loginData);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Login realizado com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao fazer login', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('não encontrado') || \r\n          error.message.includes('inválidas')) {\r\n        statusCode = 401;\r\n      } else if (error.message.includes('obrigatórios') || \r\n                 error.message.includes('inválido')) {\r\n        statusCode = 400;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza tokens usando refresh token\r\n   */\r\n  static async refreshToken(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { refreshToken }: RefreshTokenData = req.body;\r\n      \r\n      const result = await authService.refreshToken(refreshToken);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Tokens atualizados com sucesso',\r\n        data: result\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao atualizar tokens', { error: error.message });\r\n      \r\n      // Determinar status code baseado no tipo de erro\r\n      let statusCode = 500;\r\n      if (error.message.includes('obrigatório') || \r\n          error.message.includes('inválido') ||\r\n          error.message.includes('expirado')) {\r\n        statusCode = 401;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Realiza logout do usuário\r\n   */\r\n  static async logout(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Em uma implementação mais robusta, você poderia:\r\n      // 1. Adicionar o token a uma blacklist\r\n      // 2. Invalidar refresh tokens no banco\r\n      // 3. Limpar sessões ativas\r\n      \r\n      const userId = (req as any).user?.id;\r\n      \r\n      if (userId) {\r\n        logger.info('Usuário fez logout', { userId });\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Logout realizado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer logout', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se o token é válido\r\n   */\r\n  static async verifyToken(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const user = (req as any).user;\r\n      \r\n      if (!user) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Token válido',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao verificar token', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solicita reset de senha\r\n   */\r\n  static async forgotPassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { email } = req.body;\r\n\r\n      if (!email) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Email é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar usuário\r\n      const user = await prisma.user.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      // Por segurança, sempre retornamos sucesso mesmo se o email não existir\r\n      if (user) {\r\n        // Aqui você implementaria o envio de email com token de reset\r\n        // Por enquanto, apenas logamos a ação\r\n        logger.info('Solicitação de reset de senha', {\r\n          userId: user.id,\r\n          email: user.email\r\n        });\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Se o email existir, você receberá instruções para reset da senha'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao solicitar reset de senha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém informações do usuário logado\r\n   */\r\n  static async getProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.id;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token de acesso inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const user = await authService.getUserById(userId);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil obtido com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao obter perfil', { error: error.message });\r\n      \r\n      let statusCode = 500;\r\n      if (error.message.includes('não encontrado')) {\r\n        statusCode = 404;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Altera senha do usuário\r\n   */\r\n  static async changePassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const userId = (req as any).user?.id;\r\n      const { currentPassword, newPassword } = req.body;\r\n      \r\n      if (!userId) {\r\n        res.status(401).json({\r\n          success: false,\r\n          message: 'Token de acesso inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      await authService.changePassword(userId, currentPassword, newPassword);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Senha alterada com sucesso'\r\n      });\r\n    } catch (error: any) {\r\n      logger.error('Erro ao alterar senha', { error: error.message });\r\n      \r\n      let statusCode = 500;\r\n      if (error.message.includes('obrigatórios') || \r\n          error.message.includes('senha deve')) {\r\n        statusCode = 400;\r\n      } else if (error.message.includes('atual incorreta')) {\r\n        statusCode = 401;\r\n      } else if (error.message.includes('não encontrado')) {\r\n        statusCode = 404;\r\n      }\r\n\r\n      res.status(statusCode).json({\r\n        success: false,\r\n        message: error.message || 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default AuthController;"],"mappingsgBK;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAfL,MAAAE,aAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAAC,OAAA;AACA,MAAAC,QAAA;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAAC,OAAA;AACA,MAAAE,QAAA;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAAI,eAAA,CAAAH,OAAA;AAOA;;;AAGA,MAAaI,cAAc;EACzB;;;EAGA,aAAaC,QAAQA,CAACC,GAAY,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC/C,IAAI;MACF,MAAMU,YAAY;MAAA;MAAA,CAAAb,cAAA,GAAAG,CAAA,OAAiBO,GAAG,CAACI,IAAI;MAE3C,MAAMC,MAAM;MAAA;MAAA,CAAAf,cAAA,GAAAG,CAAA,OAAG,MAAMD,aAAA,CAAAc,WAAW,CAACP,QAAQ,CAACI,YAAY,CAAC;MAAC;MAAAb,cAAA,GAAAG,CAAA;MAExDQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,gCAAgC;QACzCC,IAAI,EAAEN;OACP,CAAC;IACJ,CAAC,CAAC,OAAOO,KAAU,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACnBG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,2BAA2B,EAAE;QAAEA,KAAK,EAAEA,KAAK,CAACF;MAAO,CAAE,CAAC;MAEnE;MACA,IAAII,UAAU;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,GAAG;MAAC;MAAAH,cAAA,GAAAG,CAAA;MACrB,IAAImB,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,WAAW,CAAC,EAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACvCqB,UAAU,GAAG,GAAG;MAClB,CAAC,MAAM;QAAA;QAAAxB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA;QAAI;QAAA,CAAAH,cAAA,GAAA0B,CAAA,UAAAJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,cAAc,CAAC;QAAA;QAAA,CAAAzB,cAAA,GAAA0B,CAAA,UACtCJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,UAAU,CAAC;QAAA;QAAA,CAAAzB,cAAA,GAAA0B,CAAA,UAClCJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,YAAY,CAAC,GAAE;UAAA;UAAAzB,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UAC/CqB,UAAU,GAAG,GAAG;QAClB,CAAC;QAAA;QAAA;UAAAxB,cAAA,GAAA0B,CAAA;QAAA;MAAD;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAEDQ,GAAG,CAACM,MAAM,CAACO,UAAU,CAAC,CAACN,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,OAAO;QAAE;QAAA,CAAApB,cAAA,GAAA0B,CAAA,UAAAJ,KAAK,CAACF,OAAO;QAAA;QAAA,CAAApB,cAAA,GAAA0B,CAAA,UAAI,0BAA0B;OACrD,CAAC;IACJ;EACF;EAEA;;;EAGA,aAAaC,KAAKA,CAACjB,GAAY,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC5C,IAAI;MACF,MAAMyB,SAAS;MAAA;MAAA,CAAA5B,cAAA,GAAAG,CAAA,QAAqBO,GAAG,CAACI,IAAI;MAE5C,MAAMC,MAAM;MAAA;MAAA,CAAAf,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAA,CAAAc,WAAW,CAACW,KAAK,CAACC,SAAS,CAAC;MAAC;MAAA5B,cAAA,GAAAG,CAAA;MAElDQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,6BAA6B;QACtCC,IAAI,EAAEN;OACP,CAAC;IACJ,CAAC,CAAC,OAAOO,KAAU,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACnBG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,qBAAqB,EAAE;QAAEA,KAAK,EAAEA,KAAK,CAACF;MAAO,CAAE,CAAC;MAE7D;MACA,IAAII,UAAU;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,GAAG;MAAC;MAAAH,cAAA,GAAAG,CAAA;MACrB;MAAI;MAAA,CAAAH,cAAA,GAAA0B,CAAA,UAAAJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,gBAAgB,CAAC;MAAA;MAAA,CAAAzB,cAAA,GAAA0B,CAAA,UACxCJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,WAAW,CAAC,GAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACvCqB,UAAU,GAAG,GAAG;MAClB,CAAC,MAAM;QAAA;QAAAxB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA;QAAI;QAAA,CAAAH,cAAA,GAAA0B,CAAA,WAAAJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,cAAc,CAAC;QAAA;QAAA,CAAAzB,cAAA,GAAA0B,CAAA,WACtCJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,UAAU,CAAC,GAAE;UAAA;UAAAzB,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UAC7CqB,UAAU,GAAG,GAAG;QAClB,CAAC;QAAA;QAAA;UAAAxB,cAAA,GAAA0B,CAAA;QAAA;MAAD;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAEDQ,GAAG,CAACM,MAAM,CAACO,UAAU,CAAC,CAACN,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,OAAO;QAAE;QAAA,CAAApB,cAAA,GAAA0B,CAAA,WAAAJ,KAAK,CAACF,OAAO;QAAA;QAAA,CAAApB,cAAA,GAAA0B,CAAA,WAAI,0BAA0B;OACrD,CAAC;IACJ;EACF;EAEA;;;EAGA,aAAaG,YAAYA,CAACnB,GAAY,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACnD,IAAI;MACF,MAAM;QAAE0B;MAAY,CAAE;MAAA;MAAA,CAAA7B,cAAA,GAAAG,CAAA,QAAqBO,GAAG,CAACI,IAAI;MAEnD,MAAMC,MAAM;MAAA;MAAA,CAAAf,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAA,CAAAc,WAAW,CAACa,YAAY,CAACA,YAAY,CAAC;MAAC;MAAA7B,cAAA,GAAAG,CAAA;MAE5DQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,gCAAgC;QACzCC,IAAI,EAAEN;OACP,CAAC;IACJ,CAAC,CAAC,OAAOO,KAAU,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACnBG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,0BAA0B,EAAE;QAAEA,KAAK,EAAEA,KAAK,CAACF;MAAO,CAAE,CAAC;MAElE;MACA,IAAII,UAAU;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,GAAG;MAAC;MAAAH,cAAA,GAAAG,CAAA;MACrB;MAAI;MAAA,CAAAH,cAAA,GAAA0B,CAAA,WAAAJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,aAAa,CAAC;MAAA;MAAA,CAAAzB,cAAA,GAAA0B,CAAA,WACrCJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,UAAU,CAAC;MAAA;MAAA,CAAAzB,cAAA,GAAA0B,CAAA,WAClCJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,UAAU,CAAC,GAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACtCqB,UAAU,GAAG,GAAG;MAClB,CAAC;MAAA;MAAA;QAAAxB,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MAEDQ,GAAG,CAACM,MAAM,CAACO,UAAU,CAAC,CAACN,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,OAAO;QAAE;QAAA,CAAApB,cAAA,GAAA0B,CAAA,WAAAJ,KAAK,CAACF,OAAO;QAAA;QAAA,CAAApB,cAAA,GAAA0B,CAAA,WAAI,0BAA0B;OACrD,CAAC;IACJ;EACF;EAEA;;;EAGA,aAAaI,MAAMA,CAACpB,GAAY,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC7C,IAAI;MACF;MACA;MACA;MACA;MAEA,MAAM4B,MAAM;MAAA;MAAA,CAAA/B,cAAA,GAAAG,CAAA,QAAIO,GAAW,CAACsB,IAAI,EAAEC,EAAE;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MAErC,IAAI4B,MAAM,EAAE;QAAA;QAAA/B,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACVG,QAAA,CAAAiB,OAAM,CAACW,IAAI,CAAC,oBAAoB,EAAE;UAAEH;QAAM,CAAE,CAAC;MAC/C,CAAC;MAAA;MAAA;QAAA/B,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MAEDQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;OACV,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACdG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,sBAAsB,EAAE;QAAEA;MAAK,CAAE,CAAC;MAAC;MAAAtB,cAAA,GAAAG,CAAA;MAChDQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;OACV,CAAC;IACJ;EACF;EAEA;;;EAGA,aAAae,WAAWA,CAACzB,GAAY,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAClD,IAAI;MACF,MAAM6B,IAAI;MAAA;MAAA,CAAAhC,cAAA,GAAAG,CAAA,QAAIO,GAAW,CAACsB,IAAI;MAAC;MAAAhC,cAAA,GAAAG,CAAA;MAE/B,IAAI,CAAC6B,IAAI,EAAE;QAAA;QAAAhC,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACTQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UACnBC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;SACV,CAAC;QAAC;QAAApB,cAAA,GAAAG,CAAA;QACH;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MAEDQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,cAAc;QACvBC,IAAI,EAAE;UAAEW;QAAI;OACb,CAAC;IACJ,CAAC,CAAC,OAAOV,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACdG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,yBAAyB,EAAE;QAAEA;MAAK,CAAE,CAAC;MAAC;MAAAtB,cAAA,GAAAG,CAAA;MACnDQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;OACV,CAAC;IACJ;EACF;EAEA;;;EAGA,aAAagB,cAAcA,CAAC1B,GAAY,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACrD,IAAI;MACF,MAAM;QAAEkC;MAAK,CAAE;MAAA;MAAA,CAAArC,cAAA,GAAAG,CAAA,QAAGO,GAAG,CAACI,IAAI;MAAC;MAAAd,cAAA,GAAAG,CAAA;MAE3B,IAAI,CAACkC,KAAK,EAAE;QAAA;QAAArC,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACVQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UACnBC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;SACV,CAAC;QAAC;QAAApB,cAAA,GAAAG,CAAA;QACH;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAA0B,CAAA;MAAA;MAED;MACA,MAAMM,IAAI;MAAA;MAAA,CAAAhC,cAAA,GAAAG,CAAA,QAAG,MAAME,QAAA,CAAAiC,MAAM,CAACN,IAAI,CAACO,UAAU,CAAC;QACxCC,KAAK,EAAE;UAAEH;QAAK;OACf,CAAC;MAEF;MAAA;MAAArC,cAAA,GAAAG,CAAA;MACA,IAAI6B,IAAI,EAAE;QAAA;QAAAhC,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACR;QACA;QACAG,QAAA,CAAAiB,OAAM,CAACW,IAAI,CAAC,+BAA+B,EAAE;UAC3CH,MAAM,EAAEC,IAAI,CAACC,EAAE;UACfI,KAAK,EAAEL,IAAI,CAACK;SACb,CAAC;MACJ,CAAC;MAAA;MAAA;QAAArC,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MAEDQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;OACV,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACdG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,kCAAkC,EAAE;QAAEA;MAAK,CAAE,CAAC;MAAC;MAAAtB,cAAA,GAAAG,CAAA;MAC5DQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;OACV,CAAC;IACJ;EACF;EAEA;;;EAGA,aAAaqB,UAAUA,CAAC/B,GAAY,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACjD,IAAI;MACF,MAAM4B,MAAM;MAAA;MAAA,CAAA/B,cAAA,GAAAG,CAAA,QAAIO,GAAW,CAACsB,IAAI,EAAEC,EAAE;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MAErC,IAAI,CAAC4B,MAAM,EAAE;QAAA;QAAA/B,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACXQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UACnBC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;SACV,CAAC;QAAC;QAAApB,cAAA,GAAAG,CAAA;QACH;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAA0B,CAAA;MAAA;MAED,MAAMM,IAAI;MAAA;MAAA,CAAAhC,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAA,CAAAc,WAAW,CAAC0B,WAAW,CAACX,MAAM,CAAC;MAAC;MAAA/B,cAAA,GAAAG,CAAA;MAEnDQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,2BAA2B;QACpCC,IAAI,EAAE;UAAEW;QAAI;OACb,CAAC;IACJ,CAAC,CAAC,OAAOV,KAAU,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACnBG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,sBAAsB,EAAE;QAAEA,KAAK,EAAEA,KAAK,CAACF;MAAO,CAAE,CAAC;MAE9D,IAAII,UAAU;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,GAAG;MAAC;MAAAH,cAAA,GAAAG,CAAA;MACrB,IAAImB,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,gBAAgB,CAAC,EAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAC5CqB,UAAU,GAAG,GAAG;MAClB,CAAC;MAAA;MAAA;QAAAxB,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MAEDQ,GAAG,CAACM,MAAM,CAACO,UAAU,CAAC,CAACN,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,OAAO;QAAE;QAAA,CAAApB,cAAA,GAAA0B,CAAA,WAAAJ,KAAK,CAACF,OAAO;QAAA;QAAA,CAAApB,cAAA,GAAA0B,CAAA,WAAI,0BAA0B;OACrD,CAAC;IACJ;EACF;EAEA;;;EAGA,aAAaiB,cAAcA,CAACjC,GAAY,EAAEC,GAAa;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACrD,IAAI;MACF,MAAM4B,MAAM;MAAA;MAAA,CAAA/B,cAAA,GAAAG,CAAA,QAAIO,GAAW,CAACsB,IAAI,EAAEC,EAAE;MACpC,MAAM;QAAEW,eAAe;QAAEC;MAAW,CAAE;MAAA;MAAA,CAAA7C,cAAA,GAAAG,CAAA,QAAGO,GAAG,CAACI,IAAI;MAAC;MAAAd,cAAA,GAAAG,CAAA;MAElD,IAAI,CAAC4B,MAAM,EAAE;QAAA;QAAA/B,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACXQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UACnBC,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;SACV,CAAC;QAAC;QAAApB,cAAA,GAAAG,CAAA;QACH;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAA0B,CAAA;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MAED,MAAMD,aAAA,CAAAc,WAAW,CAAC2B,cAAc,CAACZ,MAAM,EAAEa,eAAe,EAAEC,WAAW,CAAC;MAAC;MAAA7C,cAAA,GAAAG,CAAA;MAEvEQ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACnBC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;OACV,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAU,EAAE;MAAA;MAAAtB,cAAA,GAAAG,CAAA;MACnBG,QAAA,CAAAiB,OAAM,CAACD,KAAK,CAAC,uBAAuB,EAAE;QAAEA,KAAK,EAAEA,KAAK,CAACF;MAAO,CAAE,CAAC;MAE/D,IAAII,UAAU;MAAA;MAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAG,GAAG;MAAC;MAAAH,cAAA,GAAAG,CAAA;MACrB;MAAI;MAAA,CAAAH,cAAA,GAAA0B,CAAA,WAAAJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,cAAc,CAAC;MAAA;MAAA,CAAAzB,cAAA,GAAA0B,CAAA,WACtCJ,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,YAAY,CAAC,GAAE;QAAA;QAAAzB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QACxCqB,UAAU,GAAG,GAAG;MAClB,CAAC,MAAM;QAAA;QAAAxB,cAAA,GAAA0B,CAAA;QAAA1B,cAAA,GAAAG,CAAA;QAAA,IAAImB,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,iBAAiB,CAAC,EAAE;UAAA;UAAAzB,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UACpDqB,UAAU,GAAG,GAAG;QAClB,CAAC,MAAM;UAAA;UAAAxB,cAAA,GAAA0B,CAAA;UAAA1B,cAAA,GAAAG,CAAA;UAAA,IAAImB,KAAK,CAACF,OAAO,CAACK,QAAQ,CAAC,gBAAgB,CAAC,EAAE;YAAA;YAAAzB,cAAA,GAAA0B,CAAA;YAAA1B,cAAA,GAAAG,CAAA;YACnDqB,UAAU,GAAG,GAAG;UAClB,CAAC;UAAA;UAAA;YAAAxB,cAAA,GAAA0B,CAAA;UAAA;QAAD;MAAA;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAEDQ,GAAG,CAACM,MAAM,CAACO,UAAU,CAAC,CAACN,IAAI,CAAC;QAC1BC,OAAO,EAAE,KAAK;QACdC,OAAO;QAAE;QAAA,CAAApB,cAAA,GAAA0B,CAAA,WAAAJ,KAAK,CAACF,OAAO;QAAA;QAAA,CAAApB,cAAA,GAAA0B,CAAA,WAAI,0BAA0B;OACrD,CAAC;IACJ;EACF;;AACD;AAAA1B,cAAA,GAAAG,CAAA;AAxRD2C,OAAA,CAAAtC,cAAA,GAAAA,cAAA;AAwRC;AAAAR,cAAA,GAAAG,CAAA;AAED2C,OAAA,CAAAvB,OAAA,GAAef,cAAc","ignoreList":[]}
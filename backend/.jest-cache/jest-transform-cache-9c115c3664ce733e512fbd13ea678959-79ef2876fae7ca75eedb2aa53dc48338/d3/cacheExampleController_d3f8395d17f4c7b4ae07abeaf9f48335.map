{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\cacheExampleController.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\cacheExampleController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { cacheService } from '../services/cacheService';\r\nimport logger from '../utils/logger';\r\n\r\n/**\r\n * Controller de exemplo demonstrando o uso do sistema de cache\r\n */\r\nexport class CacheExampleController {\r\n  /**\r\n   * Exemplo de busca com cache manual\r\n   * Demonstra como usar o cache diretamente no controller\r\n   */\r\n  static async getDataWithCache(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      \r\n      if (!id) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'ID é obrigatório'\r\n        });\r\n      }\r\n      \r\n      const cacheKey = `example:data:${id}`;\r\n      \r\n      // Tenta obter do cache primeiro\r\n      const cachedData = await cacheService.get(cacheKey);\r\n      if (cachedData) {\r\n        logger.info(`Cache hit for key: ${cacheKey}`);\r\n        return res.json({\r\n          success: true,\r\n          data: cachedData,\r\n          cached: true,\r\n          message: 'Dados obtidos do cache'\r\n        });\r\n      }\r\n      \r\n      // Simula busca no banco de dados (operação custosa)\r\n      logger.info(`Cache miss for key: ${cacheKey}, fetching from database`);\r\n      const data = await CacheExampleController.simulateExpensiveOperation(id);\r\n      \r\n      // Armazena no cache por 10 minutos\r\n      await cacheService.set(cacheKey, data, 600);\r\n      \r\n      return res.json({\r\n        success: true,\r\n        data,\r\n        cached: false,\r\n        message: 'Dados obtidos do banco de dados e armazenados no cache'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter dados com cache:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Exemplo de invalidação de cache\r\n   * Demonstra como invalidar cache após uma operação de escrita\r\n   */\r\n  static async updateDataAndInvalidateCache(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const updateData = req.body;\r\n      \r\n      if (!id) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'ID é obrigatório'\r\n        });\r\n      }\r\n      \r\n      // Simula atualização no banco de dados\r\n      const updatedData = await CacheExampleController.simulateUpdateOperation(id, updateData);\r\n      \r\n      // Invalida caches relacionados\r\n      const cacheKeys = [\r\n        `example:data:${id}`,\r\n        `example:list:*`,\r\n        `example:user:${(req as any).user?.id}:*`\r\n      ];\r\n      \r\n      // Remove cache específico\r\n      await cacheService.del(`example:data:${id}`);\r\n      \r\n      // Remove caches por padrão\r\n      await cacheService.delPattern('example:list:*');\r\n      \r\n      logger.info(`Cache invalidated for data ID: ${id}`);\r\n      \r\n      return res.json({\r\n        success: true,\r\n        data: updatedData,\r\n        message: 'Dados atualizados e cache invalidado'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar dados e invalidar cache:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Exemplo de cache com TTL dinâmico\r\n   * Demonstra como definir TTL baseado no tipo de dados\r\n   */\r\n  static async getDataWithDynamicTTL(req: Request, res: Response) {\r\n    try {\r\n      const { type, id } = req.params;\r\n      \r\n      if (!type || !id) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'Type e ID são obrigatórios'\r\n        });\r\n      }\r\n      \r\n      const cacheKey = `example:${type}:${id}`;\r\n      \r\n      // Define TTL baseado no tipo de dados\r\n      let ttl: number;\r\n      switch (type) {\r\n        case 'static':\r\n          ttl = 3600; // 1 hora para dados estáticos\r\n          break;\r\n        case 'dynamic':\r\n          ttl = 300; // 5 minutos para dados dinâmicos\r\n          break;\r\n        case 'realtime':\r\n          ttl = 60; // 1 minuto para dados em tempo real\r\n          break;\r\n        default:\r\n          ttl = 600; // 10 minutos padrão\r\n      }\r\n      \r\n      const cachedData = await cacheService.get(cacheKey);\r\n      if (cachedData) {\r\n        return res.json({\r\n          success: true,\r\n          data: cachedData,\r\n          cached: true,\r\n          ttl,\r\n          message: `Dados ${type} obtidos do cache`\r\n        });\r\n      }\r\n      \r\n      const data = await CacheExampleController.simulateExpensiveOperation(id);\r\n      await cacheService.set(cacheKey, data, ttl);\r\n      \r\n      return res.json({\r\n        success: true,\r\n        data,\r\n        cached: false,\r\n        ttl,\r\n        message: `Dados ${type} obtidos do banco e armazenados no cache por ${ttl}s`\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter dados com TTL dinâmico:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Exemplo de cache condicional\r\n   * Demonstra como cachear baseado em condições específicas\r\n   */\r\n  static async getDataWithConditionalCache(req: Request, res: Response) {\r\n    try {\r\n      const { id } = req.params;\r\n      const { useCache = 'true' } = req.query;\r\n      const userRole = (req as any).user?.role;\r\n      \r\n      if (!id) {\r\n        return res.status(400).json({\r\n          success: false,\r\n          message: 'ID é obrigatório'\r\n        });\r\n      }\r\n      \r\n      // Condições para usar cache\r\n      const shouldUseCache = \r\n        useCache === 'true' && \r\n        userRole !== 'ADMIN' && // Admins sempre veem dados frescos\r\n        !req.headers['cache-control']?.includes('no-cache');\r\n      \r\n      const cacheKey = `example:conditional:${id}:${userRole}`;\r\n      \r\n      if (shouldUseCache) {\r\n        const cachedData = await cacheService.get(cacheKey);\r\n        if (cachedData) {\r\n          return res.json({\r\n            success: true,\r\n            data: cachedData,\r\n            cached: true,\r\n            message: 'Dados obtidos do cache (condicional)'\r\n          });\r\n        }\r\n      }\r\n      \r\n      const data = await CacheExampleController.simulateExpensiveOperation(id);\r\n      \r\n      // Só armazena no cache se as condições permitirem\r\n      if (shouldUseCache) {\r\n        await cacheService.set(cacheKey, data, 300);\r\n      }\r\n      \r\n      return res.json({\r\n        success: true,\r\n        data,\r\n        cached: false,\r\n        cacheUsed: shouldUseCache,\r\n        message: shouldUseCache \r\n          ? 'Dados obtidos do banco e armazenados no cache'\r\n          : 'Dados obtidos do banco (cache desabilitado)'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter dados com cache condicional:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Endpoint para gerenciar cache\r\n   * Permite limpar, verificar status, etc.\r\n   */\r\n  static async manageCacheEndpoint(req: Request, res: Response) {\r\n    try {\r\n      const { action } = req.params;\r\n      const { pattern, key } = req.body;\r\n      \r\n      switch (action) {\r\n        case 'clear':\r\n          if (pattern) {\r\n            await cacheService.delPattern(pattern);\r\n            return res.json({ success: true, message: `Cache limpo para padrão: ${pattern}` });\r\n          } else if (key) {\r\n            await cacheService.del(key);\r\n            return res.json({ success: true, message: `Cache limpo para chave: ${key}` });\r\n          } else {\r\n            await cacheService.flush();\r\n            return res.json({ success: true, message: 'Todo o cache foi limpo' });\r\n          }\r\n          \r\n        case 'status':\r\n          const isConnected = cacheService.isRedisConnected();\r\n          const info = await cacheService.info();\r\n          return res.json({\r\n            success: true,\r\n            connected: isConnected,\r\n            info: isConnected ? info : null,\r\n            message: `Redis está ${isConnected ? 'conectado' : 'desconectado'}`\r\n          });\r\n          \r\n        case 'check':\r\n          if (!key) {\r\n            return res.status(400).json({\r\n              success: false,\r\n              message: 'Chave é obrigatória para verificar cache'\r\n            });\r\n          }\r\n          const exists = await cacheService.exists(key);\r\n          const ttl = exists ? await cacheService.ttl(key) : -2;\r\n          return res.json({\r\n            success: true,\r\n            exists,\r\n            ttl,\r\n            message: exists \r\n              ? `Chave existe com TTL de ${ttl}s` \r\n              : 'Chave não existe no cache'\r\n          });\r\n          \r\n        default:\r\n          return res.status(400).json({\r\n            success: false,\r\n            message: 'Ação inválida. Use: clear, status, ou check'\r\n          });\r\n      }\r\n    } catch (error) {\r\n      logger.error('Erro ao gerenciar cache:', error);\r\n      return res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Simula uma operação custosa (consulta ao banco, API externa, etc.)\r\n   */\r\n  private static async simulateExpensiveOperation(id: string): Promise<any> {\r\n    // Simula delay de operação custosa\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    return {\r\n      id,\r\n      name: `Item ${id}`,\r\n      description: 'Dados obtidos através de operação custosa',\r\n      timestamp: new Date().toISOString(),\r\n      processingTime: '1000ms'\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Simula uma operação de atualização\r\n   */\r\n  private static async simulateUpdateOperation(id: string, updateData: any): Promise<any> {\r\n    // Simula delay de operação de atualização\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    return {\r\n      id,\r\n      ...updateData,\r\n      updatedAt: new Date().toISOString(),\r\n      processingTime: '500ms'\r\n    };\r\n  }\r\n}"],"version":3}
{"version":3,"names":["cov_2aasxtnna8","actualCoverage","ioredis_1","s","__importDefault","require","config_1","logger_1","CacheService","redis","isConnected","constructor","f","default","host","config","cache","port","password","b","db","maxRetriesPerRequest","lazyConnect","setupEventListeners","on","info","error","warn","connect","disconnect","isRedisConnected","status","set","key","value","ttl","serializedValue","JSON","stringify","cacheTtl","setex","debug","get","parsedValue","parse","del","delMany","keys","length","join","delPattern","pattern","exists","result","expire","flush","flushdb","exports","cacheService"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\cacheService.ts"],"sourcesContent":["import Redis from 'ioredis';\r\nimport { config } from '../config/config';\r\nimport logger from '../utils/logger';\r\n\r\n/**\r\n * Serviço de cache usando Redis\r\n * Gerencia operações de cache para melhorar performance da aplicação\r\n */\r\nclass CacheService {\r\n  private redis: Redis;\r\n  private isConnected: boolean = false;\r\n\r\n  constructor() {\r\n    this.redis = new Redis({\r\n      host: config.cache.redis.host,\r\n      port: config.cache.redis.port,\r\n      password: config.cache.redis.password || '',\r\n      db: config.cache.redis.db,\r\n      maxRetriesPerRequest: 3,\r\n      lazyConnect: true,\r\n    });\r\n\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Configura os listeners de eventos do Redis\r\n   */\r\n  private setupEventListeners(): void {\r\n    this.redis.on('connect', () => {\r\n      this.isConnected = true;\r\n      logger.info('Redis connected successfully');\r\n    });\r\n\r\n    this.redis.on('error', (error) => {\r\n      this.isConnected = false;\r\n      logger.error('Redis connection error:', error);\r\n    });\r\n\r\n    this.redis.on('close', () => {\r\n      this.isConnected = false;\r\n      logger.warn('Redis connection closed');\r\n    });\r\n\r\n    this.redis.on('reconnecting', () => {\r\n      logger.info('Redis reconnecting...');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Conecta ao Redis\r\n   */\r\n  async connect(): Promise<void> {\r\n    try {\r\n      await this.redis.connect();\r\n    } catch (error) {\r\n      logger.error('Failed to connect to Redis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Desconecta do Redis\r\n   */\r\n  async disconnect(): Promise<void> {\r\n    try {\r\n      await this.redis.disconnect();\r\n      this.isConnected = false;\r\n    } catch (error) {\r\n      logger.error('Failed to disconnect from Redis:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se o Redis está conectado\r\n   */\r\n  isRedisConnected(): boolean {\r\n    return this.isConnected && this.redis.status === 'ready';\r\n  }\r\n\r\n  /**\r\n   * Define um valor no cache\r\n   * @param key - Chave do cache\r\n   * @param value - Valor a ser armazenado\r\n   * @param ttl - Tempo de vida em segundos (opcional)\r\n   */\r\n  async set(key: string, value: any, ttl?: number): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        logger.warn('Redis not connected, skipping cache set');\r\n        return;\r\n      }\r\n\r\n      const serializedValue = JSON.stringify(value);\r\n      const cacheTtl = ttl || config.cache.ttl;\r\n\r\n      await this.redis.setex(key, cacheTtl, serializedValue);\r\n      logger.debug(`Cache set: ${key} (TTL: ${cacheTtl}s)`);\r\n    } catch (error) {\r\n      logger.error(`Failed to set cache for key ${key}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém um valor do cache\r\n   * @param key - Chave do cache\r\n   * @returns Valor do cache ou null se não encontrado\r\n   */\r\n  async get<T = any>(key: string): Promise<T | null> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        logger.warn('Redis not connected, skipping cache get');\r\n        return null;\r\n      }\r\n\r\n      const value = await this.redis.get(key);\r\n      if (!value) {\r\n        return null;\r\n      }\r\n\r\n      const parsedValue = JSON.parse(value);\r\n      logger.debug(`Cache hit: ${key}`);\r\n      return parsedValue;\r\n    } catch (error) {\r\n      logger.error(`Failed to get cache for key ${key}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um valor do cache\r\n   * @param key - Chave do cache\r\n   */\r\n  async del(key: string): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        logger.warn('Redis not connected, skipping cache delete');\r\n        return;\r\n      }\r\n\r\n      await this.redis.del(key);\r\n      logger.debug(`Cache deleted: ${key}`);\r\n    } catch (error) {\r\n      logger.error(`Failed to delete cache for key ${key}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove múltiplas chaves do cache\r\n   * @param keys - Array de chaves do cache\r\n   */\r\n  async delMany(keys: string[]): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected() || keys.length === 0) {\r\n        return;\r\n      }\r\n\r\n      await this.redis.del(...keys);\r\n      logger.debug(`Cache deleted: ${keys.join(', ')}`);\r\n    } catch (error) {\r\n      logger.error(`Failed to delete cache for keys ${keys.join(', ')}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove todas as chaves que correspondem ao padrão\r\n   * @param pattern - Padrão das chaves (ex: 'user:*')\r\n   */\r\n  async delPattern(pattern: string): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return;\r\n      }\r\n\r\n      const keys = await this.redis.keys(pattern);\r\n      if (keys.length > 0) {\r\n        await this.redis.del(...keys);\r\n        logger.debug(`Cache pattern deleted: ${pattern} (${keys.length} keys)`);\r\n      }\r\n    } catch (error) {\r\n      logger.error(`Failed to delete cache pattern ${pattern}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se uma chave existe no cache\r\n   * @param key - Chave do cache\r\n   * @returns True se a chave existe\r\n   */\r\n  async exists(key: string): Promise<boolean> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return false;\r\n      }\r\n\r\n      const result = await this.redis.exists(key);\r\n      return result === 1;\r\n    } catch (error) {\r\n      logger.error(`Failed to check cache existence for key ${key}:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Define o tempo de vida de uma chave\r\n   * @param key - Chave do cache\r\n   * @param ttl - Tempo de vida em segundos\r\n   */\r\n  async expire(key: string, ttl: number): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return;\r\n      }\r\n\r\n      await this.redis.expire(key, ttl);\r\n      logger.debug(`Cache TTL set: ${key} (${ttl}s)`);\r\n    } catch (error) {\r\n      logger.error(`Failed to set TTL for key ${key}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém o tempo de vida restante de uma chave\r\n   * @param key - Chave do cache\r\n   * @returns Tempo de vida em segundos (-1 se não tem TTL, -2 se não existe)\r\n   */\r\n  async ttl(key: string): Promise<number> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return -2;\r\n      }\r\n\r\n      return await this.redis.ttl(key);\r\n    } catch (error) {\r\n      logger.error(`Failed to get TTL for key ${key}:`, error);\r\n      return -2;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpa todo o cache\r\n   */\r\n  async flush(): Promise<void> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return;\r\n      }\r\n\r\n      await this.redis.flushdb();\r\n      logger.info('Cache flushed');\r\n    } catch (error) {\r\n      logger.error('Failed to flush cache:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém informações sobre o Redis\r\n   */\r\n  async info(): Promise<any> {\r\n    try {\r\n      if (!this.isRedisConnected()) {\r\n        return null;\r\n      }\r\n\r\n      const info = await this.redis.info();\r\n      return info;\r\n    } catch (error) {\r\n      logger.error('Failed to get Redis info:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Instância singleton do serviço de cache\r\nexport const cacheService = new CacheService();\r\n\r\n// Exportar a classe para testes\r\nexport { CacheService };"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAVV,MAAAE,SAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,QAAA;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,OAAAE,OAAA;AACA,MAAAE,QAAA;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,OAAAC,eAAA,CAAAC,OAAA;AAEA;;;;AAIA,MAAMG,YAAY;EACRC,KAAK;EACLC,WAAW;EAAA;EAAA,CAAAV,cAAA,GAAAG,CAAA,OAAY,KAAK;EAEpCQ,YAAA;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACE,IAAI,CAACM,KAAK,GAAG,IAAIP,SAAA,CAAAW,OAAK,CAAC;MACrBC,IAAI,EAAER,QAAA,CAAAS,MAAM,CAACC,KAAK,CAACP,KAAK,CAACK,IAAI;MAC7BG,IAAI,EAAEX,QAAA,CAAAS,MAAM,CAACC,KAAK,CAACP,KAAK,CAACQ,IAAI;MAC7BC,QAAQ;MAAE;MAAA,CAAAlB,cAAA,GAAAmB,CAAA,UAAAb,QAAA,CAAAS,MAAM,CAACC,KAAK,CAACP,KAAK,CAACS,QAAQ;MAAA;MAAA,CAAAlB,cAAA,GAAAmB,CAAA,UAAI,EAAE;MAC3CC,EAAE,EAAEd,QAAA,CAAAS,MAAM,CAACC,KAAK,CAACP,KAAK,CAACW,EAAE;MACzBC,oBAAoB,EAAE,CAAC;MACvBC,WAAW,EAAE;KACd,CAAC;IAAC;IAAAtB,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACoB,mBAAmB,EAAE;EAC5B;EAEA;;;EAGQA,mBAAmBA,CAAA;IAAA;IAAAvB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACzB,IAAI,CAACM,KAAK,CAACe,EAAE,CAAC,SAAS,EAAE,MAAK;MAAA;MAAAxB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAC5B,IAAI,CAACO,WAAW,GAAG,IAAI;MAAC;MAAAV,cAAA,GAAAG,CAAA;MACxBI,QAAA,CAAAM,OAAM,CAACY,IAAI,CAAC,8BAA8B,CAAC;IAC7C,CAAC,CAAC;IAAC;IAAAzB,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACM,KAAK,CAACe,EAAE,CAAC,OAAO,EAAGE,KAAK,IAAI;MAAA;MAAA1B,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAC/B,IAAI,CAACO,WAAW,GAAG,KAAK;MAAC;MAAAV,cAAA,GAAAG,CAAA;MACzBI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAChD,CAAC,CAAC;IAAC;IAAA1B,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACM,KAAK,CAACe,EAAE,CAAC,OAAO,EAAE,MAAK;MAAA;MAAAxB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MAC1B,IAAI,CAACO,WAAW,GAAG,KAAK;MAAC;MAAAV,cAAA,GAAAG,CAAA;MACzBI,QAAA,CAAAM,OAAM,CAACc,IAAI,CAAC,yBAAyB,CAAC;IACxC,CAAC,CAAC;IAAC;IAAA3B,cAAA,GAAAG,CAAA;IAEH,IAAI,CAACM,KAAK,CAACe,EAAE,CAAC,cAAc,EAAE,MAAK;MAAA;MAAAxB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAG,CAAA;MACjCI,QAAA,CAAAM,OAAM,CAACY,IAAI,CAAC,uBAAuB,CAAC;IACtC,CAAC,CAAC;EACJ;EAEA;;;EAGA,MAAMG,OAAOA,CAAA;IAAA;IAAA5B,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACX,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,MAAM,IAAI,CAACM,KAAK,CAACmB,OAAO,EAAE;IAC5B,CAAC,CAAC,OAAOF,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACnD,MAAMuB,KAAK;IACb;EACF;EAEA;;;EAGA,MAAMG,UAAUA,CAAA;IAAA;IAAA7B,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACd,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,MAAM,IAAI,CAACM,KAAK,CAACoB,UAAU,EAAE;MAAC;MAAA7B,cAAA,GAAAG,CAAA;MAC9B,IAAI,CAACO,WAAW,GAAG,KAAK;IAC1B,CAAC,CAAC,OAAOgB,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACzD;EACF;EAEA;;;EAGAI,gBAAgBA,CAAA;IAAA;IAAA9B,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACd,OAAO,2BAAAH,cAAA,GAAAmB,CAAA,cAAI,CAACT,WAAW;IAAA;IAAA,CAAAV,cAAA,GAAAmB,CAAA,UAAI,IAAI,CAACV,KAAK,CAACsB,MAAM,KAAK,OAAO;EAC1D;EAEA;;;;;;EAMA,MAAMC,GAAGA,CAACC,GAAW,EAAEC,KAAU,EAAEC,GAAY;IAAA;IAAAnC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC7C,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5BI,QAAA,CAAAM,OAAM,CAACc,IAAI,CAAC,yCAAyC,CAAC;QAAC;QAAA3B,cAAA,GAAAG,CAAA;QACvD;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAED,MAAMiB,eAAe;MAAA;MAAA,CAAApC,cAAA,GAAAG,CAAA,QAAGkC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC;MAC7C,MAAMK,QAAQ;MAAA;MAAA,CAAAvC,cAAA,GAAAG,CAAA;MAAG;MAAA,CAAAH,cAAA,GAAAmB,CAAA,UAAAgB,GAAG;MAAA;MAAA,CAAAnC,cAAA,GAAAmB,CAAA,UAAIb,QAAA,CAAAS,MAAM,CAACC,KAAK,CAACmB,GAAG;MAAC;MAAAnC,cAAA,GAAAG,CAAA;MAEzC,MAAM,IAAI,CAACM,KAAK,CAAC+B,KAAK,CAACP,GAAG,EAAEM,QAAQ,EAAEH,eAAe,CAAC;MAAC;MAAApC,cAAA,GAAAG,CAAA;MACvDI,QAAA,CAAAM,OAAM,CAAC4B,KAAK,CAAC,cAAcR,GAAG,UAAUM,QAAQ,IAAI,CAAC;IACvD,CAAC,CAAC,OAAOb,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,+BAA+BO,GAAG,GAAG,EAAEP,KAAK,CAAC;IAC5D;EACF;EAEA;;;;;EAKA,MAAMgB,GAAGA,CAAUT,GAAW;IAAA;IAAAjC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC5B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5BI,QAAA,CAAAM,OAAM,CAACc,IAAI,CAAC,yCAAyC,CAAC;QAAC;QAAA3B,cAAA,GAAAG,CAAA;QACvD,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAED,MAAMe,KAAK;MAAA;MAAA,CAAAlC,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACM,KAAK,CAACiC,GAAG,CAACT,GAAG,CAAC;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MACxC,IAAI,CAAC+B,KAAK,EAAE;QAAA;QAAAlC,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QACV,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAED,MAAMwB,WAAW;MAAA;MAAA,CAAA3C,cAAA,GAAAG,CAAA,QAAGkC,IAAI,CAACO,KAAK,CAACV,KAAK,CAAC;MAAC;MAAAlC,cAAA,GAAAG,CAAA;MACtCI,QAAA,CAAAM,OAAM,CAAC4B,KAAK,CAAC,cAAcR,GAAG,EAAE,CAAC;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MAClC,OAAOwC,WAAW;IACpB,CAAC,CAAC,OAAOjB,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,+BAA+BO,GAAG,GAAG,EAAEP,KAAK,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MAC3D,OAAO,IAAI;IACb;EACF;EAEA;;;;EAIA,MAAM0C,GAAGA,CAACZ,GAAW;IAAA;IAAAjC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACnB,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5BI,QAAA,CAAAM,OAAM,CAACc,IAAI,CAAC,4CAA4C,CAAC;QAAC;QAAA3B,cAAA,GAAAG,CAAA;QAC1D;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAAAnB,cAAA,GAAAG,CAAA;MAED,MAAM,IAAI,CAACM,KAAK,CAACoC,GAAG,CAACZ,GAAG,CAAC;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MAC1BI,QAAA,CAAAM,OAAM,CAAC4B,KAAK,CAAC,kBAAkBR,GAAG,EAAE,CAAC;IACvC,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,kCAAkCO,GAAG,GAAG,EAAEP,KAAK,CAAC;IAC/D;EACF;EAEA;;;;EAIA,MAAMoB,OAAOA,CAACC,IAAc;IAAA;IAAA/C,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC1B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF;MAAI;MAAA,CAAAH,cAAA,GAAAmB,CAAA,YAAC,IAAI,CAACW,gBAAgB,EAAE;MAAA;MAAA,CAAA9B,cAAA,GAAAmB,CAAA,WAAI4B,IAAI,CAACC,MAAM,KAAK,CAAC,GAAE;QAAA;QAAAhD,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QACjD;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAAAnB,cAAA,GAAAG,CAAA;MAED,MAAM,IAAI,CAACM,KAAK,CAACoC,GAAG,CAAC,GAAGE,IAAI,CAAC;MAAC;MAAA/C,cAAA,GAAAG,CAAA;MAC9BI,QAAA,CAAAM,OAAM,CAAC4B,KAAK,CAAC,kBAAkBM,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACnD,CAAC,CAAC,OAAOvB,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,mCAAmCqB,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAEvB,KAAK,CAAC;IAC5E;EACF;EAEA;;;;EAIA,MAAMwB,UAAUA,CAACC,OAAe;IAAA;IAAAnD,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IAC9B,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5B;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAED,MAAM4B,IAAI;MAAA;MAAA,CAAA/C,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACM,KAAK,CAACsC,IAAI,CAACI,OAAO,CAAC;MAAC;MAAAnD,cAAA,GAAAG,CAAA;MAC5C,IAAI4C,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QAAA;QAAAhD,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QACnB,MAAM,IAAI,CAACM,KAAK,CAACoC,GAAG,CAAC,GAAGE,IAAI,CAAC;QAAC;QAAA/C,cAAA,GAAAG,CAAA;QAC9BI,QAAA,CAAAM,OAAM,CAAC4B,KAAK,CAAC,0BAA0BU,OAAO,KAAKJ,IAAI,CAACC,MAAM,QAAQ,CAAC;MACzE,CAAC;MAAA;MAAA;QAAAhD,cAAA,GAAAmB,CAAA;MAAA;IACH,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,kCAAkCyB,OAAO,GAAG,EAAEzB,KAAK,CAAC;IACnE;EACF;EAEA;;;;;EAKA,MAAM0B,MAAMA,CAACnB,GAAW;IAAA;IAAAjC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACtB,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5B,OAAO,KAAK;MACd,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAED,MAAMkC,MAAM;MAAA;MAAA,CAAArD,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACM,KAAK,CAAC2C,MAAM,CAACnB,GAAG,CAAC;MAAC;MAAAjC,cAAA,GAAAG,CAAA;MAC5C,OAAOkD,MAAM,KAAK,CAAC;IACrB,CAAC,CAAC,OAAO3B,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,2CAA2CO,GAAG,GAAG,EAAEP,KAAK,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACvE,OAAO,KAAK;IACd;EACF;EAEA;;;;;EAKA,MAAMmD,MAAMA,CAACrB,GAAW,EAAEE,GAAW;IAAA;IAAAnC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACnC,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5B;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAAAnB,cAAA,GAAAG,CAAA;MAED,MAAM,IAAI,CAACM,KAAK,CAAC6C,MAAM,CAACrB,GAAG,EAAEE,GAAG,CAAC;MAAC;MAAAnC,cAAA,GAAAG,CAAA;MAClCI,QAAA,CAAAM,OAAM,CAAC4B,KAAK,CAAC,kBAAkBR,GAAG,KAAKE,GAAG,IAAI,CAAC;IACjD,CAAC,CAAC,OAAOT,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,6BAA6BO,GAAG,GAAG,EAAEP,KAAK,CAAC;IAC1D;EACF;EAEA;;;;;EAKA,MAAMS,GAAGA,CAACF,GAAW;IAAA;IAAAjC,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACnB,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5B,OAAO,CAAC,CAAC;MACX,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAAAnB,cAAA,GAAAG,CAAA;MAED,OAAO,MAAM,IAAI,CAACM,KAAK,CAAC0B,GAAG,CAACF,GAAG,CAAC;IAClC,CAAC,CAAC,OAAOP,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,6BAA6BO,GAAG,GAAG,EAAEP,KAAK,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACzD,OAAO,CAAC,CAAC;IACX;EACF;EAEA;;;EAGA,MAAMoD,KAAKA,CAAA;IAAA;IAAAvD,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACT,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5B;MACF,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAAAnB,cAAA,GAAAG,CAAA;MAED,MAAM,IAAI,CAACM,KAAK,CAAC+C,OAAO,EAAE;MAAC;MAAAxD,cAAA,GAAAG,CAAA;MAC3BI,QAAA,CAAAM,OAAM,CAACY,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC/C;EACF;EAEA;;;EAGA,MAAMD,IAAIA,CAAA;IAAA;IAAAzB,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAG,CAAA;IACR,IAAI;MAAA;MAAAH,cAAA,GAAAG,CAAA;MACF,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,EAAE;QAAA;QAAA9B,cAAA,GAAAmB,CAAA;QAAAnB,cAAA,GAAAG,CAAA;QAC5B,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAH,cAAA,GAAAmB,CAAA;MAAA;MAED,MAAMM,IAAI;MAAA;MAAA,CAAAzB,cAAA,GAAAG,CAAA,SAAG,MAAM,IAAI,CAACM,KAAK,CAACgB,IAAI,EAAE;MAAC;MAAAzB,cAAA,GAAAG,CAAA;MACrC,OAAOsB,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA;MAAA1B,cAAA,GAAAG,CAAA;MACdI,QAAA,CAAAM,OAAM,CAACa,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAAC;MAAA1B,cAAA,GAAAG,CAAA;MACjD,OAAO,IAAI;IACb;EACF;;AACD;AAAAH,cAAA,GAAAG,CAAA;AAMQsD,OAAA,CAAAjD,YAAA,GAAAA,YAAA;AAJT;AAAA;AAAAR,cAAA,GAAAG,CAAA;AACasD,OAAA,CAAAC,YAAY,GAAG,IAAIlD,YAAY,EAAE","ignoreList":[]}
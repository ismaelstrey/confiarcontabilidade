de3bf1ba858b862a534afe382ea1d712
"use strict";

/* istanbul ignore next */
function cov_9nlidh6a4() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\newsletterController.ts";
  var hash = "39210ebe381ef280e0cb01fc76875e907be61f6c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\newsletterController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 22
        },
        end: {
          line: 37,
          column: 1
        }
      },
      "36": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "37": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 62
        }
      },
      "38": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 38
        }
      },
      "39": {
        start: {
          line: 40,
          column: 17
        },
        end: {
          line: 40,
          column: 42
        }
      },
      "40": {
        start: {
          line: 41,
          column: 35
        },
        end: {
          line: 41,
          column: 63
        }
      },
      "41": {
        start: {
          line: 42,
          column: 15
        },
        end: {
          line: 42,
          column: 46
        }
      },
      "42": {
        start: {
          line: 43,
          column: 17
        },
        end: {
          line: 43,
          column: 60
        }
      },
      "43": {
        start: {
          line: 44,
          column: 15
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "44": {
        start: {
          line: 52,
          column: 33
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "45": {
        start: {
          line: 74,
          column: 32
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "46": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "47": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 74
        }
      },
      "48": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 24
        }
      },
      "49": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "50": {
        start: {
          line: 108,
          column: 27
        },
        end: {
          line: 108,
          column: 48
        }
      },
      "51": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "52": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 114,
          column: 19
        }
      },
      "53": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 23
        }
      },
      "54": {
        start: {
          line: 117,
          column: 49
        },
        end: {
          line: 117,
          column: 57
        }
      },
      "55": {
        start: {
          line: 119,
          column: 39
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "56": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "57": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 129,
          column: 17
        }
      },
      "58": {
        start: {
          line: 124,
          column: 20
        },
        end: {
          line: 127,
          column: 23
        }
      },
      "59": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 27
        }
      },
      "60": {
        start: {
          line: 131,
          column: 42
        },
        end: {
          line: 138,
          column: 18
        }
      },
      "61": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 143,
          column: 19
        }
      },
      "62": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 156,
          column: 19
        }
      },
      "63": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 23
        }
      },
      "64": {
        start: {
          line: 160,
          column: 38
        },
        end: {
          line: 160,
          column: 76
        }
      },
      "65": {
        start: {
          line: 162,
          column: 31
        },
        end: {
          line: 169,
          column: 14
        }
      },
      "66": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 175,
          column: 15
        }
      },
      "67": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 190,
          column: 15
        }
      },
      "68": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 104
        }
      },
      "69": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 197,
          column: 15
        }
      },
      "70": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "71": {
        start: {
          line: 265,
          column: 30
        },
        end: {
          line: 265,
          column: 40
        }
      },
      "72": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "73": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 270,
          column: 19
        }
      },
      "74": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 23
        }
      },
      "75": {
        start: {
          line: 274,
          column: 31
        },
        end: {
          line: 278,
          column: 14
        }
      },
      "76": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "77": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 283,
          column: 19
        }
      },
      "78": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 23
        }
      },
      "79": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 302,
          column: 15
        }
      },
      "80": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 101
        }
      },
      "81": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 309,
          column: 15
        }
      },
      "82": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "83": {
        start: {
          line: 317,
          column: 30
        },
        end: {
          line: 317,
          column: 40
        }
      },
      "84": {
        start: {
          line: 318,
          column: 54
        },
        end: {
          line: 318,
          column: 62
        }
      },
      "85": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 325,
          column: 13
        }
      },
      "86": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 323,
          column: 19
        }
      },
      "87": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 23
        }
      },
      "88": {
        start: {
          line: 327,
          column: 31
        },
        end: {
          line: 331,
          column: 14
        }
      },
      "89": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "90": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 336,
          column: 19
        }
      },
      "91": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 23
        }
      },
      "92": {
        start: {
          line: 340,
          column: 38
        },
        end: {
          line: 350,
          column: 14
        }
      },
      "93": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 354,
          column: 15
        }
      },
      "94": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 365,
          column: 15
        }
      },
      "95": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 77
        }
      },
      "96": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 372,
          column: 15
        }
      },
      "97": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "98": {
        start: {
          line: 380,
          column: 30
        },
        end: {
          line: 380,
          column: 40
        }
      },
      "99": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "100": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 385,
          column: 19
        }
      },
      "101": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 23
        }
      },
      "102": {
        start: {
          line: 389,
          column: 31
        },
        end: {
          line: 394,
          column: 14
        }
      },
      "103": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 401,
          column: 13
        }
      },
      "104": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 399,
          column: 19
        }
      },
      "105": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 23
        }
      },
      "106": {
        start: {
          line: 403,
          column: 40
        },
        end: {
          line: 409,
          column: 14
        }
      },
      "107": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 414,
          column: 15
        }
      },
      "108": {
        start: {
          line: 415,
          column: 12
        },
        end: {
          line: 427,
          column: 15
        }
      },
      "109": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 430,
          column: 102
        }
      },
      "110": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 434,
          column: 15
        }
      },
      "111": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 503,
          column: 9
        }
      },
      "112": {
        start: {
          line: 442,
          column: 30
        },
        end: {
          line: 442,
          column: 40
        }
      },
      "113": {
        start: {
          line: 443,
          column: 30
        },
        end: {
          line: 443,
          column: 38
        }
      },
      "114": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 460,
          column: 13
        }
      },
      "115": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 453,
          column: 19
        }
      },
      "116": {
        start: {
          line: 455,
          column: 17
        },
        end: {
          line: 460,
          column: 13
        }
      },
      "117": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 459,
          column: 19
        }
      },
      "118": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 467,
          column: 13
        }
      },
      "119": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 465,
          column: 19
        }
      },
      "120": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 23
        }
      },
      "121": {
        start: {
          line: 469,
          column: 37
        },
        end: {
          line: 469,
          column: 75
        }
      },
      "122": {
        start: {
          line: 471,
          column: 43
        },
        end: {
          line: 477,
          column: 14
        }
      },
      "123": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 483,
          column: 15
        }
      },
      "124": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 495,
          column: 15
        }
      },
      "125": {
        start: {
          line: 498,
          column: 12
        },
        end: {
          line: 498,
          column: 76
        }
      },
      "126": {
        start: {
          line: 499,
          column: 12
        },
        end: {
          line: 502,
          column: 15
        }
      },
      "127": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 582,
          column: 9
        }
      },
      "128": {
        start: {
          line: 510,
          column: 121
        },
        end: {
          line: 510,
          column: 130
        }
      },
      "129": {
        start: {
          line: 511,
          column: 25
        },
        end: {
          line: 511,
          column: 59
        }
      },
      "130": {
        start: {
          line: 512,
          column: 25
        },
        end: {
          line: 512,
          column: 38
        }
      },
      "131": {
        start: {
          line: 514,
          column: 26
        },
        end: {
          line: 514,
          column: 28
        }
      },
      "132": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 517,
          column: 13
        }
      },
      "133": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 516,
          column: 38
        }
      },
      "134": {
        start: {
          line: 518,
          column: 12
        },
        end: {
          line: 523,
          column: 13
        }
      },
      "135": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 522,
          column: 18
        }
      },
      "136": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 534,
          column: 13
        }
      },
      "137": {
        start: {
          line: 525,
          column: 16
        },
        end: {
          line: 525,
          column: 37
        }
      },
      "138": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 528,
          column: 17
        }
      },
      "139": {
        start: {
          line: 527,
          column: 20
        },
        end: {
          line: 527,
          column: 61
        }
      },
      "140": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 533,
          column: 17
        }
      },
      "141": {
        start: {
          line: 530,
          column: 36
        },
        end: {
          line: 530,
          column: 52
        }
      },
      "142": {
        start: {
          line: 531,
          column: 20
        },
        end: {
          line: 531,
          column: 54
        }
      },
      "143": {
        start: {
          line: 532,
          column: 20
        },
        end: {
          line: 532,
          column: 50
        }
      },
      "144": {
        start: {
          line: 536,
          column: 28
        },
        end: {
          line: 536,
          column: 30
        }
      },
      "145": {
        start: {
          line: 537,
          column: 12
        },
        end: {
          line: 537,
          column: 40
        }
      },
      "146": {
        start: {
          line: 539,
          column: 41
        },
        end: {
          line: 547,
          column: 14
        }
      },
      "147": {
        start: {
          line: 548,
          column: 31
        },
        end: {
          line: 548,
          column: 54
        }
      },
      "148": {
        start: {
          line: 550,
          column: 32
        },
        end: {
          line: 550,
          column: 92
        }
      },
      "149": {
        start: {
          line: 551,
          column: 34
        },
        end: {
          line: 551,
          column: 95
        }
      },
      "150": {
        start: {
          line: 552,
          column: 31
        },
        end: {
          line: 558,
          column: 13
        }
      },
      "151": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 574,
          column: 15
        }
      },
      "152": {
        start: {
          line: 577,
          column: 12
        },
        end: {
          line: 577,
          column: 74
        }
      },
      "153": {
        start: {
          line: 578,
          column: 12
        },
        end: {
          line: 581,
          column: 15
        }
      },
      "154": {
        start: {
          line: 588,
          column: 8
        },
        end: {
          line: 634,
          column: 9
        }
      },
      "155": {
        start: {
          line: 590,
          column: 27
        },
        end: {
          line: 590,
          column: 48
        }
      },
      "156": {
        start: {
          line: 591,
          column: 12
        },
        end: {
          line: 598,
          column: 13
        }
      },
      "157": {
        start: {
          line: 592,
          column: 16
        },
        end: {
          line: 596,
          column: 19
        }
      },
      "158": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 597,
          column: 23
        }
      },
      "159": {
        start: {
          line: 599,
          column: 32
        },
        end: {
          line: 599,
          column: 40
        }
      },
      "160": {
        start: {
          line: 600,
          column: 84
        },
        end: {
          line: 600,
          column: 92
        }
      },
      "161": {
        start: {
          line: 613,
          column: 29
        },
        end: {
          line: 613,
          column: 64
        }
      },
      "162": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 619,
          column: 15
        }
      },
      "163": {
        start: {
          line: 620,
          column: 12
        },
        end: {
          line: 626,
          column: 15
        }
      },
      "164": {
        start: {
          line: 629,
          column: 12
        },
        end: {
          line: 629,
          column: 72
        }
      },
      "165": {
        start: {
          line: 630,
          column: 12
        },
        end: {
          line: 633,
          column: 15
        }
      },
      "166": {
        start: {
          line: 640,
          column: 8
        },
        end: {
          line: 699,
          column: 9
        }
      },
      "167": {
        start: {
          line: 641,
          column: 95
        },
        end: {
          line: 641,
          column: 104
        }
      },
      "168": {
        start: {
          line: 642,
          column: 25
        },
        end: {
          line: 642,
          column: 59
        }
      },
      "169": {
        start: {
          line: 643,
          column: 25
        },
        end: {
          line: 643,
          column: 38
        }
      },
      "170": {
        start: {
          line: 645,
          column: 26
        },
        end: {
          line: 645,
          column: 28
        }
      },
      "171": {
        start: {
          line: 646,
          column: 12
        },
        end: {
          line: 648,
          column: 13
        }
      },
      "172": {
        start: {
          line: 647,
          column: 16
        },
        end: {
          line: 647,
          column: 38
        }
      },
      "173": {
        start: {
          line: 650,
          column: 28
        },
        end: {
          line: 650,
          column: 30
        }
      },
      "174": {
        start: {
          line: 651,
          column: 12
        },
        end: {
          line: 651,
          column: 40
        }
      },
      "175": {
        start: {
          line: 671,
          column: 30
        },
        end: {
          line: 671,
          column: 32
        }
      },
      "176": {
        start: {
          line: 672,
          column: 26
        },
        end: {
          line: 672,
          column: 27
        }
      },
      "177": {
        start: {
          line: 673,
          column: 31
        },
        end: {
          line: 673,
          column: 54
        }
      },
      "178": {
        start: {
          line: 674,
          column: 12
        },
        end: {
          line: 691,
          column: 15
        }
      },
      "179": {
        start: {
          line: 678,
          column: 58
        },
        end: {
          line: 681,
          column: 21
        }
      },
      "180": {
        start: {
          line: 694,
          column: 12
        },
        end: {
          line: 694,
          column: 74
        }
      },
      "181": {
        start: {
          line: 695,
          column: 12
        },
        end: {
          line: 698,
          column: 15
        }
      },
      "182": {
        start: {
          line: 705,
          column: 8
        },
        end: {
          line: 768,
          column: 9
        }
      },
      "183": {
        start: {
          line: 706,
          column: 27
        },
        end: {
          line: 706,
          column: 37
        }
      },
      "184": {
        start: {
          line: 707,
          column: 32
        },
        end: {
          line: 707,
          column: 40
        }
      },
      "185": {
        start: {
          line: 708,
          column: 12
        },
        end: {
          line: 714,
          column: 13
        }
      },
      "186": {
        start: {
          line: 709,
          column: 16
        },
        end: {
          line: 712,
          column: 19
        }
      },
      "187": {
        start: {
          line: 713,
          column: 16
        },
        end: {
          line: 713,
          column: 23
        }
      },
      "188": {
        start: {
          line: 727,
          column: 32
        },
        end: {
          line: 730,
          column: 14
        }
      },
      "189": {
        start: {
          line: 731,
          column: 12
        },
        end: {
          line: 737,
          column: 13
        }
      },
      "190": {
        start: {
          line: 732,
          column: 16
        },
        end: {
          line: 735,
          column: 19
        }
      },
      "191": {
        start: {
          line: 736,
          column: 16
        },
        end: {
          line: 736,
          column: 23
        }
      },
      "192": {
        start: {
          line: 749,
          column: 12
        },
        end: {
          line: 753,
          column: 15
        }
      },
      "193": {
        start: {
          line: 754,
          column: 12
        },
        end: {
          line: 760,
          column: 15
        }
      },
      "194": {
        start: {
          line: 763,
          column: 12
        },
        end: {
          line: 763,
          column: 100
        }
      },
      "195": {
        start: {
          line: 764,
          column: 12
        },
        end: {
          line: 767,
          column: 15
        }
      },
      "196": {
        start: {
          line: 774,
          column: 8
        },
        end: {
          line: 842,
          column: 9
        }
      },
      "197": {
        start: {
          line: 775,
          column: 38
        },
        end: {
          line: 775,
          column: 47
        }
      },
      "198": {
        start: {
          line: 776,
          column: 31
        },
        end: {
          line: 776,
          column: 45
        }
      },
      "199": {
        start: {
          line: 777,
          column: 30
        },
        end: {
          line: 777,
          column: 40
        }
      },
      "200": {
        start: {
          line: 778,
          column: 12
        },
        end: {
          line: 778,
          column: 64
        }
      },
      "201": {
        start: {
          line: 779,
          column: 69
        },
        end: {
          line: 809,
          column: 14
        }
      },
      "202": {
        start: {
          line: 784,
          column: 48
        },
        end: {
          line: 787,
          column: 17
        }
      },
      "203": {
        start: {
          line: 810,
          column: 31
        },
        end: {
          line: 829,
          column: 13
        }
      },
      "204": {
        start: {
          line: 812,
          column: 65
        },
        end: {
          line: 812,
          column: 82
        }
      },
      "205": {
        start: {
          line: 814,
          column: 24
        },
        end: {
          line: 814,
          column: 81
        }
      },
      "206": {
        start: {
          line: 815,
          column: 24
        },
        end: {
          line: 815,
          column: 35
        }
      },
      "207": {
        start: {
          line: 830,
          column: 12
        },
        end: {
          line: 834,
          column: 15
        }
      },
      "208": {
        start: {
          line: 837,
          column: 12
        },
        end: {
          line: 837,
          column: 90
        }
      },
      "209": {
        start: {
          line: 838,
          column: 12
        },
        end: {
          line: 841,
          column: 15
        }
      },
      "210": {
        start: {
          line: 848,
          column: 8
        },
        end: {
          line: 905,
          column: 9
        }
      },
      "211": {
        start: {
          line: 849,
          column: 27
        },
        end: {
          line: 849,
          column: 37
        }
      },
      "212": {
        start: {
          line: 850,
          column: 32
        },
        end: {
          line: 850,
          column: 40
        }
      },
      "213": {
        start: {
          line: 851,
          column: 12
        },
        end: {
          line: 857,
          column: 13
        }
      },
      "214": {
        start: {
          line: 852,
          column: 16
        },
        end: {
          line: 855,
          column: 19
        }
      },
      "215": {
        start: {
          line: 856,
          column: 16
        },
        end: {
          line: 856,
          column: 23
        }
      },
      "216": {
        start: {
          line: 859,
          column: 38
        },
        end: {
          line: 868,
          column: 14
        }
      },
      "217": {
        start: {
          line: 869,
          column: 12
        },
        end: {
          line: 875,
          column: 13
        }
      },
      "218": {
        start: {
          line: 870,
          column: 16
        },
        end: {
          line: 873,
          column: 19
        }
      },
      "219": {
        start: {
          line: 874,
          column: 16
        },
        end: {
          line: 874,
          column: 23
        }
      },
      "220": {
        start: {
          line: 877,
          column: 33
        },
        end: {
          line: 883,
          column: 13
        }
      },
      "221": {
        start: {
          line: 885,
          column: 12
        },
        end: {
          line: 889,
          column: 15
        }
      },
      "222": {
        start: {
          line: 890,
          column: 12
        },
        end: {
          line: 897,
          column: 15
        }
      },
      "223": {
        start: {
          line: 900,
          column: 12
        },
        end: {
          line: 900,
          column: 100
        }
      },
      "224": {
        start: {
          line: 901,
          column: 12
        },
        end: {
          line: 904,
          column: 15
        }
      },
      "225": {
        start: {
          line: 908,
          column: 0
        },
        end: {
          line: 908,
          column: 52
        }
      },
      "226": {
        start: {
          line: 909,
          column: 0
        },
        end: {
          line: 909,
          column: 39
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 35,
            column: 57
          }
        },
        loc: {
          start: {
            line: 35,
            column: 71
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 35
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        },
        loc: {
          start: {
            line: 95,
            column: 31
          },
          end: {
            line: 100,
            column: 9
          }
        },
        line: 95
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 37
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 105
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 42
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 263
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 45
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 315
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 47
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 378
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 440,
            column: 4
          },
          end: {
            line: 440,
            column: 5
          }
        },
        loc: {
          start: {
            line: 440,
            column: 39
          },
          end: {
            line: 504,
            column: 5
          }
        },
        line: 440
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 508,
            column: 4
          },
          end: {
            line: 508,
            column: 5
          }
        },
        loc: {
          start: {
            line: 508,
            column: 42
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 508
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 587,
            column: 4
          },
          end: {
            line: 587,
            column: 5
          }
        },
        loc: {
          start: {
            line: 587,
            column: 42
          },
          end: {
            line: 635,
            column: 5
          }
        },
        line: 587
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 639,
            column: 4
          },
          end: {
            line: 639,
            column: 5
          }
        },
        loc: {
          start: {
            line: 639,
            column: 40
          },
          end: {
            line: 700,
            column: 5
          }
        },
        line: 639
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 678,
            column: 45
          },
          end: {
            line: 678,
            column: 46
          }
        },
        loc: {
          start: {
            line: 678,
            column: 58
          },
          end: {
            line: 681,
            column: 21
          }
        },
        line: 678
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 704,
            column: 4
          },
          end: {
            line: 704,
            column: 5
          }
        },
        loc: {
          start: {
            line: 704,
            column: 40
          },
          end: {
            line: 769,
            column: 5
          }
        },
        line: 704
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 773,
            column: 4
          },
          end: {
            line: 773,
            column: 5
          }
        },
        loc: {
          start: {
            line: 773,
            column: 46
          },
          end: {
            line: 843,
            column: 5
          }
        },
        line: 773
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 784,
            column: 24
          },
          end: {
            line: 784,
            column: 25
          }
        },
        loc: {
          start: {
            line: 784,
            column: 48
          },
          end: {
            line: 787,
            column: 17
          }
        },
        line: 784
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 812,
            column: 50
          },
          end: {
            line: 812,
            column: 51
          }
        },
        loc: {
          start: {
            line: 812,
            column: 65
          },
          end: {
            line: 812,
            column: 82
          }
        },
        line: 812
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 813,
            column: 53
          },
          end: {
            line: 813,
            column: 54
          }
        },
        loc: {
          start: {
            line: 813,
            column: 68
          },
          end: {
            line: 816,
            column: 21
          }
        },
        line: 813
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 847,
            column: 4
          },
          end: {
            line: 847,
            column: 5
          }
        },
        loc: {
          start: {
            line: 847,
            column: 53
          },
          end: {
            line: 906,
            column: 5
          }
        },
        line: 847
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 35,
            column: 22
          },
          end: {
            line: 37,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 23
          },
          end: {
            line: 35,
            column: 27
          }
        }, {
          start: {
            line: 35,
            column: 31
          },
          end: {
            line: 35,
            column: 51
          }
        }, {
          start: {
            line: 35,
            column: 56
          },
          end: {
            line: 37,
            column: 1
          }
        }],
        line: 35
      },
      "18": {
        loc: {
          start: {
            line: 36,
            column: 11
          },
          end: {
            line: 36,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 37
          },
          end: {
            line: 36,
            column: 40
          }
        }, {
          start: {
            line: 36,
            column: 43
          },
          end: {
            line: 36,
            column: 61
          }
        }],
        line: 36
      },
      "19": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 36,
            column: 15
          }
        }, {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 36,
            column: 33
          }
        }],
        line: 36
      },
      "20": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "21": {
        loc: {
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "22": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 158,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "23": {
        loc: {
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "24": {
        loc: {
          start: {
            line: 135,
            column: 30
          },
          end: {
            line: 135,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 30
          },
          end: {
            line: 135,
            column: 34
          }
        }, {
          start: {
            line: 135,
            column: 38
          },
          end: {
            line: 135,
            column: 61
          }
        }],
        line: 135
      },
      "25": {
        loc: {
          start: {
            line: 165,
            column: 26
          },
          end: {
            line: 165,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 26
          },
          end: {
            line: 165,
            column: 30
          }
        }, {
          start: {
            line: 165,
            column: 34
          },
          end: {
            line: 165,
            column: 38
          }
        }],
        line: 165
      },
      "26": {
        loc: {
          start: {
            line: 166,
            column: 33
          },
          end: {
            line: 166,
            column: 144
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 47
          },
          end: {
            line: 166,
            column: 74
          }
        }, {
          start: {
            line: 166,
            column: 77
          },
          end: {
            line: 166,
            column: 144
          }
        }],
        line: 166
      },
      "27": {
        loc: {
          start: {
            line: 174,
            column: 22
          },
          end: {
            line: 174,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 22
          },
          end: {
            line: 174,
            column: 26
          }
        }, {
          start: {
            line: 174,
            column: 30
          },
          end: {
            line: 174,
            column: 45
          }
        }],
        line: 174
      },
      "28": {
        loc: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "29": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 285,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "30": {
        loc: {
          start: {
            line: 294,
            column: 37
          },
          end: {
            line: 298,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 294,
            column: 62
          },
          end: {
            line: 294,
            column: 96
          }
        }, {
          start: {
            line: 294,
            column: 99
          },
          end: {
            line: 298,
            column: 25
          }
        }],
        line: 294
      },
      "31": {
        loc: {
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 12
          },
          end: {
            line: 325,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "32": {
        loc: {
          start: {
            line: 332,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 12
          },
          end: {
            line: 338,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 332
      },
      "33": {
        loc: {
          start: {
            line: 344,
            column: 35
          },
          end: {
            line: 344,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 35
          },
          end: {
            line: 344,
            column: 44
          }
        }, {
          start: {
            line: 344,
            column: 48
          },
          end: {
            line: 344,
            column: 56
          }
        }],
        line: 344
      },
      "34": {
        loc: {
          start: {
            line: 345,
            column: 36
          },
          end: {
            line: 345,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 36
          },
          end: {
            line: 345,
            column: 46
          }
        }, {
          start: {
            line: 345,
            column: 50
          },
          end: {
            line: 345,
            column: 52
          }
        }],
        line: 345
      },
      "35": {
        loc: {
          start: {
            line: 346,
            column: 32
          },
          end: {
            line: 346,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 32
          },
          end: {
            line: 346,
            column: 38
          }
        }, {
          start: {
            line: 346,
            column: 42
          },
          end: {
            line: 346,
            column: 44
          }
        }],
        line: 346
      },
      "36": {
        loc: {
          start: {
            line: 362,
            column: 37
          },
          end: {
            line: 362,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 362,
            column: 69
          },
          end: {
            line: 362,
            column: 110
          }
        }, {
          start: {
            line: 362,
            column: 113
          },
          end: {
            line: 362,
            column: 117
          }
        }],
        line: 362
      },
      "37": {
        loc: {
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "38": {
        loc: {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 401,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 401,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "39": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 460,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 460,
            column: 13
          }
        }, {
          start: {
            line: 455,
            column: 17
          },
          end: {
            line: 460,
            column: 13
          }
        }],
        line: 445
      },
      "40": {
        loc: {
          start: {
            line: 455,
            column: 17
          },
          end: {
            line: 460,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 17
          },
          end: {
            line: 460,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "41": {
        loc: {
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 467,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 467,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "42": {
        loc: {
          start: {
            line: 482,
            column: 24
          },
          end: {
            line: 482,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 482,
            column: 32
          },
          end: {
            line: 482,
            column: 39
          }
        }, {
          start: {
            line: 482,
            column: 42
          },
          end: {
            line: 482,
            column: 49
          }
        }],
        line: 482
      },
      "43": {
        loc: {
          start: {
            line: 510,
            column: 54
          },
          end: {
            line: 510,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 510,
            column: 61
          },
          end: {
            line: 510,
            column: 62
          }
        }],
        line: 510
      },
      "44": {
        loc: {
          start: {
            line: 510,
            column: 64
          },
          end: {
            line: 510,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 510,
            column: 72
          },
          end: {
            line: 510,
            column: 74
          }
        }],
        line: 510
      },
      "45": {
        loc: {
          start: {
            line: 510,
            column: 76
          },
          end: {
            line: 510,
            column: 96
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 510,
            column: 85
          },
          end: {
            line: 510,
            column: 96
          }
        }],
        line: 510
      },
      "46": {
        loc: {
          start: {
            line: 510,
            column: 98
          },
          end: {
            line: 510,
            column: 116
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 510,
            column: 110
          },
          end: {
            line: 510,
            column: 116
          }
        }],
        line: 510
      },
      "47": {
        loc: {
          start: {
            line: 515,
            column: 12
          },
          end: {
            line: 517,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 515,
            column: 12
          },
          end: {
            line: 517,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 515
      },
      "48": {
        loc: {
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 523,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 523,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 518
      },
      "49": {
        loc: {
          start: {
            line: 524,
            column: 12
          },
          end: {
            line: 534,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 12
          },
          end: {
            line: 534,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 524
      },
      "50": {
        loc: {
          start: {
            line: 524,
            column: 16
          },
          end: {
            line: 524,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 524,
            column: 16
          },
          end: {
            line: 524,
            column: 24
          }
        }, {
          start: {
            line: 524,
            column: 28
          },
          end: {
            line: 524,
            column: 34
          }
        }],
        line: 524
      },
      "51": {
        loc: {
          start: {
            line: 526,
            column: 16
          },
          end: {
            line: 528,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 526,
            column: 16
          },
          end: {
            line: 528,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 526
      },
      "52": {
        loc: {
          start: {
            line: 529,
            column: 16
          },
          end: {
            line: 533,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 529,
            column: 16
          },
          end: {
            line: 533,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 529
      },
      "53": {
        loc: {
          start: {
            line: 591,
            column: 12
          },
          end: {
            line: 598,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 591,
            column: 12
          },
          end: {
            line: 598,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 591
      },
      "54": {
        loc: {
          start: {
            line: 641,
            column: 28
          },
          end: {
            line: 641,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 641,
            column: 35
          },
          end: {
            line: 641,
            column: 36
          }
        }],
        line: 641
      },
      "55": {
        loc: {
          start: {
            line: 641,
            column: 38
          },
          end: {
            line: 641,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 641,
            column: 46
          },
          end: {
            line: 641,
            column: 48
          }
        }],
        line: 641
      },
      "56": {
        loc: {
          start: {
            line: 641,
            column: 50
          },
          end: {
            line: 641,
            column: 70
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 641,
            column: 59
          },
          end: {
            line: 641,
            column: 70
          }
        }],
        line: 641
      },
      "57": {
        loc: {
          start: {
            line: 641,
            column: 72
          },
          end: {
            line: 641,
            column: 90
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 641,
            column: 84
          },
          end: {
            line: 641,
            column: 90
          }
        }],
        line: 641
      },
      "58": {
        loc: {
          start: {
            line: 646,
            column: 12
          },
          end: {
            line: 648,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 646,
            column: 12
          },
          end: {
            line: 648,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 646
      },
      "59": {
        loc: {
          start: {
            line: 680,
            column: 40
          },
          end: {
            line: 680,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 680,
            column: 66
          },
          end: {
            line: 680,
            column: 101
          }
        }, {
          start: {
            line: 680,
            column: 104
          },
          end: {
            line: 680,
            column: 108
          }
        }],
        line: 680
      },
      "60": {
        loc: {
          start: {
            line: 708,
            column: 12
          },
          end: {
            line: 714,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 708,
            column: 12
          },
          end: {
            line: 714,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 708
      },
      "61": {
        loc: {
          start: {
            line: 731,
            column: 12
          },
          end: {
            line: 737,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 731,
            column: 12
          },
          end: {
            line: 737,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 731
      },
      "62": {
        loc: {
          start: {
            line: 775,
            column: 20
          },
          end: {
            line: 775,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 775,
            column: 29
          },
          end: {
            line: 775,
            column: 33
          }
        }],
        line: 775
      },
      "63": {
        loc: {
          start: {
            line: 814,
            column: 28
          },
          end: {
            line: 814,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 814,
            column: 44
          },
          end: {
            line: 814,
            column: 52
          }
        }, {
          start: {
            line: 814,
            column: 55
          },
          end: {
            line: 814,
            column: 65
          }
        }],
        line: 814
      },
      "64": {
        loc: {
          start: {
            line: 851,
            column: 12
          },
          end: {
            line: 857,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 851,
            column: 12
          },
          end: {
            line: 857,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 851
      },
      "65": {
        loc: {
          start: {
            line: 869,
            column: 12
          },
          end: {
            line: 875,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 869,
            column: 12
          },
          end: {
            line: 875,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 869
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0],
      "44": [0],
      "45": [0],
      "46": [0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0],
      "55": [0],
      "56": [0],
      "57": [0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0]
    },
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\newsletterController.ts",
      mappings: "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",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\newsletterController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nconst { body, validationResult } = require('express-validator');\r\nimport * as crypto from 'crypto';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de newsletter\r\ninterface NewsletterData {\r\n  email: string;\r\n  name?: string;\r\n  preferences?: {\r\n    frequency: 'daily' | 'weekly' | 'monthly';\r\n    categories: string[];\r\n  };\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface NewsletterFilters {\r\n  status?: 'ACTIVE' | 'UNSUBSCRIBED' | 'PENDING';\r\n  search?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'email' | 'name';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n// Interface para dados de campanha\r\ninterface CampaignData {\r\n  subject: string;\r\n  content: string;\r\n  htmlContent?: string;\r\n  scheduledFor?: Date;\r\n  targetAudience?: {\r\n    status?: string[];\r\n    categories?: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Controller respons\xE1vel pelo gerenciamento de newsletter\r\n */\r\nexport class NewsletterController {\r\n  /**\r\n   * Valida\xE7\xF5es para inscri\xE7\xE3o na newsletter\r\n   */\r\n  static subscribeValidation = [\r\n    body('email')\r\n      .isEmail()\r\n      .withMessage('Email deve ser v\xE1lido')\r\n      .normalizeEmail(),\r\n    body('name')\r\n      .optional()\r\n      .isLength({ min: 2, max: 100 })\r\n      .withMessage('Nome deve ter entre 2 e 100 caracteres')\r\n      .trim(),\r\n    body('preferences.frequency')\r\n      .optional()\r\n      .isIn(['daily', 'weekly', 'monthly'])\r\n      .withMessage('Frequ\xEAncia deve ser daily, weekly ou monthly'),\r\n    body('preferences.categories')\r\n      .optional()\r\n      .isArray()\r\n      .withMessage('Categorias devem ser um array')\r\n  ];\r\n\r\n  /**\r\n   * Valida\xE7\xF5es para campanha\r\n   */\r\n  static campaignValidation = [\r\n    body('subject')\r\n      .notEmpty()\r\n      .withMessage('Assunto \xE9 obrigat\xF3rio')\r\n      .isLength({ min: 5, max: 200 })\r\n      .withMessage('Assunto deve ter entre 5 e 200 caracteres')\r\n      .trim(),\r\n    body('content')\r\n      .notEmpty()\r\n      .withMessage('Conte\xFAdo \xE9 obrigat\xF3rio')\r\n      .isLength({ min: 10 })\r\n      .withMessage('Conte\xFAdo deve ter pelo menos 10 caracteres')\r\n      .trim(),\r\n    body('htmlContent')\r\n      .optional()\r\n      .isLength({ min: 10 })\r\n      .withMessage('Conte\xFAdo HTML deve ter pelo menos 10 caracteres'),\r\n    body('scheduledFor')\r\n      .optional()\r\n      .isISO8601()\r\n      .withMessage('Data de agendamento deve ser v\xE1lida')\r\n      .custom((value: string) => {\r\n        if (new Date(value) <= new Date()) {\r\n          throw new Error('Data de agendamento deve ser no futuro');\r\n        }\r\n        return true;\r\n      })\r\n  ];\r\n\r\n  /**\r\n   * Inscreve um email na newsletter\r\n   */\r\n  static async subscribe(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Verificar valida\xE7\xF5es\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados inv\xE1lidos',\r\n          errors: errors.array()\r\n        });\r\n        return;\r\n      }\r\n\r\n      const { email, name, preferences }: NewsletterData = req.body;\r\n\r\n      // Verificar se j\xE1 existe\r\n      const existingSubscriber = await prisma.newsletter.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      if (existingSubscriber) {\r\n        if (existingSubscriber.isActive === true) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email j\xE1 est\xE1 inscrito na newsletter'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Reativar se estava inativo\r\n        const updatedSubscriber = await prisma.newsletter.update({\r\n          where: { email },\r\n          data: {\r\n            isActive: true,\r\n            name: name || existingSubscriber.name,\r\n            updatedAt: new Date()\r\n          }\r\n        });\r\n\r\n        // Log da a\xE7\xE3o\r\n        logger.info('Newsletter reativada', {\r\n          email,\r\n          subscriberId: updatedSubscriber.id\r\n        });\r\n\r\n        res.status(200).json({\r\n          success: true,\r\n          message: 'Inscri\xE7\xE3o reativada com sucesso',\r\n          data: {\r\n            subscriber: {\r\n              id: updatedSubscriber.id,\r\n              email: updatedSubscriber.email,\r\n              name: updatedSubscriber.name,\r\n              isActive: updatedSubscriber.isActive,\r\n              subscribedAt: updatedSubscriber.createdAt\r\n            }\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar token de confirma\xE7\xE3o\r\n      const confirmationToken = crypto.randomBytes(32).toString('hex');\r\n\r\n      // Criar nova inscri\xE7\xE3o\r\n      const subscriber = await prisma.newsletter.create({\r\n        data: {\r\n          email,\r\n          name: name || null,\r\n          preferences: preferences ? JSON.stringify(preferences) : JSON.stringify({ frequency: 'weekly', categories: [], topics: [] }),\r\n          isActive: false // TODO: Implementar sistema de confirma\xE7\xE3o adequado\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Nova inscri\xE7\xE3o na newsletter', {\r\n        email,\r\n        subscriberId: subscriber.id,\r\n        name: name || 'N\xE3o informado'\r\n      });\r\n\r\n      // TODO: Enviar email de confirma\xE7\xE3o\r\n      // await emailService.sendConfirmationEmail(email, confirmationToken);\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Inscri\xE7\xE3o realizada com sucesso. Verifique seu email para confirmar.',\r\n        data: {\r\n          subscriber: {\r\n            id: subscriber.id,\r\n            email: subscriber.email,\r\n            name: subscriber.name,\r\n            isActive: subscriber.isActive,\r\n            subscribedAt: subscriber.createdAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao inscrever na newsletter', { error, email: req.body.email });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirma inscri\xE7\xE3o na newsletter\r\n   */\r\n  // static async confirmSubscription(req: Request, res: Response): Promise<void> {\r\n  //   try {\r\n  //     const { token } = req.params;\r\n\r\n  //     if (!token) {\r\n  //       res.status(400).json({\r\n  //         success: false,\r\n  //         message: 'Token \xE9 obrigat\xF3rio'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Buscar assinante pelo token (simulando - em produ\xE7\xE3o seria um token real)\r\n  //     const subscriber = await prisma.newsletter.findFirst({\r\n  //       where: {\r\n  //         email: { contains: token }, // Simplificado para demo\r\n  //         isActive: false\r\n  //       }\r\n  //     });\r\n\r\n  //     if (!subscriber) {\r\n  //       res.status(404).json({\r\n  //         success: false,\r\n  //         message: 'Token inv\xE1lido ou inscri\xE7\xE3o j\xE1 confirmada'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Confirmar inscri\xE7\xE3o\r\n  //     const confirmedSubscriber = await prisma.newsletter.update({\r\n  //       where: { id: subscriber.id },\r\n  //       data: {\r\n  //         isActive: true,\r\n  //         updatedAt: new Date()\r\n  //       }\r\n  //     });\r\n\r\n  //     logger.info('Inscri\xE7\xE3o confirmada', {\r\n  //       subscriberId: subscriber.id,\r\n  //       email: subscriber.email\r\n  //     });\r\n\r\n  //     res.status(200).json({\r\n  //       success: true,\r\n  //       message: 'Inscri\xE7\xE3o confirmada com sucesso',\r\n  //       data: {\r\n  //         subscriber: {\r\n  //           id: confirmedSubscriber.id,\r\n  //           email: confirmedSubscriber.email,\r\n  //           name: confirmedSubscriber.name,\r\n  //           isActive: confirmedSubscriber.isActive,\r\n  //           updatedAt: confirmedSubscriber.updatedAt\r\n  //         }\r\n  //       }\r\n  //     });\r\n  //   } catch (error) {\r\n  //     logger.error('Erro ao confirmar inscri\xE7\xE3o', { error, token: req.params.token });\r\n  //     res.status(500).json({\r\n  //       success: false,\r\n  //       message: 'Erro interno do servidor'\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Obt\xE9m prefer\xEAncias do assinante\r\n   */\r\n  static async getPreferences(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinante pelo token (simulando - em produ\xE7\xE3o seria um token real)\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: { contains: token } // Simplificado para demo\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Assinante n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Prefer\xEAncias obtidas com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: subscriber.id,\r\n            email: subscriber.email,\r\n            name: subscriber.name,\r\n            preferences: subscriber.preferences ? JSON.parse(subscriber.preferences) : {\r\n              frequency: 'weekly',\r\n              categories: [],\r\n              topics: []\r\n            },\r\n            isActive: subscriber.isActive\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter prefer\xEAncias', { error, token: req.params.token });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza prefer\xEAncias do assinante\r\n   */\r\n  static async updatePreferences(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n      const { frequency, categories, topics } = req.body;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinante pelo token (simulando - em produ\xE7\xE3o seria um token real)\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: { contains: token } // Simplificado para demo\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Assinante n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar prefer\xEAncias\r\n      const updatedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          preferences: JSON.stringify({\r\n            frequency: frequency || 'weekly',\r\n            categories: categories || [],\r\n            topics: topics || []\r\n          }),\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      logger.info('Prefer\xEAncias atualizadas', {\r\n        subscriberId: subscriber.id,\r\n        email: subscriber.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Prefer\xEAncias atualizadas com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: updatedSubscriber.id,\r\n            email: updatedSubscriber.email,\r\n            preferences: updatedSubscriber.preferences ? JSON.parse(updatedSubscriber.preferences) : null\r\n          }\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar prefer\xEAncias:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirma inscri\xE7\xE3o na newsletter\r\n   */\r\n  static async confirmSubscription(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token de confirma\xE7\xE3o \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar confirmationToken no schema\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: token, // Usando token como email temporariamente\r\n          isActive: false\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Token inv\xE1lido ou inscri\xE7\xE3o j\xE1 confirmada'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Confirmar inscri\xE7\xE3o\r\n      const confirmedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          isActive: true,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Inscri\xE7\xE3o confirmada', {\r\n        email: subscriber.email,\r\n        subscriberId: subscriber.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscri\xE7\xE3o confirmada com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: confirmedSubscriber.id,\r\n            email: confirmedSubscriber.email,\r\n            name: confirmedSubscriber.name,\r\n            isActive: confirmedSubscriber.isActive,\r\n            updatedAt: confirmedSubscriber.updatedAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao confirmar inscri\xE7\xE3o', { error, token: req.params.token });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancela inscri\xE7\xE3o na newsletter\r\n   */\r\n  static async unsubscribe(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n      const { email } = req.body;\r\n\r\n      let subscriber;\r\n\r\n      if (token) {\r\n        // Cancelamento via token (link no email)\r\n        // TODO: Implementar tokens de confirma\xE7\xE3o e cancelamento no schema\r\n        subscriber = await prisma.newsletter.findFirst({\r\n          where: {\r\n            email: token, // Usando token como email temporariamente\r\n            isActive: true\r\n          }\r\n        });\r\n      } else if (email) {\r\n        // Cancelamento via email\r\n        subscriber = await prisma.newsletter.findFirst({\r\n          where: { email, isActive: true }\r\n        });\r\n      }\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Inscri\xE7\xE3o n\xE3o encontrada ou j\xE1 cancelada'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar token de cancelamento\r\n      const unsubscribeToken = crypto.randomBytes(32).toString('hex');\r\n\r\n      // Cancelar inscri\xE7\xE3o\r\n      const unsubscribedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Inscri\xE7\xE3o cancelada', {\r\n        email: subscriber.email,\r\n        subscriberId: subscriber.id,\r\n        method: token ? 'token' : 'email'\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscri\xE7\xE3o cancelada com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: unsubscribedSubscriber.id,\r\n            email: unsubscribedSubscriber.email,\r\n            isActive: unsubscribedSubscriber.isActive,\r\n            updatedAt: unsubscribedSubscriber.updatedAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao cancelar inscri\xE7\xE3o', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista inscritos com pagina\xE7\xE3o e filtros (Admin)\r\n   */\r\n  static async getSubscribers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        status,\r\n        search,\r\n        dateFrom,\r\n        dateTo,\r\n        page = 1,\r\n        limit = 20,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: NewsletterFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (status) {\r\n        where.status = status;\r\n      }\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { email: { contains: search, mode: 'insensitive' } },\r\n          { name: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.createdAt = {};\r\n        if (dateFrom) {\r\n          where.createdAt.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.createdAt.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Definir ordena\xE7\xE3o\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar inscritos\r\n      const [subscribers, total] = await Promise.all([\r\n        prisma.newsletter.findMany({\r\n          where,\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.newsletter.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      // Estat\xEDsticas por status ativo/inativo\r\n      const activeCount = await prisma.newsletter.count({ where: { isActive: true } });\r\n      const inactiveCount = await prisma.newsletter.count({ where: { isActive: false } });\r\n\r\n      const statistics = {\r\n        total,\r\n        byStatus: {\r\n          active: activeCount,\r\n          inactive: inactiveCount\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscritos listados com sucesso',\r\n        data: {\r\n          subscribers: subscribers,\r\n          statistics,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar inscritos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria uma nova campanha de newsletter (Admin)\r\n   */\r\n  static async createCampaign(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Verificar valida\xE7\xF5es\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados inv\xE1lidos',\r\n          errors: errors.array()\r\n        });\r\n        return;\r\n      }\r\n\r\n      const currentUser = (req as any).user;\r\n      const { subject, content, htmlContent, scheduledFor, targetAudience }: CampaignData = req.body;\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const campaign = await prisma.newsletterCampaign.create({\r\n      //   data: {\r\n      //     subject,\r\n      //     content,\r\n      //     htmlContent: htmlContent || null,\r\n      //     status: scheduledFor ? 'SCHEDULED' : 'DRAFT',\r\n      //     scheduledFor: scheduledFor ? new Date(scheduledFor) : null,\r\n      //     targetAudience: targetAudience ? JSON.stringify(targetAudience) : null,\r\n      //     createdById: currentUser.id\r\n      //   }\r\n      // });\r\n      \r\n      const campaign = { id: 'temp-id', subject, content };\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Campanha de newsletter criada', {\r\n        campaignId: campaign.id,\r\n        subject: campaign.subject,\r\n        createdBy: currentUser.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Campanha criada com sucesso',\r\n        data: {\r\n          campaign: campaign\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar campanha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista campanhas (Admin)\r\n   */\r\n  static async getCampaigns(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        status,\r\n        page = 1,\r\n        limit = 20,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      } = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n      if (status) {\r\n        where.status = status;\r\n      }\r\n\r\n      // Definir ordena\xE7\xE3o\r\n      const orderBy: any = {};\r\n      orderBy[sortBy as string] = sortOrder;\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const [campaigns, total] = await Promise.all([\r\n      //   prisma.newsletterCampaign.findMany({\r\n      //     where,\r\n      //     include: {\r\n      //       createdBy: {\r\n      //         select: {\r\n      //           id: true,\r\n      //           name: true,\r\n      //           email: true\r\n      //         }\r\n      //       }\r\n      //     },\r\n      //     skip,\r\n      //     take,\r\n      //     orderBy\r\n      //   }),\r\n      //   prisma.newsletterCampaign.count({ where })\r\n      // ]);\r\n      \r\n      const campaigns: any[] = [];\r\n      const total = 0;\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Campanhas listadas com sucesso',\r\n        data: {\r\n          campaigns: campaigns.map(campaign => ({\r\n            ...campaign,\r\n            targetAudience: campaign.targetAudience ? JSON.parse(campaign.targetAudience) : null\r\n          })),\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar campanhas', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envia uma campanha (Admin)\r\n   */\r\n  static async sendCampaign(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID da campanha \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const campaign = await prisma.newsletterCampaign.findUnique({\r\n      //   where: { id }\r\n      // });\r\n\r\n      // if (!campaign) {\r\n      //   res.status(404).json({\r\n      //     success: false,\r\n      //     message: 'Campanha n\xE3o encontrada'\r\n      //   });\r\n      //   return;\r\n      // }\r\n\r\n      // Buscar destinat\xE1rios ativos\r\n      const subscribers = await prisma.newsletter.findMany({\r\n        where: { isActive: true },\r\n        select: { id: true, email: true, name: true }\r\n      });\r\n\r\n      if (subscribers.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum destinat\xE1rio encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar envio real de emails\r\n      // await emailService.sendCampaign(campaign, subscribers);\r\n\r\n      // TODO: Implementar envio real de emails e atualiza\xE7\xE3o de campanha\r\n      // await prisma.newsletterCampaign.update({\r\n      //   where: { id },\r\n      //   data: {\r\n      //     status: 'SENT',\r\n      //     updatedAt: new Date()\r\n      //   }\r\n      // });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Newsletter enviada', {\r\n        campaignId: id,\r\n        recipientCount: subscribers.length,\r\n        sentBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Newsletter enviada com sucesso para ${subscribers.length} destinat\xE1rios`,\r\n        data: {\r\n          recipientCount: subscribers.length\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao enviar campanha', { error, campaignId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obt\xE9m estat\xEDsticas da newsletter (Admin)\r\n   */\r\n  static async getNewsletterStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const [subscriberStats, campaignStats, recentActivity] = await Promise.all([\r\n        // Estat\xEDsticas de inscritos por status ativo/inativo\r\n        Promise.all([\r\n          prisma.newsletter.count({ where: { isActive: true } }),\r\n          prisma.newsletter.count({ where: { isActive: false } })\r\n        ]).then(([active, inactive]) => [\r\n          { isActive: true, _count: active },\r\n          { isActive: false, _count: inactive }\r\n        ]),\r\n        // TODO: Implementar estat\xEDsticas de campanhas quando modelo for criado\r\n        // prisma.newsletterCampaign.groupBy({\r\n        //   by: ['status'],\r\n        //   _count: true,\r\n        //   _sum: { recipientCount: true }\r\n        // }),\r\n        Promise.resolve([]),\r\n        // Atividade recente\r\n        prisma.newsletter.findMany({\r\n          where: {\r\n            createdAt: { gte: dateLimit }\r\n          },\r\n          select: {\r\n            id: true,\r\n            email: true,\r\n            isActive: true,\r\n            createdAt: true\r\n          },\r\n          orderBy: { createdAt: 'desc' },\r\n          take: 10\r\n        })\r\n      ]);\r\n\r\n      const statistics = {\r\n        subscribers: {\r\n          total: subscriberStats.reduce((acc, stat) => acc + stat._count, 0),\r\n          byStatus: subscriberStats.reduce((acc, stat) => {\r\n            acc[stat.isActive ? 'active' : 'inactive'] = stat._count;\r\n            return acc;\r\n          }, {} as any)\r\n        },\r\n        // TODO: Implementar estat\xEDsticas de campanhas quando modelo for criado\r\n        campaigns: {\r\n          total: 0,\r\n          totalRecipients: 0,\r\n          byStatus: {}\r\n        },\r\n        recentActivity: {\r\n          period: periodDays,\r\n          newSubscribers: recentActivity.length,\r\n          subscribers: recentActivity\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estat\xEDsticas obtidas com sucesso',\r\n        data: { statistics }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estat\xEDsticas da newsletter', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envia uma campanha para os assinantes (Admin)\r\n   */\r\n  static async sendCampaignToSubscribers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID da campanha \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinantes ativos\r\n      const activeSubscribers = await prisma.newsletter.findMany({\r\n        where: {\r\n          isActive: true\r\n        },\r\n        select: {\r\n          id: true,\r\n          email: true,\r\n          name: true\r\n        }\r\n      });\r\n\r\n      if (activeSubscribers.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum assinante ativo encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Simular envio da campanha\r\n      const campaignData = {\r\n        id,\r\n        subject: `Campanha ${id}`,\r\n        content: 'Conte\xFAdo da campanha...',\r\n        recipients: activeSubscribers.length,\r\n        sentAt: new Date()\r\n      };\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Campanha enviada', {\r\n        campaignId: id,\r\n        recipients: activeSubscribers.length,\r\n        sentBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Campanha enviada com sucesso para ${activeSubscribers.length} assinantes`,\r\n        data: {\r\n          campaign: campaignData,\r\n          recipients: activeSubscribers.length\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao enviar campanha', { error, campaignId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default NewsletterController;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "39210ebe381ef280e0cb01fc76875e907be61f6c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9nlidh6a4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9nlidh6a4();
var __createBinding =
/* istanbul ignore next */
(cov_9nlidh6a4().s[0]++,
/* istanbul ignore next */
(cov_9nlidh6a4().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_9nlidh6a4().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_9nlidh6a4().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_9nlidh6a4().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_9nlidh6a4().f[0]++;
  cov_9nlidh6a4().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_9nlidh6a4().b[2][0]++;
    cov_9nlidh6a4().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_9nlidh6a4().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_9nlidh6a4().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_9nlidh6a4().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[5][1]++,
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_9nlidh6a4().b[3][0]++;
    cov_9nlidh6a4().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_9nlidh6a4().f[1]++;
        cov_9nlidh6a4().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_9nlidh6a4().b[3][1]++;
  }
  cov_9nlidh6a4().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_9nlidh6a4().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_9nlidh6a4().f[2]++;
  cov_9nlidh6a4().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_9nlidh6a4().b[7][0]++;
    cov_9nlidh6a4().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_9nlidh6a4().b[7][1]++;
  }
  cov_9nlidh6a4().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_9nlidh6a4().s[11]++,
/* istanbul ignore next */
(cov_9nlidh6a4().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_9nlidh6a4().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_9nlidh6a4().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_9nlidh6a4().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_9nlidh6a4().f[3]++;
  cov_9nlidh6a4().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_9nlidh6a4().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_9nlidh6a4().f[4]++;
  cov_9nlidh6a4().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_9nlidh6a4().s[14]++,
/* istanbul ignore next */
(cov_9nlidh6a4().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_9nlidh6a4().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_9nlidh6a4().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_9nlidh6a4().f[5]++;
  cov_9nlidh6a4().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[6]++;
    cov_9nlidh6a4().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_9nlidh6a4().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_9nlidh6a4().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_9nlidh6a4().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[17]++, []);
      /* istanbul ignore next */
      cov_9nlidh6a4().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_9nlidh6a4().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_9nlidh6a4().b[12][0]++;
          cov_9nlidh6a4().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_9nlidh6a4().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_9nlidh6a4().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_9nlidh6a4().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_9nlidh6a4().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[8]++;
    cov_9nlidh6a4().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_9nlidh6a4().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_9nlidh6a4().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_9nlidh6a4().b[13][0]++;
      cov_9nlidh6a4().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_9nlidh6a4().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_9nlidh6a4().s[26]++, {});
    /* istanbul ignore next */
    cov_9nlidh6a4().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_9nlidh6a4().b[15][0]++;
      cov_9nlidh6a4().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_9nlidh6a4().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_9nlidh6a4().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_9nlidh6a4().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_9nlidh6a4().b[16][0]++;
          cov_9nlidh6a4().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_9nlidh6a4().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_9nlidh6a4().b[15][1]++;
    }
    cov_9nlidh6a4().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_9nlidh6a4().s[34]++;
    return result;
  };
}()));
var __importDefault =
/* istanbul ignore next */
(cov_9nlidh6a4().s[35]++,
/* istanbul ignore next */
(cov_9nlidh6a4().b[17][0]++, this) &&
/* istanbul ignore next */
(cov_9nlidh6a4().b[17][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_9nlidh6a4().b[17][2]++, function (mod) {
  /* istanbul ignore next */
  cov_9nlidh6a4().f[9]++;
  cov_9nlidh6a4().s[36]++;
  return /* istanbul ignore next */(cov_9nlidh6a4().b[19][0]++, mod) &&
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[19][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[18][0]++, mod) :
  /* istanbul ignore next */
  (cov_9nlidh6a4().b[18][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_9nlidh6a4().s[37]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_9nlidh6a4().s[38]++;
exports.NewsletterController = void 0;
const client_1 =
/* istanbul ignore next */
(cov_9nlidh6a4().s[39]++, require("@prisma/client"));
const {
  body,
  validationResult
} =
/* istanbul ignore next */
(cov_9nlidh6a4().s[40]++, require('express-validator'));
const crypto =
/* istanbul ignore next */
(cov_9nlidh6a4().s[41]++, __importStar(require("crypto")));
const logger_1 =
/* istanbul ignore next */
(cov_9nlidh6a4().s[42]++, __importDefault(require("../utils/logger")));
const prisma =
/* istanbul ignore next */
(cov_9nlidh6a4().s[43]++, new client_1.PrismaClient());
/**
 * Controller responsável pelo gerenciamento de newsletter
 */
class NewsletterController {
  /**
   * Validações para inscrição na newsletter
   */
  static subscribeValidation =
  /* istanbul ignore next */
  (cov_9nlidh6a4().s[44]++, [body('email').isEmail().withMessage('Email deve ser válido').normalizeEmail(), body('name').optional().isLength({
    min: 2,
    max: 100
  }).withMessage('Nome deve ter entre 2 e 100 caracteres').trim(), body('preferences.frequency').optional().isIn(['daily', 'weekly', 'monthly']).withMessage('Frequência deve ser daily, weekly ou monthly'), body('preferences.categories').optional().isArray().withMessage('Categorias devem ser um array')]);
  /**
   * Validações para campanha
   */
  static campaignValidation =
  /* istanbul ignore next */
  (cov_9nlidh6a4().s[45]++, [body('subject').notEmpty().withMessage('Assunto é obrigatório').isLength({
    min: 5,
    max: 200
  }).withMessage('Assunto deve ter entre 5 e 200 caracteres').trim(), body('content').notEmpty().withMessage('Conteúdo é obrigatório').isLength({
    min: 10
  }).withMessage('Conteúdo deve ter pelo menos 10 caracteres').trim(), body('htmlContent').optional().isLength({
    min: 10
  }).withMessage('Conteúdo HTML deve ter pelo menos 10 caracteres'), body('scheduledFor').optional().isISO8601().withMessage('Data de agendamento deve ser válida').custom(value => {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[10]++;
    cov_9nlidh6a4().s[46]++;
    if (new Date(value) <= new Date()) {
      /* istanbul ignore next */
      cov_9nlidh6a4().b[20][0]++;
      cov_9nlidh6a4().s[47]++;
      throw new Error('Data de agendamento deve ser no futuro');
    } else
    /* istanbul ignore next */
    {
      cov_9nlidh6a4().b[20][1]++;
    }
    cov_9nlidh6a4().s[48]++;
    return true;
  })]);
  /**
   * Inscreve um email na newsletter
   */
  static async subscribe(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[11]++;
    cov_9nlidh6a4().s[49]++;
    try {
      // Verificar validações
      const errors =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[50]++, validationResult(req));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[51]++;
      if (!errors.isEmpty()) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[21][0]++;
        cov_9nlidh6a4().s[52]++;
        res.status(400).json({
          success: false,
          message: 'Dados inválidos',
          errors: errors.array()
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[53]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[21][1]++;
      }
      const {
        email,
        name,
        preferences
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[54]++, req.body);
      // Verificar se já existe
      const existingSubscriber =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[55]++, await prisma.newsletter.findUnique({
        where: {
          email
        }
      }));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[56]++;
      if (existingSubscriber) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[22][0]++;
        cov_9nlidh6a4().s[57]++;
        if (existingSubscriber.isActive === true) {
          /* istanbul ignore next */
          cov_9nlidh6a4().b[23][0]++;
          cov_9nlidh6a4().s[58]++;
          res.status(409).json({
            success: false,
            message: 'Email já está inscrito na newsletter'
          });
          /* istanbul ignore next */
          cov_9nlidh6a4().s[59]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_9nlidh6a4().b[23][1]++;
        }
        // Reativar se estava inativo
        const updatedSubscriber =
        /* istanbul ignore next */
        (cov_9nlidh6a4().s[60]++, await prisma.newsletter.update({
          where: {
            email
          },
          data: {
            isActive: true,
            name:
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[24][0]++, name) ||
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[24][1]++, existingSubscriber.name),
            updatedAt: new Date()
          }
        }));
        // Log da ação
        /* istanbul ignore next */
        cov_9nlidh6a4().s[61]++;
        logger_1.default.info('Newsletter reativada', {
          email,
          subscriberId: updatedSubscriber.id
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[62]++;
        res.status(200).json({
          success: true,
          message: 'Inscrição reativada com sucesso',
          data: {
            subscriber: {
              id: updatedSubscriber.id,
              email: updatedSubscriber.email,
              name: updatedSubscriber.name,
              isActive: updatedSubscriber.isActive,
              subscribedAt: updatedSubscriber.createdAt
            }
          }
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[63]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[22][1]++;
      }
      // Gerar token de confirmação
      const confirmationToken =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[64]++, crypto.randomBytes(32).toString('hex'));
      // Criar nova inscrição
      const subscriber =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[65]++, await prisma.newsletter.create({
        data: {
          email,
          name:
          /* istanbul ignore next */
          (cov_9nlidh6a4().b[25][0]++, name) ||
          /* istanbul ignore next */
          (cov_9nlidh6a4().b[25][1]++, null),
          preferences: preferences ?
          /* istanbul ignore next */
          (cov_9nlidh6a4().b[26][0]++, JSON.stringify(preferences)) :
          /* istanbul ignore next */
          (cov_9nlidh6a4().b[26][1]++, JSON.stringify({
            frequency: 'weekly',
            categories: [],
            topics: []
          })),
          isActive: false // TODO: Implementar sistema de confirmação adequado
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_9nlidh6a4().s[66]++;
      logger_1.default.info('Nova inscrição na newsletter', {
        email,
        subscriberId: subscriber.id,
        name:
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[27][0]++, name) ||
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[27][1]++, 'Não informado')
      });
      // TODO: Enviar email de confirmação
      // await emailService.sendConfirmationEmail(email, confirmationToken);
      /* istanbul ignore next */
      cov_9nlidh6a4().s[67]++;
      res.status(201).json({
        success: true,
        message: 'Inscrição realizada com sucesso. Verifique seu email para confirmar.',
        data: {
          subscriber: {
            id: subscriber.id,
            email: subscriber.email,
            name: subscriber.name,
            isActive: subscriber.isActive,
            subscribedAt: subscriber.createdAt
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[68]++;
      logger_1.default.error('Erro ao inscrever na newsletter', {
        error,
        email: req.body.email
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[69]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Confirma inscrição na newsletter
   */
  // static async confirmSubscription(req: Request, res: Response): Promise<void> {
  //   try {
  //     const { token } = req.params;
  //     if (!token) {
  //       res.status(400).json({
  //         success: false,
  //         message: 'Token é obrigatório'
  //       });
  //       return;
  //     }
  //     // Buscar assinante pelo token (simulando - em produção seria um token real)
  //     const subscriber = await prisma.newsletter.findFirst({
  //       where: {
  //         email: { contains: token }, // Simplificado para demo
  //         isActive: false
  //       }
  //     });
  //     if (!subscriber) {
  //       res.status(404).json({
  //         success: false,
  //         message: 'Token inválido ou inscrição já confirmada'
  //       });
  //       return;
  //     }
  //     // Confirmar inscrição
  //     const confirmedSubscriber = await prisma.newsletter.update({
  //       where: { id: subscriber.id },
  //       data: {
  //         isActive: true,
  //         updatedAt: new Date()
  //       }
  //     });
  //     logger.info('Inscrição confirmada', {
  //       subscriberId: subscriber.id,
  //       email: subscriber.email
  //     });
  //     res.status(200).json({
  //       success: true,
  //       message: 'Inscrição confirmada com sucesso',
  //       data: {
  //         subscriber: {
  //           id: confirmedSubscriber.id,
  //           email: confirmedSubscriber.email,
  //           name: confirmedSubscriber.name,
  //           isActive: confirmedSubscriber.isActive,
  //           updatedAt: confirmedSubscriber.updatedAt
  //         }
  //       }
  //     });
  //   } catch (error) {
  //     logger.error('Erro ao confirmar inscrição', { error, token: req.params.token });
  //     res.status(500).json({
  //       success: false,
  //       message: 'Erro interno do servidor'
  //     });
  //   }
  // }
  /**
   * Obtém preferências do assinante
   */
  static async getPreferences(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[12]++;
    cov_9nlidh6a4().s[70]++;
    try {
      const {
        token
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[71]++, req.params);
      /* istanbul ignore next */
      cov_9nlidh6a4().s[72]++;
      if (!token) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[28][0]++;
        cov_9nlidh6a4().s[73]++;
        res.status(400).json({
          success: false,
          message: 'Token é obrigatório'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[74]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[28][1]++;
      }
      // Buscar assinante pelo token (simulando - em produção seria um token real)
      const subscriber =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[75]++, await prisma.newsletter.findFirst({
        where: {
          email: {
            contains: token
          } // Simplificado para demo
        }
      }));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[76]++;
      if (!subscriber) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[29][0]++;
        cov_9nlidh6a4().s[77]++;
        res.status(404).json({
          success: false,
          message: 'Assinante não encontrado'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[78]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[29][1]++;
      }
      cov_9nlidh6a4().s[79]++;
      res.status(200).json({
        success: true,
        message: 'Preferências obtidas com sucesso',
        data: {
          subscriber: {
            id: subscriber.id,
            email: subscriber.email,
            name: subscriber.name,
            preferences: subscriber.preferences ?
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[30][0]++, JSON.parse(subscriber.preferences)) :
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[30][1]++, {
              frequency: 'weekly',
              categories: [],
              topics: []
            }),
            isActive: subscriber.isActive
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[80]++;
      logger_1.default.error('Erro ao obter preferências', {
        error,
        token: req.params.token
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[81]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Atualiza preferências do assinante
   */
  static async updatePreferences(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[13]++;
    cov_9nlidh6a4().s[82]++;
    try {
      const {
        token
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[83]++, req.params);
      const {
        frequency,
        categories,
        topics
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[84]++, req.body);
      /* istanbul ignore next */
      cov_9nlidh6a4().s[85]++;
      if (!token) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[31][0]++;
        cov_9nlidh6a4().s[86]++;
        res.status(400).json({
          success: false,
          message: 'Token é obrigatório'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[87]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[31][1]++;
      }
      // Buscar assinante pelo token (simulando - em produção seria um token real)
      const subscriber =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[88]++, await prisma.newsletter.findFirst({
        where: {
          email: {
            contains: token
          } // Simplificado para demo
        }
      }));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[89]++;
      if (!subscriber) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[32][0]++;
        cov_9nlidh6a4().s[90]++;
        res.status(404).json({
          success: false,
          message: 'Assinante não encontrado'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[91]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[32][1]++;
      }
      // Atualizar preferências
      const updatedSubscriber =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[92]++, await prisma.newsletter.update({
        where: {
          id: subscriber.id
        },
        data: {
          preferences: JSON.stringify({
            frequency:
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[33][0]++, frequency) ||
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[33][1]++, 'weekly'),
            categories:
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[34][0]++, categories) ||
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[34][1]++, []),
            topics:
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[35][0]++, topics) ||
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[35][1]++, [])
          }),
          updatedAt: new Date()
        }
      }));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[93]++;
      logger_1.default.info('Preferências atualizadas', {
        subscriberId: subscriber.id,
        email: subscriber.email
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[94]++;
      res.status(200).json({
        success: true,
        message: 'Preferências atualizadas com sucesso',
        data: {
          subscriber: {
            id: updatedSubscriber.id,
            email: updatedSubscriber.email,
            preferences: updatedSubscriber.preferences ?
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[36][0]++, JSON.parse(updatedSubscriber.preferences)) :
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[36][1]++, null)
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[95]++;
      logger_1.default.error('Erro ao atualizar preferências:', error);
      /* istanbul ignore next */
      cov_9nlidh6a4().s[96]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Confirma inscrição na newsletter
   */
  static async confirmSubscription(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[14]++;
    cov_9nlidh6a4().s[97]++;
    try {
      const {
        token
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[98]++, req.params);
      /* istanbul ignore next */
      cov_9nlidh6a4().s[99]++;
      if (!token) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[37][0]++;
        cov_9nlidh6a4().s[100]++;
        res.status(400).json({
          success: false,
          message: 'Token de confirmação é obrigatório'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[101]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[37][1]++;
      }
      // TODO: Implementar confirmationToken no schema
      const subscriber =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[102]++, await prisma.newsletter.findFirst({
        where: {
          email: token,
          // Usando token como email temporariamente
          isActive: false
        }
      }));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[103]++;
      if (!subscriber) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[38][0]++;
        cov_9nlidh6a4().s[104]++;
        res.status(404).json({
          success: false,
          message: 'Token inválido ou inscrição já confirmada'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[105]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[38][1]++;
      }
      // Confirmar inscrição
      const confirmedSubscriber =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[106]++, await prisma.newsletter.update({
        where: {
          id: subscriber.id
        },
        data: {
          isActive: true,
          updatedAt: new Date()
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_9nlidh6a4().s[107]++;
      logger_1.default.info('Inscrição confirmada', {
        email: subscriber.email,
        subscriberId: subscriber.id
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[108]++;
      res.status(200).json({
        success: true,
        message: 'Inscrição confirmada com sucesso',
        data: {
          subscriber: {
            id: confirmedSubscriber.id,
            email: confirmedSubscriber.email,
            name: confirmedSubscriber.name,
            isActive: confirmedSubscriber.isActive,
            updatedAt: confirmedSubscriber.updatedAt
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[109]++;
      logger_1.default.error('Erro ao confirmar inscrição', {
        error,
        token: req.params.token
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[110]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Cancela inscrição na newsletter
   */
  static async unsubscribe(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[15]++;
    cov_9nlidh6a4().s[111]++;
    try {
      const {
        token
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[112]++, req.params);
      const {
        email
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[113]++, req.body);
      let subscriber;
      /* istanbul ignore next */
      cov_9nlidh6a4().s[114]++;
      if (token) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[39][0]++;
        cov_9nlidh6a4().s[115]++;
        // Cancelamento via token (link no email)
        // TODO: Implementar tokens de confirmação e cancelamento no schema
        subscriber = await prisma.newsletter.findFirst({
          where: {
            email: token,
            // Usando token como email temporariamente
            isActive: true
          }
        });
      } else {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[39][1]++;
        cov_9nlidh6a4().s[116]++;
        if (email) {
          /* istanbul ignore next */
          cov_9nlidh6a4().b[40][0]++;
          cov_9nlidh6a4().s[117]++;
          // Cancelamento via email
          subscriber = await prisma.newsletter.findFirst({
            where: {
              email,
              isActive: true
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_9nlidh6a4().b[40][1]++;
        }
      }
      /* istanbul ignore next */
      cov_9nlidh6a4().s[118]++;
      if (!subscriber) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[41][0]++;
        cov_9nlidh6a4().s[119]++;
        res.status(404).json({
          success: false,
          message: 'Inscrição não encontrada ou já cancelada'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[120]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[41][1]++;
      }
      // Gerar token de cancelamento
      const unsubscribeToken =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[121]++, crypto.randomBytes(32).toString('hex'));
      // Cancelar inscrição
      const unsubscribedSubscriber =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[122]++, await prisma.newsletter.update({
        where: {
          id: subscriber.id
        },
        data: {
          isActive: false,
          updatedAt: new Date()
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_9nlidh6a4().s[123]++;
      logger_1.default.info('Inscrição cancelada', {
        email: subscriber.email,
        subscriberId: subscriber.id,
        method: token ?
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[42][0]++, 'token') :
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[42][1]++, 'email')
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[124]++;
      res.status(200).json({
        success: true,
        message: 'Inscrição cancelada com sucesso',
        data: {
          subscriber: {
            id: unsubscribedSubscriber.id,
            email: unsubscribedSubscriber.email,
            isActive: unsubscribedSubscriber.isActive,
            updatedAt: unsubscribedSubscriber.updatedAt
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[125]++;
      logger_1.default.error('Erro ao cancelar inscrição', {
        error
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[126]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Lista inscritos com paginação e filtros (Admin)
   */
  static async getSubscribers(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[16]++;
    cov_9nlidh6a4().s[127]++;
    try {
      const {
        status,
        search,
        dateFrom,
        dateTo,
        page =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[43][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[44][0]++, 20),
        sortBy =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[45][0]++, 'createdAt'),
        sortOrder =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[46][0]++, 'desc')
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[128]++, req.query);
      const skip =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[129]++, (Number(page) - 1) * Number(limit));
      const take =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[130]++, Number(limit));
      // Construir filtros
      const where =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[131]++, {});
      /* istanbul ignore next */
      cov_9nlidh6a4().s[132]++;
      if (status) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[47][0]++;
        cov_9nlidh6a4().s[133]++;
        where.status = status;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[47][1]++;
      }
      cov_9nlidh6a4().s[134]++;
      if (search) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[48][0]++;
        cov_9nlidh6a4().s[135]++;
        where.OR = [{
          email: {
            contains: search,
            mode: 'insensitive'
          }
        }, {
          name: {
            contains: search,
            mode: 'insensitive'
          }
        }];
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[48][1]++;
      }
      cov_9nlidh6a4().s[136]++;
      if (
      /* istanbul ignore next */
      (cov_9nlidh6a4().b[50][0]++, dateFrom) ||
      /* istanbul ignore next */
      (cov_9nlidh6a4().b[50][1]++, dateTo)) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[49][0]++;
        cov_9nlidh6a4().s[137]++;
        where.createdAt = {};
        /* istanbul ignore next */
        cov_9nlidh6a4().s[138]++;
        if (dateFrom) {
          /* istanbul ignore next */
          cov_9nlidh6a4().b[51][0]++;
          cov_9nlidh6a4().s[139]++;
          where.createdAt.gte = new Date(dateFrom);
        } else
        /* istanbul ignore next */
        {
          cov_9nlidh6a4().b[51][1]++;
        }
        cov_9nlidh6a4().s[140]++;
        if (dateTo) {
          /* istanbul ignore next */
          cov_9nlidh6a4().b[52][0]++;
          const endDate =
          /* istanbul ignore next */
          (cov_9nlidh6a4().s[141]++, new Date(dateTo));
          /* istanbul ignore next */
          cov_9nlidh6a4().s[142]++;
          endDate.setHours(23, 59, 59, 999);
          /* istanbul ignore next */
          cov_9nlidh6a4().s[143]++;
          where.createdAt.lte = endDate;
        } else
        /* istanbul ignore next */
        {
          cov_9nlidh6a4().b[52][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[49][1]++;
      }
      // Definir ordenação
      const orderBy =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[144]++, {});
      /* istanbul ignore next */
      cov_9nlidh6a4().s[145]++;
      orderBy[sortBy] = sortOrder;
      // Buscar inscritos
      const [subscribers, total] =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[146]++, await Promise.all([prisma.newsletter.findMany({
        where,
        skip,
        take,
        orderBy
      }), prisma.newsletter.count({
        where
      })]));
      const totalPages =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[147]++, Math.ceil(total / take));
      // Estatísticas por status ativo/inativo
      const activeCount =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[148]++, await prisma.newsletter.count({
        where: {
          isActive: true
        }
      }));
      const inactiveCount =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[149]++, await prisma.newsletter.count({
        where: {
          isActive: false
        }
      }));
      const statistics =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[150]++, {
        total,
        byStatus: {
          active: activeCount,
          inactive: inactiveCount
        }
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[151]++;
      res.status(200).json({
        success: true,
        message: 'Inscritos listados com sucesso',
        data: {
          subscribers: subscribers,
          statistics,
          pagination: {
            page: Number(page),
            limit: take,
            total,
            totalPages,
            hasNext: Number(page) < totalPages,
            hasPrev: Number(page) > 1
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[152]++;
      logger_1.default.error('Erro ao listar inscritos', {
        error
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[153]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Cria uma nova campanha de newsletter (Admin)
   */
  static async createCampaign(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[17]++;
    cov_9nlidh6a4().s[154]++;
    try {
      // Verificar validações
      const errors =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[155]++, validationResult(req));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[156]++;
      if (!errors.isEmpty()) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[53][0]++;
        cov_9nlidh6a4().s[157]++;
        res.status(400).json({
          success: false,
          message: 'Dados inválidos',
          errors: errors.array()
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[158]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[53][1]++;
      }
      const currentUser =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[159]++, req.user);
      const {
        subject,
        content,
        htmlContent,
        scheduledFor,
        targetAudience
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[160]++, req.body);
      // TODO: Implementar modelo de campanha no schema.prisma
      // const campaign = await prisma.newsletterCampaign.create({
      //   data: {
      //     subject,
      //     content,
      //     htmlContent: htmlContent || null,
      //     status: scheduledFor ? 'SCHEDULED' : 'DRAFT',
      //     scheduledFor: scheduledFor ? new Date(scheduledFor) : null,
      //     targetAudience: targetAudience ? JSON.stringify(targetAudience) : null,
      //     createdById: currentUser.id
      //   }
      // });
      const campaign =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[161]++, {
        id: 'temp-id',
        subject,
        content
      });
      // Log da ação
      /* istanbul ignore next */
      cov_9nlidh6a4().s[162]++;
      logger_1.default.info('Campanha de newsletter criada', {
        campaignId: campaign.id,
        subject: campaign.subject,
        createdBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[163]++;
      res.status(201).json({
        success: true,
        message: 'Campanha criada com sucesso',
        data: {
          campaign: campaign
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[164]++;
      logger_1.default.error('Erro ao criar campanha', {
        error
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[165]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Lista campanhas (Admin)
   */
  static async getCampaigns(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[18]++;
    cov_9nlidh6a4().s[166]++;
    try {
      const {
        status,
        page =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[54][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[55][0]++, 20),
        sortBy =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[56][0]++, 'createdAt'),
        sortOrder =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[57][0]++, 'desc')
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[167]++, req.query);
      const skip =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[168]++, (Number(page) - 1) * Number(limit));
      const take =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[169]++, Number(limit));
      // Construir filtros
      const where =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[170]++, {});
      /* istanbul ignore next */
      cov_9nlidh6a4().s[171]++;
      if (status) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[58][0]++;
        cov_9nlidh6a4().s[172]++;
        where.status = status;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[58][1]++;
      }
      // Definir ordenação
      const orderBy =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[173]++, {});
      /* istanbul ignore next */
      cov_9nlidh6a4().s[174]++;
      orderBy[sortBy] = sortOrder;
      // TODO: Implementar modelo de campanha no schema.prisma
      // const [campaigns, total] = await Promise.all([
      //   prisma.newsletterCampaign.findMany({
      //     where,
      //     include: {
      //       createdBy: {
      //         select: {
      //           id: true,
      //           name: true,
      //           email: true
      //         }
      //       }
      //     },
      //     skip,
      //     take,
      //     orderBy
      //   }),
      //   prisma.newsletterCampaign.count({ where })
      // ]);
      const campaigns =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[175]++, []);
      const total =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[176]++, 0);
      const totalPages =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[177]++, Math.ceil(total / take));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[178]++;
      res.status(200).json({
        success: true,
        message: 'Campanhas listadas com sucesso',
        data: {
          campaigns: campaigns.map(campaign => {
            /* istanbul ignore next */
            cov_9nlidh6a4().f[19]++;
            cov_9nlidh6a4().s[179]++;
            return {
              ...campaign,
              targetAudience: campaign.targetAudience ?
              /* istanbul ignore next */
              (cov_9nlidh6a4().b[59][0]++, JSON.parse(campaign.targetAudience)) :
              /* istanbul ignore next */
              (cov_9nlidh6a4().b[59][1]++, null)
            };
          }),
          pagination: {
            page: Number(page),
            limit: take,
            total,
            totalPages,
            hasNext: Number(page) < totalPages,
            hasPrev: Number(page) > 1
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[180]++;
      logger_1.default.error('Erro ao listar campanhas', {
        error
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[181]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Envia uma campanha (Admin)
   */
  static async sendCampaign(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[20]++;
    cov_9nlidh6a4().s[182]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[183]++, req.params);
      const currentUser =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[184]++, req.user);
      /* istanbul ignore next */
      cov_9nlidh6a4().s[185]++;
      if (!id) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[60][0]++;
        cov_9nlidh6a4().s[186]++;
        res.status(400).json({
          success: false,
          message: 'ID da campanha é obrigatório'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[187]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[60][1]++;
      }
      // TODO: Implementar modelo de campanha no schema.prisma
      // const campaign = await prisma.newsletterCampaign.findUnique({
      //   where: { id }
      // });
      // if (!campaign) {
      //   res.status(404).json({
      //     success: false,
      //     message: 'Campanha não encontrada'
      //   });
      //   return;
      // }
      // Buscar destinatários ativos
      const subscribers =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[188]++, await prisma.newsletter.findMany({
        where: {
          isActive: true
        },
        select: {
          id: true,
          email: true,
          name: true
        }
      }));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[189]++;
      if (subscribers.length === 0) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[61][0]++;
        cov_9nlidh6a4().s[190]++;
        res.status(400).json({
          success: false,
          message: 'Nenhum destinatário encontrado'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[191]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[61][1]++;
      }
      // TODO: Implementar envio real de emails
      // await emailService.sendCampaign(campaign, subscribers);
      // TODO: Implementar envio real de emails e atualização de campanha
      // await prisma.newsletterCampaign.update({
      //   where: { id },
      //   data: {
      //     status: 'SENT',
      //     updatedAt: new Date()
      //   }
      // });
      // Log da ação
      cov_9nlidh6a4().s[192]++;
      logger_1.default.info('Newsletter enviada', {
        campaignId: id,
        recipientCount: subscribers.length,
        sentBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[193]++;
      res.status(200).json({
        success: true,
        message: `Newsletter enviada com sucesso para ${subscribers.length} destinatários`,
        data: {
          recipientCount: subscribers.length
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[194]++;
      logger_1.default.error('Erro ao enviar campanha', {
        error,
        campaignId: req.params.id
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[195]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Obtém estatísticas da newsletter (Admin)
   */
  static async getNewsletterStats(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[21]++;
    cov_9nlidh6a4().s[196]++;
    try {
      const {
        period =
        /* istanbul ignore next */
        (cov_9nlidh6a4().b[62][0]++, '30')
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[197]++, req.query);
      const periodDays =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[198]++, Number(period));
      const dateLimit =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[199]++, new Date());
      /* istanbul ignore next */
      cov_9nlidh6a4().s[200]++;
      dateLimit.setDate(dateLimit.getDate() - periodDays);
      const [subscriberStats, campaignStats, recentActivity] =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[201]++, await Promise.all([
      // Estatísticas de inscritos por status ativo/inativo
      Promise.all([prisma.newsletter.count({
        where: {
          isActive: true
        }
      }), prisma.newsletter.count({
        where: {
          isActive: false
        }
      })]).then(([active, inactive]) => {
        /* istanbul ignore next */
        cov_9nlidh6a4().f[22]++;
        cov_9nlidh6a4().s[202]++;
        return [{
          isActive: true,
          _count: active
        }, {
          isActive: false,
          _count: inactive
        }];
      }),
      // TODO: Implementar estatísticas de campanhas quando modelo for criado
      // prisma.newsletterCampaign.groupBy({
      //   by: ['status'],
      //   _count: true,
      //   _sum: { recipientCount: true }
      // }),
      Promise.resolve([]),
      // Atividade recente
      prisma.newsletter.findMany({
        where: {
          createdAt: {
            gte: dateLimit
          }
        },
        select: {
          id: true,
          email: true,
          isActive: true,
          createdAt: true
        },
        orderBy: {
          createdAt: 'desc'
        },
        take: 10
      })]));
      const statistics =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[203]++, {
        subscribers: {
          total: subscriberStats.reduce((acc, stat) => {
            /* istanbul ignore next */
            cov_9nlidh6a4().f[23]++;
            cov_9nlidh6a4().s[204]++;
            return acc + stat._count;
          }, 0),
          byStatus: subscriberStats.reduce((acc, stat) => {
            /* istanbul ignore next */
            cov_9nlidh6a4().f[24]++;
            cov_9nlidh6a4().s[205]++;
            acc[stat.isActive ?
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[63][0]++, 'active') :
            /* istanbul ignore next */
            (cov_9nlidh6a4().b[63][1]++, 'inactive')] = stat._count;
            /* istanbul ignore next */
            cov_9nlidh6a4().s[206]++;
            return acc;
          }, {})
        },
        // TODO: Implementar estatísticas de campanhas quando modelo for criado
        campaigns: {
          total: 0,
          totalRecipients: 0,
          byStatus: {}
        },
        recentActivity: {
          period: periodDays,
          newSubscribers: recentActivity.length,
          subscribers: recentActivity
        }
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[207]++;
      res.status(200).json({
        success: true,
        message: 'Estatísticas obtidas com sucesso',
        data: {
          statistics
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[208]++;
      logger_1.default.error('Erro ao obter estatísticas da newsletter', {
        error
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[209]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Envia uma campanha para os assinantes (Admin)
   */
  static async sendCampaignToSubscribers(req, res) {
    /* istanbul ignore next */
    cov_9nlidh6a4().f[25]++;
    cov_9nlidh6a4().s[210]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[211]++, req.params);
      const currentUser =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[212]++, req.user);
      /* istanbul ignore next */
      cov_9nlidh6a4().s[213]++;
      if (!id) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[64][0]++;
        cov_9nlidh6a4().s[214]++;
        res.status(400).json({
          success: false,
          message: 'ID da campanha é obrigatório'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[215]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[64][1]++;
      }
      // Buscar assinantes ativos
      const activeSubscribers =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[216]++, await prisma.newsletter.findMany({
        where: {
          isActive: true
        },
        select: {
          id: true,
          email: true,
          name: true
        }
      }));
      /* istanbul ignore next */
      cov_9nlidh6a4().s[217]++;
      if (activeSubscribers.length === 0) {
        /* istanbul ignore next */
        cov_9nlidh6a4().b[65][0]++;
        cov_9nlidh6a4().s[218]++;
        res.status(400).json({
          success: false,
          message: 'Nenhum assinante ativo encontrado'
        });
        /* istanbul ignore next */
        cov_9nlidh6a4().s[219]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_9nlidh6a4().b[65][1]++;
      }
      // Simular envio da campanha
      const campaignData =
      /* istanbul ignore next */
      (cov_9nlidh6a4().s[220]++, {
        id,
        subject: `Campanha ${id}`,
        content: 'Conteúdo da campanha...',
        recipients: activeSubscribers.length,
        sentAt: new Date()
      });
      // Log da ação
      /* istanbul ignore next */
      cov_9nlidh6a4().s[221]++;
      logger_1.default.info('Campanha enviada', {
        campaignId: id,
        recipients: activeSubscribers.length,
        sentBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[222]++;
      res.status(200).json({
        success: true,
        message: `Campanha enviada com sucesso para ${activeSubscribers.length} assinantes`,
        data: {
          campaign: campaignData,
          recipients: activeSubscribers.length
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_9nlidh6a4().s[223]++;
      logger_1.default.error('Erro ao enviar campanha', {
        error,
        campaignId: req.params.id
      });
      /* istanbul ignore next */
      cov_9nlidh6a4().s[224]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
}
/* istanbul ignore next */
cov_9nlidh6a4().s[225]++;
exports.NewsletterController = NewsletterController;
/* istanbul ignore next */
cov_9nlidh6a4().s[226]++;
exports.default = NewsletterController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
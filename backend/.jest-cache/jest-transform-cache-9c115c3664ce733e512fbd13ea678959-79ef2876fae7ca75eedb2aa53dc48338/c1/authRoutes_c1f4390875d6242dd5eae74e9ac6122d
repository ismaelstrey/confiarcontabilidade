8d60e68a04d430a561edeb3a6baec5d4
"use strict";

/* istanbul ignore next */
function cov_fd7aaceg9() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\authRoutes.ts";
  var hash = "2cec4568de93da81829b1f6cfbc378d74e905597";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\authRoutes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 4,
          column: 65
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 45
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "5": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 116,
          column: 67
        }
      },
      "6": {
        start: {
          line: 141,
          column: 0
        },
        end: {
          line: 141,
          column: 61
        }
      },
      "7": {
        start: {
          line: 183,
          column: 0
        },
        end: {
          line: 183,
          column: 76
        }
      },
      "8": {
        start: {
          line: 207,
          column: 0
        },
        end: {
          line: 213,
          column: 3
        }
      },
      "9": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 212,
          column: 7
        }
      },
      "10": {
        start: {
          line: 240,
          column: 0
        },
        end: {
          line: 240,
          column: 88
        }
      },
      "11": {
        start: {
          line: 283,
          column: 0
        },
        end: {
          line: 283,
          column: 106
        }
      },
      "12": {
        start: {
          line: 284,
          column: 0
        },
        end: {
          line: 284,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 207,
            column: 49
          },
          end: {
            line: 207,
            column: 50
          }
        },
        loc: {
          start: {
            line: 207,
            column: 63
          },
          end: {
            line: 213,
            column: 1
          }
        },
        line: 207
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0
    },
    b: {},
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\authRoutes.ts",
      mappings: ";;AAAA,qCAAiC;AACjC,kEAA+D;AAC/D,8CAAwD;AAExD,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoFG;AAEH;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,+BAAc,CAAC,QAAQ,CAAC,CAAC;AAElD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,+BAAc,CAAC,KAAK,CAAC,CAAC;AAE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AACH,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,+BAAc,CAAC,YAAY,CAAC,CAAC;AAE3D;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAiB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACrD,oDAAoD;IACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,8BAA8B;KACxC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,wBAAiB,EAAE,+BAAc,CAAC,UAAU,CAAC,CAAC;AAEhE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,wBAAiB,EAAE,+BAAc,CAAC,cAAc,CAAC,CAAC;AAElF,kBAAe,MAAM,CAAC",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\authRoutes.ts"],
      sourcesContent: ["import { Router } from 'express';\r\nimport { AuthController } from '../controllers/authController';\r\nimport { authenticateToken } from '../middlewares/auth';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     LoginRequest:\r\n *       type: object\r\n *       required:\r\n *         - email\r\n *         - password\r\n *       properties:\r\n *         email:\r\n *           type: string\r\n *           format: email\r\n *           description: Email do usu\xE1rio\r\n *         password:\r\n *           type: string\r\n *           minLength: 6\r\n *           description: Senha do usu\xE1rio\r\n *     RegisterRequest:\r\n *       type: object\r\n *       required:\r\n *         - name\r\n *         - email\r\n *         - password\r\n *       properties:\r\n *         name:\r\n *           type: string\r\n *           minLength: 2\r\n *           description: Nome completo do usu\xE1rio\r\n *         email:\r\n *           type: string\r\n *           format: email\r\n *           description: Email do usu\xE1rio\r\n *         password:\r\n *           type: string\r\n *           minLength: 6\r\n *           description: Senha do usu\xE1rio\r\n *         role:\r\n *           type: string\r\n *           enum: [USER, ADMIN, MODERATOR]\r\n *           description: Papel do usu\xE1rio (opcional, padr\xE3o USER)\r\n *     AuthResponse:\r\n *       type: object\r\n *       properties:\r\n *         success:\r\n *           type: boolean\r\n *         message:\r\n *           type: string\r\n *         data:\r\n *           type: object\r\n *           properties:\r\n *             user:\r\n *               $ref: '#/components/schemas/User'\r\n *             tokens:\r\n *               type: object\r\n *               properties:\r\n *                 accessToken:\r\n *                   type: string\r\n *                 refreshToken:\r\n *                   type: string\r\n *     User:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         name:\r\n *           type: string\r\n *         email:\r\n *           type: string\r\n *         role:\r\n *           type: string\r\n *         isActive:\r\n *           type: boolean\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *         updatedAt:\r\n *           type: string\r\n *           format: date-time\r\n *   securitySchemes:\r\n *     bearerAuth:\r\n *       type: http\r\n *       scheme: bearer\r\n *       bearerFormat: JWT\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/auth/register:\r\n *   post:\r\n *     summary: Registrar novo usu\xE1rio\r\n *     tags: [Autentica\xE7\xE3o]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/RegisterRequest'\r\n *     responses:\r\n *       201:\r\n *         description: Usu\xE1rio registrado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/AuthResponse'\r\n *       400:\r\n *         description: Dados inv\xE1lidos\r\n *       409:\r\n *         description: Email j\xE1 cadastrado\r\n */\r\nrouter.post('/register', AuthController.register);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/auth/login:\r\n *   post:\r\n *     summary: Fazer login\r\n *     tags: [Autentica\xE7\xE3o]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/LoginRequest'\r\n *     responses:\r\n *       200:\r\n *         description: Login realizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/AuthResponse'\r\n *       400:\r\n *         description: Dados inv\xE1lidos\r\n *       401:\r\n *         description: Credenciais inv\xE1lidas\r\n */\r\nrouter.post('/login', AuthController.login);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/auth/refresh-token:\r\n *   post:\r\n *     summary: Renovar token de acesso\r\n *     tags: [Autentica\xE7\xE3o]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - refreshToken\r\n *             properties:\r\n *               refreshToken:\r\n *                 type: string\r\n *                 description: Token de renova\xE7\xE3o\r\n *     responses:\r\n *       200:\r\n *         description: Token renovado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     tokens:\r\n *                       type: object\r\n *                       properties:\r\n *                         accessToken:\r\n *                           type: string\r\n *                         refreshToken:\r\n *                           type: string\r\n *       401:\r\n *         description: Token de renova\xE7\xE3o inv\xE1lido\r\n */\r\nrouter.post('/refresh-token', AuthController.refreshToken);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/auth/logout:\r\n *   post:\r\n *     summary: Fazer logout\r\n *     tags: [Autentica\xE7\xE3o]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Logout realizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n */\r\nrouter.post('/logout', authenticateToken, (req, res) => {\r\n  // TODO: Implementar blacklist de tokens para logout\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Logout realizado com sucesso'\r\n  });\r\n});\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/auth/me:\r\n *   get:\r\n *     summary: Obter dados do usu\xE1rio logado\r\n *     tags: [Autentica\xE7\xE3o]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Dados do usu\xE1rio\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     user:\r\n *                       $ref: '#/components/schemas/User'\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n */\r\nrouter.get('/me', authenticateToken, AuthController.getProfile);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/auth/change-password:\r\n *   post:\r\n *     summary: Alterar senha do usu\xE1rio\r\n *     tags: [Autentica\xE7\xE3o]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - currentPassword\r\n *               - newPassword\r\n *             properties:\r\n *               currentPassword:\r\n *                 type: string\r\n *                 description: Senha atual\r\n *               newPassword:\r\n *                 type: string\r\n *                 minLength: 6\r\n *                 description: Nova senha\r\n *     responses:\r\n *       200:\r\n *         description: Senha alterada com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inv\xE1lidos\r\n *       401:\r\n *         description: Senha atual incorreta ou token inv\xE1lido\r\n */\r\nrouter.post('/change-password', authenticateToken, AuthController.changePassword);\r\n\r\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2cec4568de93da81829b1f6cfbc378d74e905597"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fd7aaceg9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fd7aaceg9();
cov_fd7aaceg9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_fd7aaceg9().s[1]++, require("express"));
const authController_1 =
/* istanbul ignore next */
(cov_fd7aaceg9().s[2]++, require("../controllers/authController"));
const auth_1 =
/* istanbul ignore next */
(cov_fd7aaceg9().s[3]++, require("../middlewares/auth"));
const router =
/* istanbul ignore next */
(cov_fd7aaceg9().s[4]++, (0, express_1.Router)());
/**
 * @swagger
 * components:
 *   schemas:
 *     LoginRequest:
 *       type: object
 *       required:
 *         - email
 *         - password
 *       properties:
 *         email:
 *           type: string
 *           format: email
 *           description: Email do usuário
 *         password:
 *           type: string
 *           minLength: 6
 *           description: Senha do usuário
 *     RegisterRequest:
 *       type: object
 *       required:
 *         - name
 *         - email
 *         - password
 *       properties:
 *         name:
 *           type: string
 *           minLength: 2
 *           description: Nome completo do usuário
 *         email:
 *           type: string
 *           format: email
 *           description: Email do usuário
 *         password:
 *           type: string
 *           minLength: 6
 *           description: Senha do usuário
 *         role:
 *           type: string
 *           enum: [USER, ADMIN, MODERATOR]
 *           description: Papel do usuário (opcional, padrão USER)
 *     AuthResponse:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *         message:
 *           type: string
 *         data:
 *           type: object
 *           properties:
 *             user:
 *               $ref: '#/components/schemas/User'
 *             tokens:
 *               type: object
 *               properties:
 *                 accessToken:
 *                   type: string
 *                 refreshToken:
 *                   type: string
 *     User:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         name:
 *           type: string
 *         email:
 *           type: string
 *         role:
 *           type: string
 *         isActive:
 *           type: boolean
 *         createdAt:
 *           type: string
 *           format: date-time
 *         updatedAt:
 *           type: string
 *           format: date-time
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 */
/**
 * @swagger
 * /api/v1/auth/register:
 *   post:
 *     summary: Registrar novo usuário
 *     tags: [Autenticação]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RegisterRequest'
 *     responses:
 *       201:
 *         description: Usuário registrado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/AuthResponse'
 *       400:
 *         description: Dados inválidos
 *       409:
 *         description: Email já cadastrado
 */
/* istanbul ignore next */
cov_fd7aaceg9().s[5]++;
router.post('/register', authController_1.AuthController.register);
/**
 * @swagger
 * /api/v1/auth/login:
 *   post:
 *     summary: Fazer login
 *     tags: [Autenticação]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/LoginRequest'
 *     responses:
 *       200:
 *         description: Login realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/AuthResponse'
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Credenciais inválidas
 */
/* istanbul ignore next */
cov_fd7aaceg9().s[6]++;
router.post('/login', authController_1.AuthController.login);
/**
 * @swagger
 * /api/v1/auth/refresh-token:
 *   post:
 *     summary: Renovar token de acesso
 *     tags: [Autenticação]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - refreshToken
 *             properties:
 *               refreshToken:
 *                 type: string
 *                 description: Token de renovação
 *     responses:
 *       200:
 *         description: Token renovado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     tokens:
 *                       type: object
 *                       properties:
 *                         accessToken:
 *                           type: string
 *                         refreshToken:
 *                           type: string
 *       401:
 *         description: Token de renovação inválido
 */
/* istanbul ignore next */
cov_fd7aaceg9().s[7]++;
router.post('/refresh-token', authController_1.AuthController.refreshToken);
/**
 * @swagger
 * /api/v1/auth/logout:
 *   post:
 *     summary: Fazer logout
 *     tags: [Autenticação]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Logout realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       401:
 *         description: Token inválido
 */
/* istanbul ignore next */
cov_fd7aaceg9().s[8]++;
router.post('/logout', auth_1.authenticateToken, (req, res) => {
  /* istanbul ignore next */
  cov_fd7aaceg9().f[0]++;
  cov_fd7aaceg9().s[9]++;
  // TODO: Implementar blacklist de tokens para logout
  res.status(200).json({
    success: true,
    message: 'Logout realizado com sucesso'
  });
});
/**
 * @swagger
 * /api/v1/auth/me:
 *   get:
 *     summary: Obter dados do usuário logado
 *     tags: [Autenticação]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Dados do usuário
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     user:
 *                       $ref: '#/components/schemas/User'
 *       401:
 *         description: Token inválido
 */
/* istanbul ignore next */
cov_fd7aaceg9().s[10]++;
router.get('/me', auth_1.authenticateToken, authController_1.AuthController.getProfile);
/**
 * @swagger
 * /api/v1/auth/change-password:
 *   post:
 *     summary: Alterar senha do usuário
 *     tags: [Autenticação]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - currentPassword
 *               - newPassword
 *             properties:
 *               currentPassword:
 *                 type: string
 *                 description: Senha atual
 *               newPassword:
 *                 type: string
 *                 minLength: 6
 *                 description: Nova senha
 *     responses:
 *       200:
 *         description: Senha alterada com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Senha atual incorreta ou token inválido
 */
/* istanbul ignore next */
cov_fd7aaceg9().s[11]++;
router.post('/change-password', auth_1.authenticateToken, authController_1.AuthController.changePassword);
/* istanbul ignore next */
cov_fd7aaceg9().s[12]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
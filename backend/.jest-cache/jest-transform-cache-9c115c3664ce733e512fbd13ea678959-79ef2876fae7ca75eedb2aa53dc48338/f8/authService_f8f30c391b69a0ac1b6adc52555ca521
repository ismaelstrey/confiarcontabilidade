1a9cc88c7792c6381dc404355e6417ab
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authService = exports.AuthService = void 0;
const bcrypt_1 = __importDefault(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const client_1 = require("@prisma/client");
const logger_1 = require("../middlewares/logger");
const error_1 = require("../utils/error");
class AuthService {
    JWT_SECRET;
    JWT_REFRESH_SECRET;
    JWT_EXPIRES_IN;
    JWT_REFRESH_EXPIRES_IN;
    SALT_ROUNDS;
    prisma;
    constructor(prismaClient) {
        this.JWT_SECRET = process.env.JWT_SECRET || 'default-secret';
        this.JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'default-refresh-secret';
        this.JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '15m';
        this.JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '7d';
        this.SALT_ROUNDS = parseInt(process.env.BCRYPT_SALT_ROUNDS || '12');
        this.prisma = prismaClient || new client_1.PrismaClient();
    }
    /**
     * Registra um novo usuário no sistema
     */
    async register(userData) {
        try {
            // Validar formato do email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(userData.email)) {
                throw new error_1.ValidationError('Formato de email inválido');
            }
            // Validar força da senha
            if (userData.password.length < 8) {
                throw new error_1.ValidationError('Senha deve ter pelo menos 8 caracteres');
            }
            // Verificar se o usuário já existe
            const existingUser = await this.prisma.user.findUnique({
                where: { email: userData.email }
            });
            if (existingUser) {
                throw new Error('Usuário já existe com este email');
            }
            // Hash da senha
            const hashedPassword = await bcrypt_1.default.hash(userData.password, this.SALT_ROUNDS);
            // Criar usuário
            const user = await this.prisma.user.create({
                data: {
                    name: userData.name,
                    email: userData.email,
                    password: hashedPassword,
                    role: userData.role || 'USER'
                }
            });
            // Gerar tokens
            const tokens = this.generateTokens({
                userId: user.id,
                email: user.email,
                role: user.role
            });
            // Salvar refresh token no banco
            await this.saveRefreshToken(user.id, tokens.refreshToken);
            logger_1.logger.info(`Usuário registrado com sucesso: ${user.email}`);
            return {
                user: this.formatUserResponse(user),
                tokens
            };
        }
        catch (error) {
            logger_1.logger.error('Erro ao registrar usuário:', error);
            throw error;
        }
    }
    /**
     * Autentica um usuário e retorna tokens
     */
    async login(credentials) {
        try {
            // Buscar usuário
            const user = await this.prisma.user.findUnique({
                where: { email: credentials.email }
            });
            if (!user) {
                throw new Error('Credenciais inválidas');
            }
            // Verificar senha
            const isPasswordValid = await bcrypt_1.default.compare(credentials.password, user.password);
            if (!isPasswordValid) {
                throw new Error('Credenciais inválidas');
            }
            // Gerar tokens
            const tokens = this.generateTokens({
                userId: user.id,
                email: user.email,
                role: user.role
            });
            // Salvar refresh token no banco
            await this.saveRefreshToken(user.id, tokens.refreshToken);
            logger_1.logger.info(`Login realizado com sucesso: ${user.email}`);
            return {
                user: this.formatUserResponse(user),
                tokens
            };
        }
        catch (error) {
            logger_1.logger.error('Erro ao fazer login:', error);
            throw error;
        }
    }
    /**
     * Renova o access token usando o refresh token
     */
    async refreshToken(refreshToken) {
        try {
            // Verificar refresh token
            const payload = jsonwebtoken_1.default.verify(refreshToken, this.JWT_REFRESH_SECRET);
            // Verificar se o refresh token existe no banco
            const storedToken = await this.prisma.refreshToken.findFirst({
                where: {
                    token: refreshToken,
                    userId: payload.userId
                }
            });
            if (!storedToken) {
                throw new Error('Refresh token inválido');
            }
            // Buscar usuário
            const user = await this.prisma.user.findUnique({
                where: { id: payload.userId }
            });
            if (!user) {
                throw new Error('Usuário não encontrado');
            }
            // Gerar novos tokens
            const tokens = this.generateTokens({
                userId: user.id,
                email: user.email,
                role: user.role
            });
            // Remover refresh token antigo e salvar o novo
            await this.prisma.refreshToken.delete({
                where: { id: storedToken.id }
            });
            await this.saveRefreshToken(user.id, tokens.refreshToken);
            logger_1.logger.info(`Token renovado para usuário: ${user.email}`);
            return tokens;
        }
        catch (error) {
            logger_1.logger.error('Erro ao renovar token:', error);
            throw error;
        }
    }
    /**
     * Faz logout do usuário removendo o refresh token
     */
    async logout(refreshToken) {
        try {
            await this.prisma.refreshToken.deleteMany({
                where: { token: refreshToken }
            });
            logger_1.logger.info('Logout realizado com sucesso');
        }
        catch (error) {
            logger_1.logger.error('Erro ao fazer logout:', error);
            throw error;
        }
    }
    /**
     * Verifica se um access token é válido
     */
    async verifyAccessToken(token) {
        try {
            const payload = jsonwebtoken_1.default.verify(token, this.JWT_SECRET);
            return payload;
        }
        catch (error) {
            logger_1.logger.error('Token inválido:', error);
            throw new Error('Token inválido');
        }
    }
    /**
     * Busca um usuário pelo ID
     */
    async getUserById(userId) {
        try {
            const user = await this.prisma.user.findUnique({
                where: { id: userId }
            });
            return user ? this.formatUserResponse(user) : null;
        }
        catch (error) {
            logger_1.logger.error('Erro ao buscar usuário:', error);
            throw error;
        }
    }
    /**
     * Altera a senha do usuário
     */
    async changePassword(userId, currentPassword, newPassword) {
        try {
            // Buscar usuário
            const user = await this.prisma.user.findUnique({
                where: { id: userId }
            });
            if (!user) {
                throw new Error('Usuário não encontrado');
            }
            // Verificar senha atual
            const isCurrentPasswordValid = await bcrypt_1.default.compare(currentPassword, user.password);
            if (!isCurrentPasswordValid) {
                throw new Error('Senha atual incorreta');
            }
            // Hash da nova senha
            const hashedNewPassword = await bcrypt_1.default.hash(newPassword, this.SALT_ROUNDS);
            // Atualizar senha
            await this.prisma.user.update({
                where: { id: userId },
                data: { password: hashedNewPassword }
            });
            // Remover todos os refresh tokens do usuário (forçar novo login)
            await this.prisma.refreshToken.deleteMany({
                where: { userId }
            });
            logger_1.logger.info(`Senha alterada para usuário: ${user.email}`);
        }
        catch (error) {
            logger_1.logger.error('Erro ao alterar senha:', error);
            throw error;
        }
    }
    /**
     * Gera tokens de acesso e refresh
     */
    generateTokens(payload) {
        const accessToken = jsonwebtoken_1.default.sign(payload, this.JWT_SECRET, {
            expiresIn: this.JWT_EXPIRES_IN
        });
        const refreshToken = jsonwebtoken_1.default.sign(payload, this.JWT_REFRESH_SECRET, {
            expiresIn: this.JWT_REFRESH_EXPIRES_IN
        });
        return { accessToken, refreshToken };
    }
    /**
     * Salva o refresh token no banco de dados
     */
    async saveRefreshToken(userId, token) {
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + 7); // 7 dias
        await this.prisma.refreshToken.create({
            data: {
                token,
                userId,
                expiresAt
            }
        });
    }
    /**
     * Formata a resposta do usuário removendo dados sensíveis
     */
    formatUserResponse(user) {
        return {
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt
        };
    }
}
exports.AuthService = AuthService;
// Exportar instância singleton
exports.authService = new AuthService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"names":["cov_14gunxtpen","actualCoverage","bcrypt_1","s","__importDefault","require","jsonwebtoken_1","config_1","hashPassword","password","f","saltRounds","default","hash","exports","comparePassword","compare","generateToken","payload","expiresIn","b","sign","config","jwt","secret","verifyToken","token","verify","generateRefreshToken","refreshSecret","verifyRefreshToken","validatePasswordStrength","passwordRegex","test","validateEmail","email","emailRegex"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\utils\\auth.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { config } from '../config/config';\r\n\r\n/**\r\n * Gera um hash da senha usando bcrypt\r\n * @param password - Senha em texto plano\r\n * @returns Promise com o hash da senha\r\n */\r\nexport const hashPassword = async (password: string): Promise<string> => {\r\n  const saltRounds = 12;\r\n  return bcrypt.hash(password, saltRounds);\r\n};\r\n\r\n/**\r\n * Compara uma senha em texto plano com um hash\r\n * @param password - Senha em texto plano\r\n * @param hash - Hash da senha\r\n * @returns Promise com resultado da comparação\r\n */\r\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\r\n  return bcrypt.compare(password, hash);\r\n};\r\n\r\n/**\r\n * Gera um token JWT\r\n * @param payload - Dados a serem incluídos no token\r\n * @param expiresIn - Tempo de expiração do token (padrão: 1h)\r\n * @returns Token JWT\r\n */\r\nexport const generateToken = (payload: object, expiresIn: string = '1h'): string => {\r\n  return jwt.sign(payload, config.jwt.secret, { expiresIn } as jwt.SignOptions);\r\n};\r\n\r\n/**\r\n * Verifica e decodifica um token JWT\r\n * @param token - Token JWT a ser verificado\r\n * @returns Payload decodificado do token\r\n */\r\nexport const verifyToken = (token: string): any => {\r\n  return jwt.verify(token, config.jwt.secret);\r\n};\r\n\r\n/**\r\n * Gera um refresh token JWT\r\n * @param payload - Dados a serem incluídos no token\r\n * @returns Refresh token JWT\r\n */\r\nexport const generateRefreshToken = (payload: object): string => {\r\n  return jwt.sign(payload, config.jwt.refreshSecret, { expiresIn: '7d' } as jwt.SignOptions);\r\n};\r\n\r\n/**\r\n * Verifica um refresh token JWT\r\n * @param token - Refresh token a ser verificado\r\n * @returns Payload decodificado do refresh token\r\n */\r\nexport const verifyRefreshToken = (token: string): any => {\r\n  return jwt.verify(token, config.jwt.refreshSecret);\r\n};\r\n\r\n/**\r\n * Valida a força de uma senha\r\n * @param password - Senha a ser validada\r\n * @returns true se a senha for forte, false caso contrário\r\n */\r\nexport const validatePasswordStrength = (password: string): boolean => {\r\n  // Mínimo 8 caracteres, pelo menos uma letra maiúscula, uma minúscula, um número e um caractere especial\r\n  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n  return passwordRegex.test(password);\r\n};\r\n\r\n/**\r\n * Valida formato de email\r\n * @param email - Email a ser validado\r\n * @returns true se o email for válido, false caso contrário\r\n */\r\nexport const validateEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};"],"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","ignoreList":[]}
{"version":3,"names":["cov_114288k73u","actualCoverage","s","logger_1","require","requestLogger","req","res","next","f","startTime","Date","now","requestData","method","url","b","originalUrl","ip","socket","remoteAddress","userAgent","get","referer","user","id","userId","originalEnd","end","chunk","encoding","callback","endTime","responseTime","statusCode","contentLengthHeader","contentLength","parseInt","undefined","logLevel","message","logger","log","type","timestamp","toISOString","warn","threshold","error","call","process","env","DEBUG","debug","exports","requestBodyLogger","NODE_ENV","sensitiveFields","body","Object","keys","forEach","key","some","field","toLowerCase","includes","length","requestHeaderLogger","importantHeaders","filteredHeaders","fromEntries","entries","filter","value","headers","default"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\requestLogger.ts"],"sourcesContent":["import type { Request, Response, NextFunction } from 'express';\r\nimport { logger } from './logger';\r\n\r\n// Interface para dados da requisição\r\ninterface RequestLogData {\r\n  method: string;\r\n  url: string;\r\n  ip: string;\r\n  userAgent?: string | undefined;\r\n  userId?: string;\r\n  statusCode?: number;\r\n  responseTime?: number;\r\n  contentLength?: number | undefined;\r\n  referer?: string | undefined;\r\n}\r\n\r\n// Middleware para logging de requisições\r\nexport const requestLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  const startTime = Date.now();\r\n  \r\n  // Capturar dados da requisição\r\n  const requestData: RequestLogData = {\r\n    method: req.method,\r\n    url: req.originalUrl || req.url,\r\n    ip: req.ip || req.socket.remoteAddress || 'unknown',\r\n    userAgent: req.get('User-Agent'),\r\n    referer: req.get('Referer'),\r\n  };\r\n\r\n  // Capturar userId se disponível (após autenticação)\r\n  if ((req as any).user?.id) {\r\n    requestData.userId = (req as any).user.id;\r\n  }\r\n\r\n  // Override do método res.end para capturar dados da resposta\r\n  const originalEnd = res.end;\r\n  res.end = function (chunk?: any, encoding?: BufferEncoding | (() => void), callback?: () => void) {\r\n    const endTime = Date.now();\r\n    const responseTime = endTime - startTime;\r\n    \r\n    // Dados da resposta\r\n    requestData.statusCode = res.statusCode;\r\n    requestData.responseTime = responseTime;\r\n    const contentLengthHeader = res.get('Content-Length');\r\n    requestData.contentLength = contentLengthHeader ? parseInt(contentLengthHeader, 10) : undefined;\r\n\r\n    // Determinar nível do log baseado no status code\r\n    let logLevel: 'info' | 'warn' | 'error' = 'info';\r\n    if (res.statusCode >= 400 && res.statusCode < 500) {\r\n      logLevel = 'warn';\r\n    } else if (res.statusCode >= 500) {\r\n      logLevel = 'error';\r\n    }\r\n\r\n    // Criar mensagem de log\r\n    const message = `${requestData.method} ${requestData.url} ${requestData.statusCode} - ${responseTime}ms`;\r\n    \r\n    // Log da requisição\r\n    logger.log(logLevel, message, {\r\n      type: 'request',\r\n      ...requestData,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    // Log adicional para requisições lentas (> 1 segundo)\r\n    if (responseTime > 1000) {\r\n      logger.warn('Slow Request Detected', {\r\n        type: 'performance',\r\n        ...requestData,\r\n        threshold: '1000ms',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Log adicional para erros 5xx\r\n    if (res.statusCode >= 500) {\r\n      logger.error('Server Error Response', {\r\n        type: 'server_error',\r\n        ...requestData,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // Chamar o método original\r\n    return (originalEnd as any).call(this, chunk, encoding, callback);\r\n  };\r\n\r\n  // Log inicial da requisição (apenas em modo debug)\r\n  if (process.env.DEBUG === 'true') {\r\n    logger.debug('Incoming Request', {\r\n      type: 'request_start',\r\n      method: requestData.method,\r\n      url: requestData.url,\r\n      ip: requestData.ip,\r\n      userAgent: requestData.userAgent,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  }\r\n\r\n  next();\r\n};\r\n\r\n// Middleware para logging de body da requisição (apenas em desenvolvimento)\r\nexport const requestBodyLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  if (process.env.NODE_ENV === 'development' && process.env.DEBUG === 'true') {\r\n    // Não logar senhas e dados sensíveis\r\n    const sensitiveFields = ['password', 'token', 'secret', 'key', 'authorization'];\r\n    const body = { ...req.body };\r\n    \r\n    // Remover campos sensíveis\r\n    Object.keys(body).forEach(key => {\r\n      if (sensitiveFields.some(field => key.toLowerCase().includes(field))) {\r\n        body[key] = '[REDACTED]';\r\n      }\r\n    });\r\n\r\n    if (Object.keys(body).length > 0) {\r\n      logger.debug('Request Body', {\r\n        type: 'request_body',\r\n        method: req.method,\r\n        url: req.originalUrl || req.url,\r\n        body,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\n// Middleware para logging de headers específicos\r\nexport const requestHeaderLogger = (req: Request, res: Response, next: NextFunction) => {\r\n  if (process.env.NODE_ENV === 'development' && process.env.DEBUG === 'true') {\r\n    const importantHeaders = {\r\n      'content-type': req.get('Content-Type'),\r\n      'accept': req.get('Accept'),\r\n      'authorization': req.get('Authorization') ? '[PRESENT]' : '[NOT_PRESENT]',\r\n      'x-forwarded-for': req.get('X-Forwarded-For'),\r\n      'x-real-ip': req.get('X-Real-IP'),\r\n    };\r\n\r\n    // Filtrar headers undefined\r\n    const filteredHeaders = Object.fromEntries(\r\n      Object.entries(importantHeaders).filter(([, value]) => value !== undefined)\r\n    );\r\n\r\n    if (Object.keys(filteredHeaders).length > 0) {\r\n      logger.debug('Request Headers', {\r\n        type: 'request_headers',\r\n        method: req.method,\r\n        url: req.originalUrl || req.url,\r\n        headers: filteredHeaders,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\nexport default requestLogger;"],"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","ignoreList":[]}
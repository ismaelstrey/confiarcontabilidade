{"version":3,"names":["cov_8etp9j1fj","actualCoverage","winston_1","s","__importDefault","require","path_1","fs_1","logDir","b","process","env","LOG_FILE_PATH","default","existsSync","mkdirSync","recursive","logFormat","format","combine","timestamp","errors","stack","json","consoleFormat","colorize","printf","level","message","meta","f","msg","Object","keys","length","JSON","stringify","transports","NODE_ENV","push","Console","LOG_LEVEL","File","filename","join","maxsize","parseInt","LOG_MAX_SIZE","maxFiles","LOG_MAX_FILES","exports","logger","createLogger","defaultMeta","service","environment","exitOnError","VERBOSE_LOGGING","add","logStream","write","http","trim","logPerformance","operation","startTime","metadata","duration","Date","now","info","logDatabaseQuery","query","params","DEBUG","debug","logAuth","action","userId","toISOString","logFileUpload","size","toFixed","logEmail","to","subject","error","logCache","key","hit","ttl"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\logger.ts"],"sourcesContent":["import winston from 'winston';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\n// Criar diretório de logs se não existir\r\nconst logDir = process.env.LOG_FILE_PATH || './logs';\r\nif (!fs.existsSync(logDir)) {\r\n  fs.mkdirSync(logDir, { recursive: true });\r\n}\r\n\r\n// Configuração dos formatos de log\r\nconst logFormat = winston.format.combine(\r\n  winston.format.timestamp({\r\n    format: 'YYYY-MM-DD HH:mm:ss',\r\n  }),\r\n  winston.format.errors({ stack: true }),\r\n  winston.format.json(),\r\n);\r\n\r\n// Formato para console (desenvolvimento)\r\nconst consoleFormat = winston.format.combine(\r\n  winston.format.colorize(),\r\n  winston.format.timestamp({\r\n    format: 'HH:mm:ss',\r\n  }),\r\n  winston.format.printf(({ timestamp, level, message, ...meta }) => {\r\n    let msg = `${timestamp} [${level}]: ${message}`;\r\n    if (Object.keys(meta).length > 0) {\r\n      msg += ` ${JSON.stringify(meta, null, 2)}`;\r\n    }\r\n    return msg;\r\n  }),\r\n);\r\n\r\n// Configuração dos transportes\r\nconst transports: winston.transport[] = [];\r\n\r\n// Console transport (sempre ativo em desenvolvimento)\r\nif (process.env.NODE_ENV !== 'production') {\r\n  transports.push(\r\n    new winston.transports.Console({\r\n      format: consoleFormat,\r\n      level: process.env.LOG_LEVEL || 'info',\r\n    }),\r\n  );\r\n}\r\n\r\n// File transports\r\ntransports.push(\r\n  // Log de erros\r\n  new winston.transports.File({\r\n    filename: path.join(logDir, 'error.log'),\r\n    level: 'error',\r\n    format: logFormat,\r\n    maxsize: parseInt(process.env.LOG_MAX_SIZE || '20971520'), // 20MB\r\n    maxFiles: parseInt(process.env.LOG_MAX_FILES || '5'),\r\n  }),\r\n  // Log combinado\r\n  new winston.transports.File({\r\n    filename: path.join(logDir, 'combined.log'),\r\n    format: logFormat,\r\n    maxsize: parseInt(process.env.LOG_MAX_SIZE || '20971520'), // 20MB\r\n    maxFiles: parseInt(process.env.LOG_MAX_FILES || '5'),\r\n  }),\r\n  // Log de acesso\r\n  new winston.transports.File({\r\n    filename: path.join(logDir, 'access.log'),\r\n    level: 'http',\r\n    format: logFormat,\r\n    maxsize: parseInt(process.env.LOG_MAX_SIZE || '20971520'), // 20MB\r\n    maxFiles: parseInt(process.env.LOG_MAX_FILES || '5'),\r\n  }),\r\n);\r\n\r\n// Criar logger\r\nexport const logger = winston.createLogger({\r\n  level: process.env.LOG_LEVEL || 'info',\r\n  format: logFormat,\r\n  defaultMeta: {\r\n    service: 'contabilidade-igrejinha-api',\r\n    environment: process.env.NODE_ENV || 'development',\r\n  },\r\n  transports,\r\n  // Não sair em caso de erro\r\n  exitOnError: false,\r\n});\r\n\r\n// Adicionar console em produção se necessário\r\nif (process.env.NODE_ENV === 'production' && process.env.VERBOSE_LOGGING === 'true') {\r\n  logger.add(\r\n    new winston.transports.Console({\r\n      format: consoleFormat,\r\n      level: 'warn',\r\n    }),\r\n  );\r\n}\r\n\r\n// Stream para integração com Morgan (se necessário)\r\nexport const logStream = {\r\n  write: (message: string) => {\r\n    logger.http(message.trim());\r\n  },\r\n};\r\n\r\n// Função para log de performance\r\nexport const logPerformance = (operation: string, startTime: number, metadata?: any) => {\r\n  const duration = Date.now() - startTime;\r\n  logger.info(`Performance: ${operation}`, {\r\n    duration: `${duration}ms`,\r\n    operation,\r\n    ...metadata,\r\n  });\r\n};\r\n\r\n// Função para log de database queries (se necessário)\r\nexport const logDatabaseQuery = (query: string, duration: number, params?: any) => {\r\n  if (process.env.NODE_ENV === 'development' && process.env.DEBUG === 'true') {\r\n    logger.debug('Database Query', {\r\n      query,\r\n      duration: `${duration}ms`,\r\n      params,\r\n    });\r\n  }\r\n};\r\n\r\n// Função para log de autenticação\r\nexport const logAuth = (action: string, userId?: string, metadata?: any) => {\r\n  logger.info(`Auth: ${action}`, {\r\n    action,\r\n    userId,\r\n    timestamp: new Date().toISOString(),\r\n    ...metadata,\r\n  });\r\n};\r\n\r\n// Função para log de upload de arquivos\r\nexport const logFileUpload = (filename: string, size: number, userId?: string) => {\r\n  logger.info('File Upload', {\r\n    filename,\r\n    size: `${(size / 1024 / 1024).toFixed(2)}MB`,\r\n    userId,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n};\r\n\r\n// Função para log de email\r\nexport const logEmail = (action: string, to: string, subject?: string, error?: any) => {\r\n  if (error) {\r\n    logger.error(`Email Error: ${action}`, {\r\n      action,\r\n      to,\r\n      subject,\r\n      error: error.message,\r\n      stack: error.stack,\r\n    });\r\n  } else {\r\n    logger.info(`Email: ${action}`, {\r\n      action,\r\n      to,\r\n      subject,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  }\r\n};\r\n\r\n// Função para log de cache\r\nexport const logCache = (action: string, key: string, hit?: boolean, ttl?: number) => {\r\n  logger.debug(`Cache: ${action}`, {\r\n    action,\r\n    key,\r\n    hit,\r\n    ttl,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n};\r\n\r\nexport default logger;"],"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","ignoreList":[]}
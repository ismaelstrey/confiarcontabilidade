{"version":3,"names":["client_1","cov_1cjwyw7014","s","require","multer_1","__importDefault","path","__importStar","fs","crypto","sharp_1","logger_1","prisma","PrismaClient","storage","default","diskStorage","destination","req","file","cb","f","uploadDir","join","process","cwd","access","mkdir","recursive","filename","uniqueSuffix","randomUUID","ext","extname","originalname","fileFilter","allowedMimes","includes","mimetype","b","Error","upload","limits","fileSize","files","UploadController","uploadSingle","single","uploadMultiple","array","getFileType","startsWith","processImage","filePath","image","metadata","sizes","name","width","height","versions","dir","dirname","parse","size","resizedPath","resize","fit","withoutEnlargement","webp","quality","toFile","url","basename","original","format","error","uploadFile","res","currentUser","user","status","json","success","message","fileType","fileUrl","uploadedFile","create","data","originalName","type","userId","id","info","fileId","uploadedBy","createdAt","uploadMultipleFiles","length","uploadedFiles","push","count","map","getFiles","search","dateFrom","dateTo","page","limit","sortBy","sortOrder","query","skip","Number","take","where","OR","contains","mode","gte","Date","endDate","setHours","lte","orderBy","total","Promise","all","findMany","include","select","email","totalPages","Math","ceil","stats","groupBy","by","_count","_sum","statistics","totalSize","reduce","acc","stat","byType","pagination","hasNext","hasPrev","getFileById","params","findUnique","deleteFile","role","unlink","warn","delete","deletedBy","deleteMultipleFiles","fileIds","body","Array","isArray","in","uploadedById","result","deleteMany","deletedCount","getFileStats","period","periodDays","dateLimit","setDate","getDate","totalStats","periodStats","sizeStats","aggregate","_avg","averageSize","days","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\uploadController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport multer from 'multer';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs/promises';\r\nimport * as crypto from 'crypto';\r\nimport sharp from 'sharp';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de arquivo\r\ninterface FileData {\r\n  originalName: string;\r\n  filename: string;\r\n  mimetype: string;\r\n  size: number;\r\n  path: string;\r\n  url: string;\r\n  type: 'IMAGE' | 'DOCUMENT' | 'OTHER';\r\n  // metadata removido pois não existe no modelo Upload\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface FileFilters {\r\n  type?: string;\r\n  mimetype?: string;\r\n  search?: string;\r\n  uploadedBy?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'originalName' | 'size';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n// Configuração do multer\r\nconst storage = multer.diskStorage({\r\n  destination: async (req, file, cb) => {\r\n    const uploadDir = path.join(process.cwd(), 'uploads');\r\n    try {\r\n      await fs.access(uploadDir);\r\n    } catch {\r\n      await fs.mkdir(uploadDir, { recursive: true });\r\n    }\r\n    cb(null, uploadDir);\r\n  },\r\n  filename: (req, file, cb) => {\r\n    const uniqueSuffix = crypto.randomUUID();\r\n    const ext = path.extname(file.originalname);\r\n    cb(null, `${uniqueSuffix}${ext}`);\r\n  }\r\n});\r\n\r\n// Filtros de arquivo\r\nconst fileFilter = (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n  // Tipos permitidos\r\n  const allowedMimes = [\r\n    // Imagens\r\n    'image/jpeg',\r\n    'image/jpg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/svg+xml',\r\n    // Documentos\r\n    'application/pdf',\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    'application/vnd.ms-excel',\r\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    'text/plain',\r\n    'text/csv'\r\n  ];\r\n\r\n  if (allowedMimes.includes(file.mimetype)) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new Error(`Tipo de arquivo não permitido: ${file.mimetype}`));\r\n  }\r\n};\r\n\r\n// Configuração do multer\r\nconst upload = multer({\r\n  storage,\r\n  fileFilter,\r\n  limits: {\r\n    fileSize: 10 * 1024 * 1024, // 10MB\r\n    files: 5 // Máximo 5 arquivos por vez\r\n  }\r\n});\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de uploads\r\n */\r\nexport class UploadController {\r\n  /**\r\n   * Middleware do multer para upload único\r\n   */\r\n  static uploadSingle = upload.single('file');\r\n\r\n  /**\r\n   * Middleware do multer para múltiplos uploads\r\n   */\r\n  static uploadMultiple = upload.array('files', 5);\r\n\r\n  /**\r\n   * Determina o tipo de arquivo baseado no mimetype\r\n   */\r\n  private static getFileType(mimetype: string): 'IMAGE' | 'DOCUMENT' | 'OTHER' {\r\n    if (mimetype.startsWith('image/')) {\r\n      return 'IMAGE';\r\n    }\r\n    if (\r\n      mimetype.includes('pdf') ||\r\n      mimetype.includes('document') ||\r\n      mimetype.includes('spreadsheet') ||\r\n      mimetype.includes('text')\r\n    ) {\r\n      return 'DOCUMENT';\r\n    }\r\n    return 'OTHER';\r\n  }\r\n\r\n  /**\r\n   * Processa imagem (redimensionamento e otimização)\r\n   */\r\n  private static async processImage(filePath: string, mimetype: string): Promise<any> {\r\n    try {\r\n      if (!mimetype.startsWith('image/') || mimetype === 'image/svg+xml') {\r\n        return null;\r\n      }\r\n\r\n      const image = sharp(filePath);\r\n      const metadata = await image.metadata();\r\n\r\n      // Criar versões redimensionadas\r\n      const sizes = [\r\n        { name: 'thumbnail', width: 150, height: 150 },\r\n        { name: 'small', width: 300, height: 300 },\r\n        { name: 'medium', width: 600, height: 600 },\r\n        { name: 'large', width: 1200, height: 1200 }\r\n      ];\r\n\r\n      const versions: any = {};\r\n      const dir = path.dirname(filePath);\r\n      const name = path.parse(filePath).name;\r\n\r\n      for (const size of sizes) {\r\n        if (metadata.width && metadata.width > size.width) {\r\n          const resizedPath = path.join(dir, `${name}_${size.name}.webp`);\r\n          await image\r\n            .resize(size.width, size.height, {\r\n              fit: 'inside',\r\n              withoutEnlargement: true\r\n            })\r\n            .webp({ quality: 80 })\r\n            .toFile(resizedPath);\r\n\r\n          versions[size.name] = {\r\n            path: resizedPath,\r\n            url: `/uploads/${path.basename(resizedPath)}`,\r\n            width: size.width,\r\n            height: size.height\r\n          };\r\n        }\r\n      }\r\n\r\n      return {\r\n        original: {\r\n          width: metadata.width,\r\n          height: metadata.height,\r\n          format: metadata.format\r\n        },\r\n        versions\r\n      };\r\n    } catch (error) {\r\n      logger.error('Erro ao processar imagem', { error, filePath });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload de arquivo único\r\n   */\r\n  static async uploadFile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const file = req.file;\r\n\r\n      if (!file) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo foi enviado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const fileType = UploadController.getFileType(file.mimetype);\r\n      const fileUrl = `/uploads/${file.filename}`;\r\n\r\n      // Processar imagem se necessário\r\n      let metadata = null;\r\n      if (fileType === 'IMAGE') {\r\n        metadata = await UploadController.processImage(file.path, file.mimetype);\r\n      }\r\n\r\n      // Salvar informações no banco\r\n      const uploadedFile = await prisma.upload.create({\r\n        data: {\r\n          originalName: file.originalname,\r\n          filename: file.filename,\r\n          mimetype: file.mimetype,\r\n          size: file.size,\r\n          path: file.path,\r\n          url: fileUrl,\r\n          type: fileType,\r\n          // Campo metadata removido pois não existe no modelo Upload\r\n          userId: currentUser.id\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Arquivo enviado', {\r\n        fileId: uploadedFile.id,\r\n        filename: file.filename,\r\n        originalName: file.originalname,\r\n        size: file.size,\r\n        type: fileType,\r\n        uploadedBy: currentUser.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Arquivo enviado com sucesso',\r\n        data: {\r\n          file: {\r\n            id: uploadedFile.id,\r\n            originalName: uploadedFile.originalName,\r\n            filename: uploadedFile.filename,\r\n            url: uploadedFile.url,\r\n            type: uploadedFile.type,\r\n            size: uploadedFile.size,\r\n            mimetype: uploadedFile.mimetype,\r\n            // metadata removido pois não existe no modelo Upload\r\n            createdAt: uploadedFile.createdAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer upload de arquivo', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload de múltiplos arquivos\r\n   */\r\n  static async uploadMultipleFiles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const files = req.files as Express.Multer.File[];\r\n\r\n      if (!files || files.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo foi enviado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const uploadedFiles = [];\r\n\r\n      for (const file of files) {\r\n        const fileType = UploadController.getFileType(file.mimetype);\r\n        const fileUrl = `/uploads/${file.filename}`;\r\n\r\n        // Processar imagem se necessário\r\n        let metadata = null;\r\n        if (fileType === 'IMAGE') {\r\n          metadata = await UploadController.processImage(file.path, file.mimetype);\r\n        }\r\n\r\n        // Salvar informações no banco\r\n        const uploadedFile = await prisma.upload.create({\r\n          data: {\r\n            originalName: file.originalname,\r\n            filename: file.filename,\r\n            mimetype: file.mimetype,\r\n            size: file.size,\r\n            path: file.path,\r\n            url: fileUrl,\r\n            type: fileType,\r\n            // Campo metadata removido pois não existe no modelo Upload\r\n            userId: currentUser.id\r\n          }\r\n        });\r\n\r\n        uploadedFiles.push({\r\n          id: uploadedFile.id,\r\n          originalName: uploadedFile.originalName,\r\n          filename: uploadedFile.filename,\r\n          url: uploadedFile.url,\r\n          type: uploadedFile.type,\r\n          size: uploadedFile.size,\r\n          mimetype: uploadedFile.mimetype,\r\n          // metadata removido pois não existe no modelo Upload\r\n          createdAt: uploadedFile.createdAt\r\n        });\r\n      }\r\n\r\n      // Log da ação\r\n      logger.info('Múltiplos arquivos enviados', {\r\n        count: uploadedFiles.length,\r\n        uploadedBy: currentUser.id,\r\n        files: uploadedFiles.map(f => ({ id: f.id, name: f.originalName }))\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: `${uploadedFiles.length} arquivos enviados com sucesso`,\r\n        data: { files: uploadedFiles }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer upload de múltiplos arquivos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista arquivos com paginação e filtros\r\n   */\r\n  static async getFiles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        type,\r\n        mimetype,\r\n        search,\r\n        uploadedBy,\r\n        dateFrom,\r\n        dateTo,\r\n        page = 1,\r\n        limit = 20,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: FileFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (type) {\r\n        where.type = type;\r\n      }\r\n\r\n      if (mimetype) {\r\n        where.mimetype = mimetype;\r\n      }\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { originalName: { contains: search, mode: 'insensitive' } },\r\n          { filename: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (uploadedBy) {\r\n        where.userId = uploadedBy;\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.createdAt = {};\r\n        if (dateFrom) {\r\n          where.createdAt.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.createdAt.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar arquivos\r\n      const [files, total] = await Promise.all([\r\n        prisma.upload.findMany({\r\n          where,\r\n          include: {\r\n            user: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            }\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.upload.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      // Estatísticas\r\n      const stats = await prisma.upload.groupBy({\r\n        by: ['type'],\r\n        _count: true,\r\n        _sum: { size: true }\r\n      });\r\n\r\n      const statistics = {\r\n        total,\r\n        totalSize: stats.reduce((acc, stat) => acc + (stat._sum.size || 0), 0),\r\n        byType: stats.reduce((acc, stat) => {\r\n          acc[stat.type] = {\r\n            count: stat._count,\r\n            size: stat._sum.size || 0\r\n          };\r\n          return acc;\r\n        }, {} as any)\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Arquivos listados com sucesso',\r\n        data: {\r\n          files: files.map(file => ({\r\n            ...file,\r\n            // Campo metadata removido pois não existe no modelo Upload\r\n          })),\r\n          statistics,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar arquivos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca arquivo por ID\r\n   */\r\n  static async getFileById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do arquivo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const file = await prisma.upload.findUnique({\r\n        where: { id },\r\n        include: {\r\n          user: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      if (!file) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Arquivo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Arquivo encontrado',\r\n        data: {\r\n          file: {\r\n            ...file,\r\n            // Campo metadata removido pois não existe no modelo Upload\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar arquivo', { error, fileId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um arquivo\r\n   */\r\n  static async deleteFile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do arquivo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const file = await prisma.upload.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!file) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Arquivo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permissões (proprietário ou admin)\r\n      if (currentUser.role !== 'ADMIN' && file.userId !== currentUser.id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permissão para deletar este arquivo'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Remover arquivo físico\r\n      try {\r\n        await fs.unlink(file.path);\r\n        \r\n        // TODO: Implementar remoção de versões redimensionadas quando o modelo Upload for atualizado para suportar metadata\r\n        // Código removido pois o campo metadata não existe no modelo Upload\r\n      } catch (error) {\r\n        logger.warn('Erro ao remover arquivo físico', { path: file.path, error });\r\n      }\r\n\r\n      // Remover registro do banco\r\n      await prisma.upload.delete({\r\n        where: { id }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Arquivo deletado', {\r\n        fileId: id,\r\n        filename: file.filename,\r\n        originalName: file.originalName,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Arquivo deletado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar arquivo', { error, fileId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove múltiplos arquivos\r\n   */\r\n  static async deleteMultipleFiles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { fileIds }: { fileIds: string[] } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!fileIds || !Array.isArray(fileIds) || fileIds.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Lista de IDs de arquivos é obrigatória'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (fileIds.length > 50) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Máximo de 50 arquivos por vez'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar arquivos\r\n      const files = await prisma.upload.findMany({\r\n        where: {\r\n          id: { in: fileIds },\r\n          // Apenas admin pode deletar arquivos de outros usuários\r\n          ...(currentUser.role !== 'ADMIN' && { uploadedById: currentUser.id })\r\n        }\r\n      });\r\n\r\n      if (files.length === 0) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo encontrado ou sem permissão'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Remover arquivos físicos\r\n      for (const file of files) {\r\n        try {\r\n          await fs.unlink(file.path);\r\n          \r\n          // TODO: Implementar remoção de versões redimensionadas quando necessário\r\n        } catch (error) {\r\n          logger.warn('Erro ao remover arquivo físico', { path: file.path, error });\r\n        }\r\n      }\r\n\r\n      // Remover registros do banco\r\n      const result = await prisma.upload.deleteMany({\r\n        where: {\r\n          id: { in: files.map(f => f.id) }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Múltiplos arquivos deletados', {\r\n        count: result.count,\r\n        deletedBy: currentUser.id,\r\n        files: files.map(f => ({ id: f.id, name: f.originalName }))\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${result.count} arquivos deletados com sucesso`,\r\n        data: { deletedCount: result.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar múltiplos arquivos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém estatísticas de arquivos\r\n   */\r\n  static async getFileStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const [totalStats, periodStats, sizeStats] = await Promise.all([\r\n        // Estatísticas gerais\r\n        prisma.upload.groupBy({\r\n          by: ['type'],\r\n          _count: true,\r\n          _sum: { size: true }\r\n        }),\r\n        // Estatísticas do período\r\n        prisma.upload.groupBy({\r\n          by: ['type'],\r\n          where: {\r\n            createdAt: { gte: dateLimit }\r\n          },\r\n          _count: true,\r\n          _sum: { size: true }\r\n        }),\r\n        // Estatísticas de tamanho\r\n        prisma.upload.aggregate({\r\n          _sum: { size: true },\r\n          _avg: { size: true },\r\n          _count: true\r\n        })\r\n      ]);\r\n\r\n      const statistics = {\r\n        total: {\r\n          files: sizeStats._count,\r\n          size: sizeStats._sum.size || 0,\r\n          averageSize: sizeStats._avg.size || 0,\r\n          byType: totalStats.reduce((acc, stat) => {\r\n            acc[stat.type] = {\r\n              count: stat._count,\r\n              size: stat._sum.size || 0\r\n            };\r\n            return acc;\r\n          }, {} as any)\r\n        },\r\n        period: {\r\n          days: periodDays,\r\n          byType: periodStats.reduce((acc, stat) => {\r\n            acc[stat.type] = {\r\n              count: stat._count,\r\n              size: stat._sum.size || 0\r\n            };\r\n            return acc;\r\n          }, {} as any)\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estatísticas obtidas com sucesso',\r\n        data: { statistics }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estatísticas de arquivos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default UploadController;"],"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","ignoreList":[]}
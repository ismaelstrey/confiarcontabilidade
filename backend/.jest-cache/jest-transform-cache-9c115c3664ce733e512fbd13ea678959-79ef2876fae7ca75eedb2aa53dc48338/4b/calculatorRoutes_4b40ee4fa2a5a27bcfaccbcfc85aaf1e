974f7f156dc94a3a0da6ba32b2cf5f6d
"use strict";

/* istanbul ignore next */
function cov_x9zhz160e() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\calculatorRoutes.ts";
  var hash = "b0090b949b4084de4f3e501c4c320116d341abfb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\calculatorRoutes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 77
        }
      },
      "3": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 45
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "5": {
        start: {
          line: 199,
          column: 0
        },
        end: {
          line: 199,
          column: 111
        }
      },
      "6": {
        start: {
          line: 199,
          column: 41
        },
        end: {
          line: 199,
          column: 109
        }
      },
      "7": {
        start: {
          line: 256,
          column: 0
        },
        end: {
          line: 256,
          column: 117
        }
      },
      "8": {
        start: {
          line: 256,
          column: 42
        },
        end: {
          line: 256,
          column: 115
        }
      },
      "9": {
        start: {
          line: 335,
          column: 0
        },
        end: {
          line: 335,
          column: 110
        }
      },
      "10": {
        start: {
          line: 335,
          column: 38
        },
        end: {
          line: 335,
          column: 108
        }
      },
      "11": {
        start: {
          line: 412,
          column: 0
        },
        end: {
          line: 412,
          column: 127
        }
      },
      "12": {
        start: {
          line: 412,
          column: 47
        },
        end: {
          line: 412,
          column: 125
        }
      },
      "13": {
        start: {
          line: 500,
          column: 0
        },
        end: {
          line: 500,
          column: 120
        }
      },
      "14": {
        start: {
          line: 500,
          column: 43
        },
        end: {
          line: 500,
          column: 118
        }
      },
      "15": {
        start: {
          line: 583,
          column: 0
        },
        end: {
          line: 583,
          column: 104
        }
      },
      "16": {
        start: {
          line: 583,
          column: 35
        },
        end: {
          line: 583,
          column: 102
        }
      },
      "17": {
        start: {
          line: 617,
          column: 0
        },
        end: {
          line: 617,
          column: 167
        }
      },
      "18": {
        start: {
          line: 617,
          column: 90
        },
        end: {
          line: 617,
          column: 165
        }
      },
      "19": {
        start: {
          line: 634,
          column: 0
        },
        end: {
          line: 634,
          column: 173
        }
      },
      "20": {
        start: {
          line: 634,
          column: 93
        },
        end: {
          line: 634,
          column: 171
        }
      },
      "21": {
        start: {
          line: 635,
          column: 0
        },
        end: {
          line: 635,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 199,
            column: 27
          },
          end: {
            line: 199,
            column: 28
          }
        },
        loc: {
          start: {
            line: 199,
            column: 41
          },
          end: {
            line: 199,
            column: 109
          }
        },
        line: 199
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 256,
            column: 28
          },
          end: {
            line: 256,
            column: 29
          }
        },
        loc: {
          start: {
            line: 256,
            column: 42
          },
          end: {
            line: 256,
            column: 115
          }
        },
        line: 256
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 335,
            column: 24
          },
          end: {
            line: 335,
            column: 25
          }
        },
        loc: {
          start: {
            line: 335,
            column: 38
          },
          end: {
            line: 335,
            column: 108
          }
        },
        line: 335
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 412,
            column: 33
          },
          end: {
            line: 412,
            column: 34
          }
        },
        loc: {
          start: {
            line: 412,
            column: 47
          },
          end: {
            line: 412,
            column: 125
          }
        },
        line: 412
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 500,
            column: 29
          },
          end: {
            line: 500,
            column: 30
          }
        },
        loc: {
          start: {
            line: 500,
            column: 43
          },
          end: {
            line: 500,
            column: 118
          }
        },
        line: 500
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 583,
            column: 21
          },
          end: {
            line: 583,
            column: 22
          }
        },
        loc: {
          start: {
            line: 583,
            column: 35
          },
          end: {
            line: 583,
            column: 102
          }
        },
        line: 583
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 617,
            column: 76
          },
          end: {
            line: 617,
            column: 77
          }
        },
        loc: {
          start: {
            line: 617,
            column: 90
          },
          end: {
            line: 617,
            column: 165
          }
        },
        line: 617
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 634,
            column: 79
          },
          end: {
            line: 634,
            column: 80
          }
        },
        loc: {
          start: {
            line: 634,
            column: 93
          },
          end: {
            line: 634,
            column: 171
          }
        },
        line: 634
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {},
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\calculatorRoutes.ts",
      mappings: ";;AAAA,qCAAiC;AACjC,8EAA2E;AAC3E,8CAA8D;AAE9D,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiKG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACH,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,2CAAoB,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAExF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuDG;AACH,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,2CAAoB,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAE9F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6EG;AACH,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,2CAAoB,CAAC,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAEvF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2EG;AACH,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,2CAAoB,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAExG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsFG;AACH,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,2CAAoB,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAEjG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiFG;AACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,2CAAoB,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAEjF,wBAAwB;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,mBAAY,EAAE,IAAA,gBAAS,EAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,2CAAoB,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAE7H;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,mBAAY,EAAE,IAAA,gBAAS,EAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,2CAAoB,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAEnI,kBAAe,MAAM,CAAC",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\calculatorRoutes.ts"],
      sourcesContent: ["import { Router } from 'express';\r\nimport { calculatorController } from '../controllers/calculatorController';\r\nimport { authenticate, authorize } from '../middlewares/auth';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     TaxCalculationRequest:\r\n *       type: object\r\n *       required:\r\n *         - income\r\n *         - deductions\r\n *         - taxYear\r\n *       properties:\r\n *         income:\r\n *           type: number\r\n *           minimum: 0\r\n *           description: Renda bruta anual\r\n *         deductions:\r\n *           type: number\r\n *           minimum: 0\r\n *           description: Dedu\xE7\xF5es totais\r\n *         taxYear:\r\n *           type: integer\r\n *           minimum: 2020\r\n *           maximum: 2030\r\n *           description: Ano fiscal\r\n *         dependents:\r\n *           type: integer\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: N\xFAmero de dependentes\r\n *         medicalExpenses:\r\n *           type: number\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: Gastos m\xE9dicos\r\n *         educationExpenses:\r\n *           type: number\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: Gastos com educa\xE7\xE3o\r\n *         pensionContributions:\r\n *           type: number\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: Contribui\xE7\xF5es previdenci\xE1rias\r\n *     TaxCalculationResult:\r\n *       type: object\r\n *       properties:\r\n *         grossIncome:\r\n *           type: number\r\n *           description: Renda bruta\r\n *         taxableIncome:\r\n *           type: number\r\n *           description: Renda tribut\xE1vel\r\n *         totalDeductions:\r\n *           type: number\r\n *           description: Total de dedu\xE7\xF5es\r\n *         incomeTax:\r\n *           type: number\r\n *           description: Imposto de renda devido\r\n *         netIncome:\r\n *           type: number\r\n *           description: Renda l\xEDquida\r\n *         effectiveRate:\r\n *           type: number\r\n *           description: Al\xEDquota efetiva (%)\r\n *         marginalRate:\r\n *           type: number\r\n *           description: Al\xEDquota marginal (%)\r\n *         breakdown:\r\n *           type: array\r\n *           items:\r\n *             type: object\r\n *             properties:\r\n *               bracket:\r\n *                 type: string\r\n *               rate:\r\n *                 type: number\r\n *               taxableAmount:\r\n *                 type: number\r\n *               tax:\r\n *                 type: number\r\n *         deductionsBreakdown:\r\n *           type: object\r\n *           properties:\r\n *             standard:\r\n *               type: number\r\n *             dependents:\r\n *               type: number\r\n *             medical:\r\n *               type: number\r\n *             education:\r\n *               type: number\r\n *             pension:\r\n *               type: number\r\n *             other:\r\n *               type: number\r\n *     CompanyTaxRequest:\r\n *       type: object\r\n *       required:\r\n *         - revenue\r\n *         - expenses\r\n *         - companyType\r\n *       properties:\r\n *         revenue:\r\n *           type: number\r\n *           minimum: 0\r\n *           description: Receita bruta\r\n *         expenses:\r\n *           type: number\r\n *           minimum: 0\r\n *           description: Despesas operacionais\r\n *         companyType:\r\n *           type: string\r\n *           enum: [MEI, SIMPLES, LUCRO_PRESUMIDO, LUCRO_REAL]\r\n *           description: Tipo de empresa\r\n *         employees:\r\n *           type: integer\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: N\xFAmero de funcion\xE1rios\r\n *         sector:\r\n *           type: string\r\n *           description: Setor de atividade\r\n *     PayrollCalculationRequest:\r\n *       type: object\r\n *       required:\r\n *         - grossSalary\r\n *         - position\r\n *       properties:\r\n *         grossSalary:\r\n *           type: number\r\n *           minimum: 0\r\n *           description: Sal\xE1rio bruto\r\n *         position:\r\n *           type: string\r\n *           description: Cargo do funcion\xE1rio\r\n *         dependents:\r\n *           type: integer\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: N\xFAmero de dependentes\r\n *         transportVoucher:\r\n *           type: number\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: Vale transporte\r\n *         mealVoucher:\r\n *           type: number\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: Vale refei\xE7\xE3o\r\n *         healthInsurance:\r\n *           type: number\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: Plano de sa\xFAde\r\n *         lifeInsurance:\r\n *           type: number\r\n *           minimum: 0\r\n *           default: 0\r\n *           description: Seguro de vida\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/calculator/income-tax:\r\n *   post:\r\n *     summary: Calcular imposto de renda pessoa f\xEDsica\r\n *     tags: [Calculadora]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/TaxCalculationRequest'\r\n *     responses:\r\n *       200:\r\n *         description: C\xE1lculo realizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/TaxCalculationResult'\r\n *                 calculatedAt:\r\n *                   type: string\r\n *                   format: date-time\r\n *       400:\r\n *         description: Dados inv\xE1lidos para c\xE1lculo\r\n */\r\nrouter.post('/income-tax', (req, res) => calculatorController.calculateTaxes(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/calculator/company-tax:\r\n *   post:\r\n *     summary: Calcular impostos para pessoa jur\xEDdica\r\n *     tags: [Calculadora]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/CompanyTaxRequest'\r\n *     responses:\r\n *       200:\r\n *         description: C\xE1lculo realizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     revenue:\r\n *                       type: number\r\n *                     expenses:\r\n *                       type: number\r\n *                     profit:\r\n *                       type: number\r\n *                     taxes:\r\n *                       type: object\r\n *                       properties:\r\n *                         irpj:\r\n *                           type: number\r\n *                         csll:\r\n *                           type: number\r\n *                         pis:\r\n *                           type: number\r\n *                         cofins:\r\n *                           type: number\r\n *                         iss:\r\n *                           type: number\r\n *                         total:\r\n *                           type: number\r\n *                     netProfit:\r\n *                       type: number\r\n *                     effectiveRate:\r\n *                       type: number\r\n *                 calculatedAt:\r\n *                   type: string\r\n *                   format: date-time\r\n *       400:\r\n *         description: Dados inv\xE1lidos para c\xE1lculo\r\n */\r\nrouter.post('/company-tax', (req, res) => calculatorController.calculateCompanyTax(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/calculator/payroll:\r\n *   post:\r\n *     summary: Calcular folha de pagamento\r\n *     tags: [Calculadora]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/PayrollCalculationRequest'\r\n *     responses:\r\n *       200:\r\n *         description: C\xE1lculo realizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     grossSalary:\r\n *                       type: number\r\n *                     deductions:\r\n *                       type: object\r\n *                       properties:\r\n *                         inss:\r\n *                           type: number\r\n *                         irrf:\r\n *                           type: number\r\n *                         transportVoucher:\r\n *                           type: number\r\n *                         healthInsurance:\r\n *                           type: number\r\n *                         lifeInsurance:\r\n *                           type: number\r\n *                         other:\r\n *                           type: number\r\n *                         total:\r\n *                           type: number\r\n *                     benefits:\r\n *                       type: object\r\n *                       properties:\r\n *                         mealVoucher:\r\n *                           type: number\r\n *                         transportVoucher:\r\n *                           type: number\r\n *                         familyAllowance:\r\n *                           type: number\r\n *                         total:\r\n *                           type: number\r\n *                     netSalary:\r\n *                       type: number\r\n *                     employerCosts:\r\n *                       type: object\r\n *                       properties:\r\n *                         inss:\r\n *                           type: number\r\n *                         fgts:\r\n *                           type: number\r\n *                         rat:\r\n *                           type: number\r\n *                         salarioEducacao:\r\n *                           type: number\r\n *                         total:\r\n *                           type: number\r\n *                     totalCost:\r\n *                       type: number\r\n *                 calculatedAt:\r\n *                   type: string\r\n *                   format: date-time\r\n *       400:\r\n *         description: Dados inv\xE1lidos para c\xE1lculo\r\n */\r\nrouter.post('/payroll', (req, res) => calculatorController.calculatePayroll(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/calculator/simples-nacional:\r\n *   post:\r\n *     summary: Calcular impostos do Simples Nacional\r\n *     tags: [Calculadora]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - revenue\r\n *               - annex\r\n *             properties:\r\n *               revenue:\r\n *                 type: number\r\n *                 minimum: 0\r\n *                 description: Receita bruta mensal\r\n *               annex:\r\n *                 type: string\r\n *                 enum: [I, II, III, IV, V]\r\n *                 description: Anexo do Simples Nacional\r\n *               accumulatedRevenue:\r\n *                 type: number\r\n *                 minimum: 0\r\n *                 description: Receita acumulada nos \xFAltimos 12 meses\r\n *     responses:\r\n *       200:\r\n *         description: C\xE1lculo realizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     revenue:\r\n *                       type: number\r\n *                     annex:\r\n *                       type: string\r\n *                     bracket:\r\n *                       type: string\r\n *                     rate:\r\n *                       type: number\r\n *                     tax:\r\n *                       type: number\r\n *                     netRevenue:\r\n *                       type: number\r\n *                     breakdown:\r\n *                       type: object\r\n *                       properties:\r\n *                         irpj:\r\n *                           type: number\r\n *                         csll:\r\n *                           type: number\r\n *                         pis:\r\n *                           type: number\r\n *                         cofins:\r\n *                           type: number\r\n *                         cpp:\r\n *                           type: number\r\n *                         icms:\r\n *                           type: number\r\n *                         iss:\r\n *                           type: number\r\n *                 calculatedAt:\r\n *                   type: string\r\n *                   format: date-time\r\n *       400:\r\n *         description: Dados inv\xE1lidos para c\xE1lculo\r\n */\r\nrouter.post('/simples-nacional', (req, res) => calculatorController.calculateSimplesNacional(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/calculator/depreciation:\r\n *   post:\r\n *     summary: Calcular deprecia\xE7\xE3o de bens\r\n *     tags: [Calculadora]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - assetValue\r\n *               - assetType\r\n *               - acquisitionDate\r\n *             properties:\r\n *               assetValue:\r\n *                 type: number\r\n *                 minimum: 0\r\n *                 description: Valor do bem\r\n *               assetType:\r\n *                 type: string\r\n *                 enum: [BUILDING, MACHINERY, VEHICLE, FURNITURE, COMPUTER, OTHER]\r\n *                 description: Tipo do bem\r\n *               acquisitionDate:\r\n *                 type: string\r\n *                 format: date\r\n *                 description: Data de aquisi\xE7\xE3o\r\n *               residualValue:\r\n *                 type: number\r\n *                 minimum: 0\r\n *                 default: 0\r\n *                 description: Valor residual\r\n *               method:\r\n *                 type: string\r\n *                 enum: [LINEAR, ACCELERATED, SUM_OF_YEARS]\r\n *                 default: LINEAR\r\n *                 description: M\xE9todo de deprecia\xE7\xE3o\r\n *     responses:\r\n *       200:\r\n *         description: C\xE1lculo realizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     assetValue:\r\n *                       type: number\r\n *                     residualValue:\r\n *                       type: number\r\n *                     depreciableValue:\r\n *                       type: number\r\n *                     usefulLife:\r\n *                       type: integer\r\n *                     annualDepreciation:\r\n *                       type: number\r\n *                     monthlyDepreciation:\r\n *                       type: number\r\n *                     accumulatedDepreciation:\r\n *                       type: number\r\n *                     currentValue:\r\n *                       type: number\r\n *                     schedule:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           year:\r\n *                             type: integer\r\n *                           depreciation:\r\n *                             type: number\r\n *                           accumulated:\r\n *                             type: number\r\n *                           bookValue:\r\n *                             type: number\r\n *                 calculatedAt:\r\n *                   type: string\r\n *                   format: date-time\r\n *       400:\r\n *         description: Dados inv\xE1lidos para c\xE1lculo\r\n */\r\nrouter.post('/depreciation', (req, res) => calculatorController.calculateDepreciation(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/calculator/loan:\r\n *   post:\r\n *     summary: Calcular financiamento/empr\xE9stimo\r\n *     tags: [Calculadora]\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - principal\r\n *               - interestRate\r\n *               - term\r\n *             properties:\r\n *               principal:\r\n *                 type: number\r\n *                 minimum: 0\r\n *                 description: Valor principal\r\n *               interestRate:\r\n *                 type: number\r\n *                 minimum: 0\r\n *                 description: Taxa de juros (% ao m\xEAs)\r\n *               term:\r\n *                 type: integer\r\n *                 minimum: 1\r\n *                 description: Prazo em meses\r\n *               paymentType:\r\n *                 type: string\r\n *                 enum: [SAC, PRICE, AMERICAN]\r\n *                 default: PRICE\r\n *                 description: Sistema de amortiza\xE7\xE3o\r\n *     responses:\r\n *       200:\r\n *         description: C\xE1lculo realizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     principal:\r\n *                       type: number\r\n *                     interestRate:\r\n *                       type: number\r\n *                     term:\r\n *                       type: integer\r\n *                     paymentType:\r\n *                       type: string\r\n *                     monthlyPayment:\r\n *                       type: number\r\n *                     totalPayment:\r\n *                       type: number\r\n *                     totalInterest:\r\n *                       type: number\r\n *                     schedule:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           month:\r\n *                             type: integer\r\n *                           payment:\r\n *                             type: number\r\n *                           principal:\r\n *                             type: number\r\n *                           interest:\r\n *                             type: number\r\n *                           balance:\r\n *                             type: number\r\n *                 calculatedAt:\r\n *                   type: string\r\n *                   format: date-time\r\n *       400:\r\n *         description: Dados inv\xE1lidos para c\xE1lculo\r\n */\r\nrouter.post('/loan', (req, res) => calculatorController.calculateLoan(req, res));\r\n\r\n// Rotas administrativas\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/calculator/history:\r\n *   get:\r\n *     summary: Obter hist\xF3rico de c\xE1lculos (Admin)\r\n *     tags: [Calculadora]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: P\xE1gina\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 100\r\n *           default: 20\r\n *         description: Itens por p\xE1gina\r\n *     responses:\r\n *       200:\r\n *         description: Hist\xF3rico obtido com sucesso\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o\r\n */\r\nrouter.get('/history', authenticate, authorize('ADMIN'), (req, res) => calculatorController.getCalculationHistory(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/calculator/statistics:\r\n *   get:\r\n *     summary: Obter estat\xEDsticas de c\xE1lculos (Admin)\r\n *     tags: [Calculadora]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Estat\xEDsticas obtidas com sucesso\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o\r\n */\r\nrouter.get('/statistics', authenticate, authorize('ADMIN'), (req, res) => calculatorController.getCalculationStatistics(req, res));\r\n\r\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b0090b949b4084de4f3e501c4c320116d341abfb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_x9zhz160e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_x9zhz160e();
cov_x9zhz160e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_x9zhz160e().s[1]++, require("express"));
const calculatorController_1 =
/* istanbul ignore next */
(cov_x9zhz160e().s[2]++, require("../controllers/calculatorController"));
const auth_1 =
/* istanbul ignore next */
(cov_x9zhz160e().s[3]++, require("../middlewares/auth"));
const router =
/* istanbul ignore next */
(cov_x9zhz160e().s[4]++, (0, express_1.Router)());
/**
 * @swagger
 * components:
 *   schemas:
 *     TaxCalculationRequest:
 *       type: object
 *       required:
 *         - income
 *         - deductions
 *         - taxYear
 *       properties:
 *         income:
 *           type: number
 *           minimum: 0
 *           description: Renda bruta anual
 *         deductions:
 *           type: number
 *           minimum: 0
 *           description: Deduções totais
 *         taxYear:
 *           type: integer
 *           minimum: 2020
 *           maximum: 2030
 *           description: Ano fiscal
 *         dependents:
 *           type: integer
 *           minimum: 0
 *           default: 0
 *           description: Número de dependentes
 *         medicalExpenses:
 *           type: number
 *           minimum: 0
 *           default: 0
 *           description: Gastos médicos
 *         educationExpenses:
 *           type: number
 *           minimum: 0
 *           default: 0
 *           description: Gastos com educação
 *         pensionContributions:
 *           type: number
 *           minimum: 0
 *           default: 0
 *           description: Contribuições previdenciárias
 *     TaxCalculationResult:
 *       type: object
 *       properties:
 *         grossIncome:
 *           type: number
 *           description: Renda bruta
 *         taxableIncome:
 *           type: number
 *           description: Renda tributável
 *         totalDeductions:
 *           type: number
 *           description: Total de deduções
 *         incomeTax:
 *           type: number
 *           description: Imposto de renda devido
 *         netIncome:
 *           type: number
 *           description: Renda líquida
 *         effectiveRate:
 *           type: number
 *           description: Alíquota efetiva (%)
 *         marginalRate:
 *           type: number
 *           description: Alíquota marginal (%)
 *         breakdown:
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               bracket:
 *                 type: string
 *               rate:
 *                 type: number
 *               taxableAmount:
 *                 type: number
 *               tax:
 *                 type: number
 *         deductionsBreakdown:
 *           type: object
 *           properties:
 *             standard:
 *               type: number
 *             dependents:
 *               type: number
 *             medical:
 *               type: number
 *             education:
 *               type: number
 *             pension:
 *               type: number
 *             other:
 *               type: number
 *     CompanyTaxRequest:
 *       type: object
 *       required:
 *         - revenue
 *         - expenses
 *         - companyType
 *       properties:
 *         revenue:
 *           type: number
 *           minimum: 0
 *           description: Receita bruta
 *         expenses:
 *           type: number
 *           minimum: 0
 *           description: Despesas operacionais
 *         companyType:
 *           type: string
 *           enum: [MEI, SIMPLES, LUCRO_PRESUMIDO, LUCRO_REAL]
 *           description: Tipo de empresa
 *         employees:
 *           type: integer
 *           minimum: 0
 *           default: 0
 *           description: Número de funcionários
 *         sector:
 *           type: string
 *           description: Setor de atividade
 *     PayrollCalculationRequest:
 *       type: object
 *       required:
 *         - grossSalary
 *         - position
 *       properties:
 *         grossSalary:
 *           type: number
 *           minimum: 0
 *           description: Salário bruto
 *         position:
 *           type: string
 *           description: Cargo do funcionário
 *         dependents:
 *           type: integer
 *           minimum: 0
 *           default: 0
 *           description: Número de dependentes
 *         transportVoucher:
 *           type: number
 *           minimum: 0
 *           default: 0
 *           description: Vale transporte
 *         mealVoucher:
 *           type: number
 *           minimum: 0
 *           default: 0
 *           description: Vale refeição
 *         healthInsurance:
 *           type: number
 *           minimum: 0
 *           default: 0
 *           description: Plano de saúde
 *         lifeInsurance:
 *           type: number
 *           minimum: 0
 *           default: 0
 *           description: Seguro de vida
 */
/**
 * @swagger
 * /api/v1/calculator/income-tax:
 *   post:
 *     summary: Calcular imposto de renda pessoa física
 *     tags: [Calculadora]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/TaxCalculationRequest'
 *     responses:
 *       200:
 *         description: Cálculo realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/TaxCalculationResult'
 *                 calculatedAt:
 *                   type: string
 *                   format: date-time
 *       400:
 *         description: Dados inválidos para cálculo
 */
/* istanbul ignore next */
cov_x9zhz160e().s[5]++;
router.post('/income-tax', (req, res) => {
  /* istanbul ignore next */
  cov_x9zhz160e().f[0]++;
  cov_x9zhz160e().s[6]++;
  return calculatorController_1.calculatorController.calculateTaxes(req, res);
});
/**
 * @swagger
 * /api/v1/calculator/company-tax:
 *   post:
 *     summary: Calcular impostos para pessoa jurídica
 *     tags: [Calculadora]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/CompanyTaxRequest'
 *     responses:
 *       200:
 *         description: Cálculo realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     revenue:
 *                       type: number
 *                     expenses:
 *                       type: number
 *                     profit:
 *                       type: number
 *                     taxes:
 *                       type: object
 *                       properties:
 *                         irpj:
 *                           type: number
 *                         csll:
 *                           type: number
 *                         pis:
 *                           type: number
 *                         cofins:
 *                           type: number
 *                         iss:
 *                           type: number
 *                         total:
 *                           type: number
 *                     netProfit:
 *                       type: number
 *                     effectiveRate:
 *                       type: number
 *                 calculatedAt:
 *                   type: string
 *                   format: date-time
 *       400:
 *         description: Dados inválidos para cálculo
 */
/* istanbul ignore next */
cov_x9zhz160e().s[7]++;
router.post('/company-tax', (req, res) => {
  /* istanbul ignore next */
  cov_x9zhz160e().f[1]++;
  cov_x9zhz160e().s[8]++;
  return calculatorController_1.calculatorController.calculateCompanyTax(req, res);
});
/**
 * @swagger
 * /api/v1/calculator/payroll:
 *   post:
 *     summary: Calcular folha de pagamento
 *     tags: [Calculadora]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/PayrollCalculationRequest'
 *     responses:
 *       200:
 *         description: Cálculo realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     grossSalary:
 *                       type: number
 *                     deductions:
 *                       type: object
 *                       properties:
 *                         inss:
 *                           type: number
 *                         irrf:
 *                           type: number
 *                         transportVoucher:
 *                           type: number
 *                         healthInsurance:
 *                           type: number
 *                         lifeInsurance:
 *                           type: number
 *                         other:
 *                           type: number
 *                         total:
 *                           type: number
 *                     benefits:
 *                       type: object
 *                       properties:
 *                         mealVoucher:
 *                           type: number
 *                         transportVoucher:
 *                           type: number
 *                         familyAllowance:
 *                           type: number
 *                         total:
 *                           type: number
 *                     netSalary:
 *                       type: number
 *                     employerCosts:
 *                       type: object
 *                       properties:
 *                         inss:
 *                           type: number
 *                         fgts:
 *                           type: number
 *                         rat:
 *                           type: number
 *                         salarioEducacao:
 *                           type: number
 *                         total:
 *                           type: number
 *                     totalCost:
 *                       type: number
 *                 calculatedAt:
 *                   type: string
 *                   format: date-time
 *       400:
 *         description: Dados inválidos para cálculo
 */
/* istanbul ignore next */
cov_x9zhz160e().s[9]++;
router.post('/payroll', (req, res) => {
  /* istanbul ignore next */
  cov_x9zhz160e().f[2]++;
  cov_x9zhz160e().s[10]++;
  return calculatorController_1.calculatorController.calculatePayroll(req, res);
});
/**
 * @swagger
 * /api/v1/calculator/simples-nacional:
 *   post:
 *     summary: Calcular impostos do Simples Nacional
 *     tags: [Calculadora]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - revenue
 *               - annex
 *             properties:
 *               revenue:
 *                 type: number
 *                 minimum: 0
 *                 description: Receita bruta mensal
 *               annex:
 *                 type: string
 *                 enum: [I, II, III, IV, V]
 *                 description: Anexo do Simples Nacional
 *               accumulatedRevenue:
 *                 type: number
 *                 minimum: 0
 *                 description: Receita acumulada nos últimos 12 meses
 *     responses:
 *       200:
 *         description: Cálculo realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     revenue:
 *                       type: number
 *                     annex:
 *                       type: string
 *                     bracket:
 *                       type: string
 *                     rate:
 *                       type: number
 *                     tax:
 *                       type: number
 *                     netRevenue:
 *                       type: number
 *                     breakdown:
 *                       type: object
 *                       properties:
 *                         irpj:
 *                           type: number
 *                         csll:
 *                           type: number
 *                         pis:
 *                           type: number
 *                         cofins:
 *                           type: number
 *                         cpp:
 *                           type: number
 *                         icms:
 *                           type: number
 *                         iss:
 *                           type: number
 *                 calculatedAt:
 *                   type: string
 *                   format: date-time
 *       400:
 *         description: Dados inválidos para cálculo
 */
/* istanbul ignore next */
cov_x9zhz160e().s[11]++;
router.post('/simples-nacional', (req, res) => {
  /* istanbul ignore next */
  cov_x9zhz160e().f[3]++;
  cov_x9zhz160e().s[12]++;
  return calculatorController_1.calculatorController.calculateSimplesNacional(req, res);
});
/**
 * @swagger
 * /api/v1/calculator/depreciation:
 *   post:
 *     summary: Calcular depreciação de bens
 *     tags: [Calculadora]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - assetValue
 *               - assetType
 *               - acquisitionDate
 *             properties:
 *               assetValue:
 *                 type: number
 *                 minimum: 0
 *                 description: Valor do bem
 *               assetType:
 *                 type: string
 *                 enum: [BUILDING, MACHINERY, VEHICLE, FURNITURE, COMPUTER, OTHER]
 *                 description: Tipo do bem
 *               acquisitionDate:
 *                 type: string
 *                 format: date
 *                 description: Data de aquisição
 *               residualValue:
 *                 type: number
 *                 minimum: 0
 *                 default: 0
 *                 description: Valor residual
 *               method:
 *                 type: string
 *                 enum: [LINEAR, ACCELERATED, SUM_OF_YEARS]
 *                 default: LINEAR
 *                 description: Método de depreciação
 *     responses:
 *       200:
 *         description: Cálculo realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     assetValue:
 *                       type: number
 *                     residualValue:
 *                       type: number
 *                     depreciableValue:
 *                       type: number
 *                     usefulLife:
 *                       type: integer
 *                     annualDepreciation:
 *                       type: number
 *                     monthlyDepreciation:
 *                       type: number
 *                     accumulatedDepreciation:
 *                       type: number
 *                     currentValue:
 *                       type: number
 *                     schedule:
 *                       type: array
 *                       items:
 *                         type: object
 *                         properties:
 *                           year:
 *                             type: integer
 *                           depreciation:
 *                             type: number
 *                           accumulated:
 *                             type: number
 *                           bookValue:
 *                             type: number
 *                 calculatedAt:
 *                   type: string
 *                   format: date-time
 *       400:
 *         description: Dados inválidos para cálculo
 */
/* istanbul ignore next */
cov_x9zhz160e().s[13]++;
router.post('/depreciation', (req, res) => {
  /* istanbul ignore next */
  cov_x9zhz160e().f[4]++;
  cov_x9zhz160e().s[14]++;
  return calculatorController_1.calculatorController.calculateDepreciation(req, res);
});
/**
 * @swagger
 * /api/v1/calculator/loan:
 *   post:
 *     summary: Calcular financiamento/empréstimo
 *     tags: [Calculadora]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - principal
 *               - interestRate
 *               - term
 *             properties:
 *               principal:
 *                 type: number
 *                 minimum: 0
 *                 description: Valor principal
 *               interestRate:
 *                 type: number
 *                 minimum: 0
 *                 description: Taxa de juros (% ao mês)
 *               term:
 *                 type: integer
 *                 minimum: 1
 *                 description: Prazo em meses
 *               paymentType:
 *                 type: string
 *                 enum: [SAC, PRICE, AMERICAN]
 *                 default: PRICE
 *                 description: Sistema de amortização
 *     responses:
 *       200:
 *         description: Cálculo realizado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     principal:
 *                       type: number
 *                     interestRate:
 *                       type: number
 *                     term:
 *                       type: integer
 *                     paymentType:
 *                       type: string
 *                     monthlyPayment:
 *                       type: number
 *                     totalPayment:
 *                       type: number
 *                     totalInterest:
 *                       type: number
 *                     schedule:
 *                       type: array
 *                       items:
 *                         type: object
 *                         properties:
 *                           month:
 *                             type: integer
 *                           payment:
 *                             type: number
 *                           principal:
 *                             type: number
 *                           interest:
 *                             type: number
 *                           balance:
 *                             type: number
 *                 calculatedAt:
 *                   type: string
 *                   format: date-time
 *       400:
 *         description: Dados inválidos para cálculo
 */
/* istanbul ignore next */
cov_x9zhz160e().s[15]++;
router.post('/loan', (req, res) => {
  /* istanbul ignore next */
  cov_x9zhz160e().f[5]++;
  cov_x9zhz160e().s[16]++;
  return calculatorController_1.calculatorController.calculateLoan(req, res);
});
// Rotas administrativas
/**
 * @swagger
 * /api/v1/calculator/history:
 *   get:
 *     summary: Obter histórico de cálculos (Admin)
 *     tags: [Calculadora]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Página
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 20
 *         description: Itens por página
 *     responses:
 *       200:
 *         description: Histórico obtido com sucesso
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 */
/* istanbul ignore next */
cov_x9zhz160e().s[17]++;
router.get('/history', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_x9zhz160e().f[6]++;
  cov_x9zhz160e().s[18]++;
  return calculatorController_1.calculatorController.getCalculationHistory(req, res);
});
/**
 * @swagger
 * /api/v1/calculator/statistics:
 *   get:
 *     summary: Obter estatísticas de cálculos (Admin)
 *     tags: [Calculadora]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estatísticas obtidas com sucesso
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão
 */
/* istanbul ignore next */
cov_x9zhz160e().s[19]++;
router.get('/statistics', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_x9zhz160e().f[7]++;
  cov_x9zhz160e().s[20]++;
  return calculatorController_1.calculatorController.getCalculationStatistics(req, res);
});
/* istanbul ignore next */
cov_x9zhz160e().s[21]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
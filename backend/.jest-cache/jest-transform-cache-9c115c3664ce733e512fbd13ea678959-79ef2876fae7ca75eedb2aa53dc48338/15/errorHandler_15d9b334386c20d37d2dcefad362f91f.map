{"version":3,"names":["cov_1nb9g0ko8q","actualCoverage","s","logger_1","require","AppError","Error","statusCode","code","details","isOperational","constructor","message","b","f","captureStackTrace","exports","errorHandler","error","req","res","next","logger","stack","url","method","ip","userAgent","get","errorResponse","success","timestamp","Date","toISOString","path","process","env","NODE_ENV","status","json","asyncHandler","fn","Promise","resolve","catch","createValidationError","createUnauthorizedError","createForbiddenError","createNotFoundError","createConflictError","createDatabaseError","createTooManyRequestsError"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\errorHandler.ts"],"sourcesContent":["import type { Request, Response, NextFunction } from 'express';\r\nimport { logger } from './logger';\r\n\r\n// Interface para erros customizados\r\nexport interface CustomError extends Error {\r\n  statusCode?: number;\r\n  code?: string;\r\n  details?: any;\r\n}\r\n\r\n// Classe para erros da aplicação\r\nexport class AppError extends Error {\r\n  public readonly statusCode: number;\r\n  public readonly code: string;\r\n  public readonly details?: any;\r\n  public readonly isOperational: boolean;\r\n\r\n  constructor(\r\n    message: string,\r\n    statusCode: number = 500,\r\n    code: string = 'INTERNAL_ERROR',\r\n    details?: any,\r\n    isOperational: boolean = true,\r\n  ) {\r\n    super(message);\r\n    this.statusCode = statusCode;\r\n    this.code = code;\r\n    this.details = details;\r\n    this.isOperational = isOperational;\r\n\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\n// Middleware de tratamento de erros\r\nexport const errorHandler = (\r\n  error: CustomError,\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) => {\r\n  // Log do erro\r\n  logger.error('Error occurred:', {\r\n    message: error.message,\r\n    stack: error.stack,\r\n    statusCode: error.statusCode,\r\n    code: error.code,\r\n    url: req.url,\r\n    method: req.method,\r\n    ip: req.ip,\r\n    userAgent: req.get('User-Agent'),\r\n    details: error.details,\r\n  });\r\n\r\n  // Definir status code padrão\r\n  const statusCode = error.statusCode || 500;\r\n  const code = error.code || 'INTERNAL_ERROR';\r\n\r\n  // Resposta base do erro\r\n  const errorResponse: any = {\r\n    success: false,\r\n    error: {\r\n      code,\r\n      message: error.message || 'Erro interno do servidor',\r\n    },\r\n    timestamp: new Date().toISOString(),\r\n    path: req.url,\r\n    method: req.method,\r\n  };\r\n\r\n  // Adicionar detalhes em desenvolvimento\r\n  if (process.env.NODE_ENV === 'development') {\r\n    errorResponse.error.stack = error.stack;\r\n    if (error.details) {\r\n      errorResponse.error.details = error.details;\r\n    }\r\n  }\r\n\r\n  // Tratamento específico para diferentes tipos de erro\r\n  switch (code) {\r\n    case 'VALIDATION_ERROR':\r\n      errorResponse.error.message = 'Dados de entrada inválidos';\r\n      break;\r\n    case 'UNAUTHORIZED':\r\n      errorResponse.error.message = 'Acesso não autorizado';\r\n      break;\r\n    case 'FORBIDDEN':\r\n      errorResponse.error.message = 'Acesso negado';\r\n      break;\r\n    case 'NOT_FOUND':\r\n      errorResponse.error.message = 'Recurso não encontrado';\r\n      break;\r\n    case 'CONFLICT':\r\n      errorResponse.error.message = 'Conflito de dados';\r\n      break;\r\n    case 'TOO_MANY_REQUESTS':\r\n      errorResponse.error.message = 'Muitas tentativas. Tente novamente mais tarde';\r\n      break;\r\n    case 'DATABASE_ERROR':\r\n      errorResponse.error.message = 'Erro no banco de dados';\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        errorResponse.error.details = error.details;\r\n      }\r\n      break;\r\n    default:\r\n      if (statusCode >= 500) {\r\n        errorResponse.error.message = 'Erro interno do servidor';\r\n      }\r\n  }\r\n\r\n  // Enviar resposta de erro\r\n  res.status(statusCode).json(errorResponse);\r\n};\r\n\r\n// Middleware para capturar erros assíncronos\r\nexport const asyncHandler = (\r\n  fn: (req: Request, res: Response, next: NextFunction) => Promise<any>,\r\n) => {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    Promise.resolve(fn(req, res, next)).catch(next);\r\n  };\r\n};\r\n\r\n// Funções utilitárias para criar erros específicos\r\nexport const createValidationError = (message: string, details?: any) => {\r\n  return new AppError(message, 400, 'VALIDATION_ERROR', details);\r\n};\r\n\r\nexport const createUnauthorizedError = (message: string = 'Acesso não autorizado') => {\r\n  return new AppError(message, 401, 'UNAUTHORIZED');\r\n};\r\n\r\nexport const createForbiddenError = (message: string = 'Acesso negado') => {\r\n  return new AppError(message, 403, 'FORBIDDEN');\r\n};\r\n\r\nexport const createNotFoundError = (message: string = 'Recurso não encontrado') => {\r\n  return new AppError(message, 404, 'NOT_FOUND');\r\n};\r\n\r\nexport const createConflictError = (message: string, details?: any) => {\r\n  return new AppError(message, 409, 'CONFLICT', details);\r\n};\r\n\r\nexport const createDatabaseError = (message: string, details?: any) => {\r\n  return new AppError(message, 500, 'DATABASE_ERROR', details);\r\n};\r\n\r\nexport const createTooManyRequestsError = (message: string = 'Muitas tentativas') => {\r\n  return new AppError(message, 429, 'TOO_MANY_REQUESTS');\r\n};"],"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","ignoreList":[]}
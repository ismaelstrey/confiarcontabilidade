{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\authService.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\authService.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { logger } from '../middlewares/logger';\r\nimport { ValidationError } from '../utils/error';\r\n\r\n// Interfaces para tipagem\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterData {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  role?: string;\r\n}\r\n\r\nexport interface TokenPayload {\r\n  userId: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\nexport interface AuthTokens {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface UserResponse {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport class AuthService {\r\n  private readonly JWT_SECRET: string;\r\n  private readonly JWT_REFRESH_SECRET: string;\r\n  private readonly JWT_EXPIRES_IN: string;\r\n  private readonly JWT_REFRESH_EXPIRES_IN: string;\r\n  private readonly SALT_ROUNDS: number;\r\n  private readonly prisma: PrismaClient;\r\n\r\n  constructor(prismaClient?: PrismaClient) {\r\n    this.JWT_SECRET = process.env.JWT_SECRET || 'default-secret';\r\n    this.JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'default-refresh-secret';\r\n    this.JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '15m';\r\n    this.JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '7d';\r\n    this.SALT_ROUNDS = parseInt(process.env.BCRYPT_SALT_ROUNDS || '12');\r\n    this.prisma = prismaClient || new PrismaClient();\r\n  }\r\n\r\n  /**\r\n   * Registra um novo usuário no sistema\r\n   */\r\n  async register(userData: RegisterData): Promise<{ user: UserResponse; tokens: AuthTokens }> {\r\n    try {\r\n      // Validar formato do email\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(userData.email)) {\r\n        throw new ValidationError('Formato de email inválido');\r\n      }\r\n\r\n      // Validar força da senha\r\n      if (userData.password.length < 8) {\r\n        throw new ValidationError('Senha deve ter pelo menos 8 caracteres');\r\n      }\r\n\r\n      // Verificar se o usuário já existe\r\n      const existingUser = await this.prisma.user.findUnique({\r\n        where: { email: userData.email }\r\n      });\r\n\r\n      if (existingUser) {\r\n        throw new Error('Usuário já existe com este email');\r\n      }\r\n\r\n      // Hash da senha\r\n      const hashedPassword = await bcrypt.hash(userData.password, this.SALT_ROUNDS);\r\n\r\n      // Criar usuário\r\n      const user = await this.prisma.user.create({\r\n        data: {\r\n          name: userData.name,\r\n          email: userData.email,\r\n          password: hashedPassword,\r\n          role: userData.role || 'USER'\r\n        }\r\n      });\r\n\r\n      // Gerar tokens\r\n      const tokens = this.generateTokens({\r\n        userId: user.id,\r\n        email: user.email,\r\n        role: user.role\r\n      });\r\n\r\n      // Salvar refresh token no banco\r\n      await this.saveRefreshToken(user.id, tokens.refreshToken);\r\n\r\n      logger.info(`Usuário registrado com sucesso: ${user.email}`);\r\n\r\n      return {\r\n        user: this.formatUserResponse(user),\r\n        tokens\r\n      };\r\n    } catch (error) {\r\n      logger.error('Erro ao registrar usuário:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Autentica um usuário e retorna tokens\r\n   */\r\n  async login(credentials: LoginCredentials): Promise<{ user: UserResponse; tokens: AuthTokens }> {\r\n    try {\r\n      // Buscar usuário\r\n      const user = await this.prisma.user.findUnique({\r\n        where: { email: credentials.email }\r\n      });\r\n\r\n      if (!user) {\r\n        throw new Error('Credenciais inválidas');\r\n      }\r\n\r\n      // Verificar senha\r\n      const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n      if (!isPasswordValid) {\r\n        throw new Error('Credenciais inválidas');\r\n      }\r\n\r\n      // Gerar tokens\r\n      const tokens = this.generateTokens({\r\n        userId: user.id,\r\n        email: user.email,\r\n        role: user.role\r\n      });\r\n\r\n      // Salvar refresh token no banco\r\n      await this.saveRefreshToken(user.id, tokens.refreshToken);\r\n\r\n      logger.info(`Login realizado com sucesso: ${user.email}`);\r\n\r\n      return {\r\n        user: this.formatUserResponse(user),\r\n        tokens\r\n      };\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer login:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renova o access token usando o refresh token\r\n   */\r\n  async refreshToken(refreshToken: string): Promise<AuthTokens> {\r\n    try {\r\n      // Verificar refresh token\r\n      const payload = jwt.verify(refreshToken, this.JWT_REFRESH_SECRET) as TokenPayload;\r\n\r\n      // Verificar se o refresh token existe no banco\r\n      const storedToken = await this.prisma.refreshToken.findFirst({\r\n        where: {\r\n          token: refreshToken,\r\n          userId: payload.userId\r\n        }\r\n      });\r\n\r\n      if (!storedToken) {\r\n        throw new Error('Refresh token inválido');\r\n      }\r\n\r\n      // Buscar usuário\r\n      const user = await this.prisma.user.findUnique({\r\n        where: { id: payload.userId }\r\n      });\r\n\r\n      if (!user) {\r\n        throw new Error('Usuário não encontrado');\r\n      }\r\n\r\n      // Gerar novos tokens\r\n      const tokens = this.generateTokens({\r\n        userId: user.id,\r\n        email: user.email,\r\n        role: user.role\r\n      });\r\n\r\n      // Remover refresh token antigo e salvar o novo\r\n      await this.prisma.refreshToken.delete({\r\n        where: { id: storedToken.id }\r\n      });\r\n      await this.saveRefreshToken(user.id, tokens.refreshToken);\r\n\r\n      logger.info(`Token renovado para usuário: ${user.email}`);\r\n\r\n      return tokens;\r\n    } catch (error) {\r\n      logger.error('Erro ao renovar token:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Faz logout do usuário removendo o refresh token\r\n   */\r\n  async logout(refreshToken: string): Promise<void> {\r\n    try {\r\n      await this.prisma.refreshToken.deleteMany({\r\n        where: { token: refreshToken }\r\n      });\r\n\r\n      logger.info('Logout realizado com sucesso');\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer logout:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se um access token é válido\r\n   */\r\n  async verifyAccessToken(token: string): Promise<TokenPayload> {\r\n    try {\r\n      const payload = jwt.verify(token, this.JWT_SECRET) as TokenPayload;\r\n      return payload;\r\n    } catch (error) {\r\n      logger.error('Token inválido:', error);\r\n      throw new Error('Token inválido');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um usuário pelo ID\r\n   */\r\n  async getUserById(userId: string): Promise<UserResponse | null> {\r\n    try {\r\n      const user = await this.prisma.user.findUnique({\r\n        where: { id: userId }\r\n      });\r\n\r\n      return user ? this.formatUserResponse(user) : null;\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar usuário:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Altera a senha do usuário\r\n   */\r\n  async changePassword(userId: string, currentPassword: string, newPassword: string): Promise<void> {\r\n    try {\r\n      // Buscar usuário\r\n      const user = await this.prisma.user.findUnique({\r\n        where: { id: userId }\r\n      });\r\n\r\n      if (!user) {\r\n        throw new Error('Usuário não encontrado');\r\n      }\r\n\r\n      // Verificar senha atual\r\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n      if (!isCurrentPasswordValid) {\r\n        throw new Error('Senha atual incorreta');\r\n      }\r\n\r\n      // Hash da nova senha\r\n      const hashedNewPassword = await bcrypt.hash(newPassword, this.SALT_ROUNDS);\r\n\r\n      // Atualizar senha\r\n      await this.prisma.user.update({\r\n        where: { id: userId },\r\n        data: { password: hashedNewPassword }\r\n      });\r\n\r\n      // Remover todos os refresh tokens do usuário (forçar novo login)\r\n      await this.prisma.refreshToken.deleteMany({\r\n        where: { userId }\r\n      });\r\n\r\n      logger.info(`Senha alterada para usuário: ${user.email}`);\r\n    } catch (error) {\r\n      logger.error('Erro ao alterar senha:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gera tokens de acesso e refresh\r\n   */\r\n  private generateTokens(payload: TokenPayload): AuthTokens {\r\n    const accessToken = jwt.sign(\r\n      payload as object,\r\n      this.JWT_SECRET as jwt.Secret,\r\n      {\r\n        expiresIn: this.JWT_EXPIRES_IN\r\n      } as jwt.SignOptions\r\n    );\r\n\r\n    const refreshToken = jwt.sign(\r\n      payload as object,\r\n      this.JWT_REFRESH_SECRET as jwt.Secret,\r\n      {\r\n        expiresIn: this.JWT_REFRESH_EXPIRES_IN\r\n      } as jwt.SignOptions\r\n    );\r\n\r\n    return { accessToken, refreshToken };\r\n  }\r\n\r\n  /**\r\n   * Salva o refresh token no banco de dados\r\n   */\r\n  private async saveRefreshToken(userId: string, token: string): Promise<void> {\r\n    const expiresAt = new Date();\r\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 dias\r\n\r\n    await this.prisma.refreshToken.create({\r\n      data: {\r\n        token,\r\n        userId,\r\n        expiresAt\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Formata a resposta do usuário removendo dados sensíveis\r\n   */\r\n  private formatUserResponse(user: any): UserResponse {\r\n    return {\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email,\r\n      role: user.role,\r\n      createdAt: user.createdAt,\r\n      updatedAt: user.updatedAt\r\n    };\r\n  }\r\n}\r\n\r\n// Exportar instância singleton\r\nexport const authService = new AuthService();"],"version":3}
{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\utils\\__tests__\\auth.test.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\utils\\__tests__\\auth.test.ts"],"sourcesContent":["import { hashPassword, comparePassword, generateToken, verifyToken } from '../auth';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\n\r\n// Mock do bcrypt\r\njest.mock('bcrypt');\r\nconst mockBcrypt = bcrypt as jest.Mocked<typeof bcrypt>;\r\n\r\n// Mock do jsonwebtoken\r\njest.mock('jsonwebtoken');\r\nconst mockJwt = jwt as jest.Mocked<typeof jwt>;\r\n\r\ndescribe('Auth Utils', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // Mock environment variables\r\n    process.env.JWT_SECRET = 'your-super-secret-jwt-key-change-this-in-production';\r\n    process.env.JWT_REFRESH_SECRET = 'your-super-secret-refresh-jwt-key-change-this-in-production';\r\n    process.env.BCRYPT_SALT_ROUNDS = '12';\r\n  });\r\n\r\n  describe('hashPassword', () => {\r\n    it('should hash a password successfully', async () => {\r\n      const password = 'test123';\r\n      const hashedPassword = '$2b$10$hashedpassword';\r\n      \r\n      mockBcrypt.hash.mockResolvedValue(hashedPassword as never);\r\n\r\n      const result = await hashPassword(password);\r\n\r\n      expect(result).toBe(hashedPassword);\r\n      expect(mockBcrypt.hash).toHaveBeenCalledWith(password, 12);\r\n    });\r\n\r\n    it('should throw error if hashing fails', async () => {\r\n      const password = 'test123';\r\n      const error = new Error('Hashing failed');\r\n      \r\n      (mockBcrypt.hash as jest.Mock).mockRejectedValue(error);\r\n\r\n      await expect(hashPassword(password)).rejects.toThrow('Hashing failed');\r\n    });\r\n  });\r\n\r\n  describe('comparePassword', () => {\r\n    it('should return true for matching password', async () => {\r\n      const password = 'test123';\r\n      const hashedPassword = '$2b$10$hashedpassword';\r\n      \r\n      mockBcrypt.compare.mockResolvedValue(true as never);\r\n\r\n      const result = await comparePassword(password, hashedPassword);\r\n\r\n      expect(result).toBe(true);\r\n      expect(mockBcrypt.compare).toHaveBeenCalledWith(password, hashedPassword);\r\n    });\r\n\r\n    it('should return false for non-matching password', async () => {\r\n      const password = 'test123';\r\n      const wrongPassword = 'wrong123';\r\n      const hashedPassword = '$2b$10$hashedpassword';\r\n      \r\n      mockBcrypt.compare.mockResolvedValue(false as never);\r\n\r\n      const result = await comparePassword(wrongPassword, hashedPassword);\r\n\r\n      expect(result).toBe(false);\r\n      expect(mockBcrypt.compare).toHaveBeenCalledWith(wrongPassword, hashedPassword);\r\n    });\r\n\r\n    it('should throw error if comparison fails', async () => {\r\n      const password = 'test123';\r\n      const hashedPassword = '$2b$10$hashedpassword';\r\n      const error = new Error('Comparison failed');\r\n      \r\n      (mockBcrypt.compare as jest.Mock).mockRejectedValue(error);\r\n\r\n      await expect(comparePassword(password, hashedPassword)).rejects.toThrow('Comparison failed');\r\n    });\r\n  });\r\n\r\n  describe('generateToken', () => {\r\n    it('should generate a valid JWT access token', () => {\r\n      const user = {\r\n        id: '1',\r\n        email: 'test@example.com',\r\n        role: 'CLIENT' as const,\r\n        tokenVersion: 1,\r\n      };\r\n      const expectedToken = 'generated_jwt_token';\r\n      \r\n      mockJwt.sign.mockReturnValue(expectedToken as never);\r\n\r\n      const result = generateToken(user);\r\n\r\n      expect(result).toBe(expectedToken);\r\n      expect(mockJwt.sign).toHaveBeenCalledWith(\r\n        user,\r\n        'test-jwt-secret',\r\n        { expiresIn: '1h' }\r\n      );\r\n    });\r\n\r\n    it('should generate a valid JWT token with custom expiration', () => {\r\n      const user = {\r\n        id: '1',\r\n        email: 'test@example.com',\r\n        role: 'CLIENT' as const,\r\n      };\r\n      const expectedToken = 'generated_jwt_token_custom';\r\n      \r\n      mockJwt.sign.mockReturnValue(expectedToken as never);\r\n\r\n      const result = generateToken(user, '2h');\r\n\r\n      expect(result).toBe(expectedToken);\r\n      expect(mockJwt.sign).toHaveBeenCalledWith(\r\n        user,\r\n        'test-jwt-secret',\r\n        { expiresIn: '2h' }\r\n      );\r\n    });\r\n\r\n    it('should throw error if token generation fails', () => {\r\n      const user = {\r\n        id: '1',\r\n        email: 'test@example.com',\r\n        role: 'CLIENT' as const,\r\n        tokenVersion: 1,\r\n      };\r\n      const error = new Error('Token generation failed');\r\n      \r\n      mockJwt.sign.mockImplementation(() => {\r\n        throw error;\r\n      });\r\n\r\n      expect(() => generateToken(user)).toThrow();\r\n    });\r\n  });\r\n\r\n  describe('verifyToken', () => {\r\n    it('should verify a valid access token', () => {\r\n      const token = 'valid_jwt_token';\r\n      const decodedPayload = {\r\n        userId: '1',\r\n        email: 'test@example.com',\r\n        role: 'CLIENT',\r\n        iat: 1234567890,\r\n        exp: 1234571490,\r\n      };\r\n      \r\n      mockJwt.verify.mockReturnValue(decodedPayload as never);\r\n\r\n      const result = verifyToken(token);\r\n\r\n      expect(result).toEqual(decodedPayload);\r\n      expect(mockJwt.verify).toHaveBeenCalledWith(token, 'test-jwt-secret');\r\n    });\r\n\r\n    it('should verify a valid refresh token', () => {\r\n      const refreshToken = 'valid_refresh_token';\r\n      const decodedPayload = {\r\n        userId: '1',\r\n        tokenVersion: 1,\r\n        iat: 1234567890,\r\n        exp: 1234571490,\r\n      };\r\n      \r\n      mockJwt.verify.mockReturnValue(decodedPayload as never);\r\n\r\n      const result = verifyToken(refreshToken);\r\n\r\n      expect(result).toEqual(decodedPayload);\r\n      expect(mockJwt.verify).toHaveBeenCalledWith(refreshToken, 'test-jwt-secret');\r\n    });\r\n\r\n    it('should throw error for invalid token', () => {\r\n      const token = 'invalid_token';\r\n      const error = new Error('Invalid token');\r\n      \r\n      mockJwt.verify.mockImplementation(() => {\r\n        throw error;\r\n      });\r\n\r\n      expect(() => verifyToken(token)).toThrow('Invalid token');\r\n    });\r\n\r\n    it('should throw error for expired token', () => {\r\n      const token = 'expired_token';\r\n      const error = new Error('Token expired');\r\n      \r\n      mockJwt.verify.mockImplementation(() => {\r\n        throw error;\r\n      });\r\n\r\n      expect(() => verifyToken(token)).toThrow('Token expired');\r\n    });\r\n\r\n    it('should use default token type as access', () => {\r\n      const token = 'valid_jwt_token';\r\n      const decodedPayload = {\r\n        userId: '1',\r\n        email: 'test@example.com',\r\n        role: 'CLIENT',\r\n      };\r\n      \r\n      mockJwt.verify.mockReturnValue(decodedPayload as never);\r\n\r\n      verifyToken(token);\r\n\r\n      expect(mockJwt.verify).toHaveBeenCalledWith(token, 'test-jwt-secret');\r\n    });\r\n  });\r\n\r\n  describe('edge cases', () => {\r\n    it('should handle empty password in hashPassword', async () => {\r\n      const password = '';\r\n      const hashedPassword = '$2b$10$emptyhash';\r\n      \r\n      mockBcrypt.hash.mockResolvedValue(hashedPassword as never);\r\n\r\n      const result = await hashPassword(password);\r\n\r\n      expect(result).toBe(hashedPassword);\r\n      expect(mockBcrypt.hash).toHaveBeenCalledWith(password, 12);\r\n    });\r\n\r\n    it('should handle special characters in password', async () => {\r\n      const password = 'P@ssw0rd!#$%';\r\n      const hashedPassword = '$2b$10$specialcharhash';\r\n      \r\n      mockBcrypt.hash.mockResolvedValue(hashedPassword as never);\r\n\r\n      const result = await hashPassword(password);\r\n\r\n      expect(result).toBe(hashedPassword);\r\n      expect(mockBcrypt.hash).toHaveBeenCalledWith(password, 12);\r\n    });\r\n\r\n    it('should handle missing environment variables gracefully', () => {\r\n      delete process.env.JWT_SECRET;\r\n      \r\n      const user = {\r\n        id: '1',\r\n        email: 'test@example.com',\r\n        role: 'CLIENT' as const,\r\n        tokenVersion: 1,\r\n      };\r\n\r\n      expect(() => generateToken(user)).toThrow();\r\n    });\r\n  });\r\n});"],"version":3}
{"version":3,"names":["cov_1xyvz3ailp","actualCoverage","client_1","s","require","logger_1","__importDefault","prisma","PrismaClient","ArticleController","getArticles","req","res","f","search","category","tag","isPublished","authorId","page","b","limit","sortBy","sortOrder","query","skip","Number","take","where","OR","title","contains","mode","content","excerpt","slug","tags","has","undefined","status","orderBy","articles","total","Promise","all","article","findMany","include","author","select","id","name","email","categories","_count","comments","count","totalPages","Math","ceil","json","success","message","data","pagination","hasNext","hasPrev","error","default","getArticle","identifier","params","incrementViews","findUnique","isApproved","createdAt","update","views","increment","createArticle","featuredImage","categoryId","body","currentUser","user","articleSlug","toLowerCase","normalize","replace","trim","existingArticle","Date","now","articleExcerpt","plainText","length","substring","articleData","publishedAt","create","map","tagId","info","articleId","updateArticle","role","updateData","deleteMany","slugInUse","findFirst","not","updatedAt","updatedArticle","updatedBy","changes","Object","keys","getRelatedArticles","currentArticle","relatedArticles","AND","some","in","cat","getPopularArticles","period","periodDays","dateLimit","setDate","getDate","popularArticles","gte","deleteArticle","delete","likeArticle","existingLike","articleLike","userId_articleId","userId","liked","likesCount","getArticleComments","comment","createComment","commentId","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\articleController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de artigo\r\ninterface ArticleData {\r\n  title?: string;\r\n  content?: string;\r\n  excerpt?: string;\r\n  slug?: string;\r\n  featuredImage?: string;\r\n  isPublished?: boolean;\r\n  publishedAt?: Date;\r\n  tags?: string[];\r\n  categoryId?: string;\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface ArticleFilters {\r\n  search?: string;\r\n  category?: string;\r\n  tag?: string;\r\n  isPublished?: boolean;\r\n  authorId?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'publishedAt' | 'title' | 'views';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de artigos\r\n */\r\nexport class ArticleController {\r\n  /**\r\n   * Lista todos os artigos com paginação e filtros\r\n   */\r\n  static async getArticles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        search,\r\n        category,\r\n        tag,\r\n        isPublished,\r\n        authorId,\r\n        page = 1,\r\n        limit = 10,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: ArticleFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { title: { contains: search, mode: 'insensitive' } },\r\n          { content: { contains: search, mode: 'insensitive' } },\r\n          { excerpt: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (category) {\r\n        where.category = {\r\n          slug: category\r\n        };\r\n      }\r\n\r\n      if (tag) {\r\n        where.tags = {\r\n          has: tag\r\n        };\r\n      }\r\n\r\n      if (isPublished !== undefined) {\r\n        where.status = isPublished ? 'PUBLISHED' : 'DRAFT';\r\n      }\r\n\r\n      if (authorId) {\r\n        where.authorId = authorId;\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar artigos\r\n      const [articles, total] = await Promise.all([\r\n        prisma.article.findMany({\r\n          where,\r\n          include: {\r\n            author: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            },\r\n            categories: {\r\n              include: {\r\n                category: {\r\n                  select: {\r\n                    id: true,\r\n                    name: true,\r\n                    slug: true\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            _count: {\r\n              select: {\r\n                comments: true\r\n              }\r\n            }\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.article.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigos listados com sucesso',\r\n        data: {\r\n          articles,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar artigos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um artigo por ID ou slug\r\n   */\r\n  static async getArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { identifier } = req.params;\r\n      const { incrementViews = 'false' } = req.query;\r\n\r\n      if (!identifier) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID ou slug do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Tentar buscar por ID primeiro, depois por slug\r\n      let article = await prisma.article.findUnique({\r\n        where: { id: identifier },\r\n        include: {\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          },\r\n          comments: {\r\n            where: { isApproved: true },\r\n            orderBy: { createdAt: 'desc' }\r\n          },\r\n          _count: {\r\n            select: {\r\n              comments: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Se não encontrou por ID, tentar por slug\r\n      if (!article) {\r\n        article = await prisma.article.findUnique({\r\n          where: { slug: identifier },\r\n          include: {\r\n            author: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            },\r\n            categories: {\r\n              include: {\r\n                category: {\r\n                  select: {\r\n                    id: true,\r\n                    name: true,\r\n                    slug: true\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            comments: {\r\n              where: { isApproved: true },\r\n              orderBy: { createdAt: 'desc' }\r\n            },\r\n            _count: {\r\n              select: {\r\n                comments: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (!article) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Incrementar visualizações se solicitado\r\n      if (incrementViews === 'true') {\r\n        await prisma.article.update({\r\n          where: { id: article.id },\r\n          data: { views: { increment: 1 } }\r\n        });\r\n        article.views += 1;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigo encontrado',\r\n        data: { article }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar artigo', { error, identifier: req.params.identifier });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria um novo artigo\r\n   */\r\n  static async createArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        title,\r\n        content,\r\n        excerpt,\r\n        slug,\r\n        featuredImage,\r\n        isPublished = false,\r\n        tags = [],\r\n        categoryId\r\n      }: ArticleData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Validações básicas\r\n      if (!title || !content) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Título e conteúdo são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar slug se não fornecido\r\n      let articleSlug = slug;\r\n      if (!articleSlug) {\r\n        articleSlug = title\r\n          .toLowerCase()\r\n          .normalize('NFD')\r\n          .replace(/[\\u0300-\\u036f]/g, '')\r\n          .replace(/[^a-z0-9\\s-]/g, '')\r\n          .replace(/\\s+/g, '-')\r\n          .replace(/-+/g, '-')\r\n          .trim();\r\n      }\r\n\r\n      // Verificar se o slug já existe\r\n      const existingArticle = await prisma.article.findUnique({\r\n        where: { slug: articleSlug }\r\n      });\r\n\r\n      if (existingArticle) {\r\n        // Adicionar timestamp ao slug para torná-lo único\r\n        articleSlug = `${articleSlug}-${Date.now()}`;\r\n      }\r\n\r\n      // Verificar se a categoria existe (se fornecida)\r\n      if (categoryId) {\r\n        const category = await prisma.category.findUnique({\r\n          where: { id: categoryId }\r\n        });\r\n\r\n        if (!category) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Categoria não encontrada'\r\n          });\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Gerar excerpt se não fornecido\r\n      let articleExcerpt = excerpt;\r\n      if (!articleExcerpt) {\r\n        // Remover tags HTML e pegar os primeiros 200 caracteres\r\n        const plainText = content.replace(/<[^>]*>/g, '');\r\n        articleExcerpt = plainText.length > 200\r\n          ? plainText.substring(0, 200) + '...'\r\n          : plainText;\r\n      }\r\n\r\n      // Criar artigo\r\n      const articleData: any = {\r\n        title: title || '',\r\n        content: content || '',\r\n        excerpt: articleExcerpt,\r\n        slug: articleSlug,\r\n        featuredImage: featuredImage || undefined,\r\n        status: isPublished ? 'PUBLISHED' : 'DRAFT',\r\n        publishedAt: isPublished ? new Date() : null,\r\n        authorId: currentUser.id as string,\r\n        tags: {\r\n          create: tags?.map((tagId: string) => ({ tagId })) || []\r\n        }\r\n      };\r\n      \r\n      // Add categories if provided\r\n      if (categoryId) {\r\n        articleData.categories = {\r\n          create: [{ categoryId }]\r\n        };\r\n      }\r\n      \r\n      const article = await prisma.article.create({\r\n        data: articleData,\r\n        include: {\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true\r\n\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Artigo criado', {\r\n        articleId: article.id,\r\n        title: article.title,\r\n        authorId: currentUser.id,\r\n        status: article.status\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Artigo criado com sucesso',\r\n        data: { article }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar artigo', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza um artigo existente\r\n   */\r\n  static async updateArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const {\r\n        title,\r\n        content,\r\n        excerpt,\r\n        slug,\r\n        featuredImage,\r\n        isPublished,\r\n        tags,\r\n        categoryId\r\n      }: ArticleData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const existingArticle = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingArticle) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permissões (autor ou admin)\r\n      if (currentUser.role !== 'ADMIN' && existingArticle.authorId !== currentUser.id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permissão para editar este artigo'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Preparar dados para atualização\r\n      const updateData: any = {};\r\n\r\n      if (title) updateData.title = title;\r\n      if (content) updateData.content = content;\r\n      if (excerpt) updateData.excerpt = excerpt;\r\n      if (featuredImage !== undefined) updateData.featuredImage = featuredImage;\r\n      \r\n      // Handle categories relationship\r\n      if (categoryId !== undefined) {\r\n        if (categoryId) {\r\n          // Verificar se a categoria existe\r\n          const category = await prisma.category.findUnique({\r\n            where: { id: categoryId }\r\n          });\r\n\r\n          if (!category) {\r\n            res.status(400).json({\r\n              success: false,\r\n              message: 'Categoria não encontrada'\r\n            });\r\n            return;\r\n          }\r\n          \r\n          updateData.categories = {\r\n            deleteMany: {},\r\n            create: [{ categoryId }]\r\n          };\r\n        } else {\r\n          updateData.categories = {\r\n            deleteMany: {}\r\n          };\r\n        }\r\n      }\r\n      \r\n      // Handle tags relationship\r\n      if (tags) {\r\n        updateData.tags = {\r\n          deleteMany: {},\r\n          create: tags.map((tagId: string) => ({ tagId }))\r\n        };\r\n      }\r\n\r\n      // Verificar slug único se fornecido\r\n      if (slug && slug !== existingArticle.slug) {\r\n        const slugInUse = await prisma.article.findFirst({\r\n          where: {\r\n            slug,\r\n            id: { not: id }\r\n          }\r\n        });\r\n\r\n        if (slugInUse) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Slug já está em uso por outro artigo'\r\n          });\r\n          return;\r\n        }\r\n\r\n        updateData.slug = slug;\r\n      }\r\n\r\n      // Gerenciar publicação\r\n      if (isPublished !== undefined) {\r\n        updateData.status = isPublished ? 'PUBLISHED' : 'DRAFT';\r\n\r\n        // Se está sendo publicado pela primeira vez\r\n        if (isPublished && existingArticle.status !== 'PUBLISHED') {\r\n          updateData.publishedAt = new Date();\r\n        }\r\n\r\n        // Se está sendo despublicado\r\n        if (!isPublished && existingArticle.status === 'PUBLISHED') {\r\n          updateData.publishedAt = null;\r\n        }\r\n      }\r\n\r\n      updateData.updatedAt = new Date();\r\n\r\n      // Atualizar artigo\r\n      const updatedArticle = await prisma.article.update({\r\n        where: { id },\r\n        data: updateData,\r\n        include: {\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Artigo atualizado', {\r\n        articleId: id,\r\n        updatedBy: currentUser.id,\r\n        changes: Object.keys(updateData)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigo atualizado com sucesso',\r\n        data: { article: updatedArticle }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar artigo', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um artigo\r\n   */\r\n  // static async deleteArticle(req: Request, res: Response): Promise<void> {\r\n  //   try {\r\n  //     const { id } = req.params;\r\n  //     const currentUser = (req as any).user;\r\n\r\n  //     if (!id) {\r\n  //       res.status(400).json({\r\n  //         success: false,\r\n  //         message: 'ID do artigo é obrigatório'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Verificar se o artigo existe\r\n  //     const existingArticle = await prisma.article.findUnique({\r\n  //       where: { id }\r\n  //     });\r\n\r\n  //     if (!existingArticle) {\r\n  //       res.status(404).json({\r\n  //         success: false,\r\n  //         message: 'Artigo não encontrado'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Verificar permissões (autor ou admin)\r\n  //     if (currentUser.role !== 'ADMIN' && existingArticle.authorId !== currentUser.id) {\r\n  //       res.status(403).json({\r\n  //         success: false,\r\n  //         message: 'Sem permissão para deletar este artigo'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Deletar artigo e comentários relacionados\r\n  //     await prisma.$transaction([\r\n  //       prisma.articleComment.deleteMany({\r\n  //         where: { articleId: id }\r\n  //       }),\r\n  //       prisma.article.delete({\r\n  //         where: { id }\r\n  //       })\r\n  //     ]);\r\n\r\n  //     // Log da ação\r\n  //     logger.info('Artigo deletado', {\r\n  //       articleId: id,\r\n  //       title: existingArticle.title,\r\n  //       deletedBy: currentUser.id\r\n  //     });\r\n\r\n  //     res.status(200).json({\r\n  //       success: true,\r\n  //       message: 'Artigo deletado com sucesso'\r\n  //     });\r\n  //   } catch (error) {\r\n  //     logger.error('Erro ao deletar artigo', { error, articleId: req.params.id });\r\n  //     res.status(500).json({\r\n  //       success: false,\r\n  //       message: 'Erro interno do servidor'\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Busca artigos relacionados\r\n   */\r\n  static async getRelatedArticles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { limit = 5 } = req.query;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar o artigo atual\r\n      const currentArticle = await prisma.article.findUnique({\r\n        where: { id },\r\n        select: {\r\n          categories: {\r\n            select: {\r\n              categoryId: true\r\n            }\r\n          },\r\n          tags: {\r\n            select: {\r\n              tagId: true\r\n            }\r\n          }\r\n        }\r\n      }) as { categories: { categoryId: string }[]; tags: { tagId: string }[] } | null;\r\n\r\n      if (!currentArticle) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar artigos relacionados\r\n      const relatedArticles = await prisma.article.findMany({\r\n        where: {\r\n          AND: [\r\n            { id: { not: id } },\r\n            { status: 'PUBLISHED' },\r\n            {\r\n              OR: [\r\n                // Mesma categoria\r\n                currentArticle.categories.length > 0 ? {\r\n                  categories: {\r\n                    some: {\r\n                      categoryId: {\r\n                        in: currentArticle.categories.map(cat => cat.categoryId)\r\n                      }\r\n                    }\r\n                  }\r\n                } : {},\r\n                // Tags em comum\r\n                currentArticle.tags.length > 0 ? {\r\n                  tags: {\r\n                    some: {\r\n                      tagId: {\r\n                        in: currentArticle.tags.map(tag => tag.tagId)\r\n                      }\r\n                    }\r\n                  }\r\n                } : {}\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        select: {\r\n          id: true,\r\n          title: true,\r\n          excerpt: true,\r\n          slug: true,\r\n          featuredImage: true,\r\n          publishedAt: true,\r\n          views: true,\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        },\r\n        take: Number(limit),\r\n        orderBy: { publishedAt: 'desc' }\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigos relacionados encontrados',\r\n        data: { articles: relatedArticles }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar artigos relacionados', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca artigos populares\r\n   */\r\n  static async getPopularArticles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { limit = 10, period = '30' } = req.query;\r\n\r\n      // Calcular data limite baseada no período\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const popularArticles = await prisma.article.findMany({\r\n        where: {\r\n          status: 'PUBLISHED',\r\n          publishedAt: {\r\n            gte: dateLimit\r\n          }\r\n        },\r\n        select: {\r\n          id: true,\r\n          title: true,\r\n          excerpt: true,\r\n          slug: true,\r\n          featuredImage: true,\r\n          publishedAt: true,\r\n          views: true,\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          },\r\n          _count: {\r\n            select: {\r\n              comments: true\r\n            }\r\n          }\r\n        },\r\n        take: Number(limit),\r\n        orderBy: [\r\n          { views: 'desc' },\r\n          { publishedAt: 'desc' }\r\n        ]\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigos populares encontrados',\r\n        data: { articles: popularArticles }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar artigos populares', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deleta um artigo\r\n   */\r\n  static async deleteArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const existingArticle = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingArticle) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permissões (autor ou admin)\r\n      if (currentUser.role !== 'ADMIN' && existingArticle.authorId !== currentUser.id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permissão para deletar este artigo'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Deletar artigo (cascade irá deletar relacionamentos)\r\n      await prisma.article.delete({\r\n        where: { id }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Artigo deletado', {\r\n        articleId: id,\r\n        title: existingArticle.title,\r\n        authorId: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigo deletado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar artigo', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Curtir/descurtir um artigo\r\n   */\r\n  static async likeArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const article = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!article) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se já curtiu\r\n      const existingLike = await prisma.articleLike.findUnique({\r\n        where: {\r\n          userId_articleId: {\r\n            userId: currentUser.id,\r\n            articleId: id\r\n          }\r\n        }\r\n      });\r\n\r\n      let liked = false;\r\n      if (existingLike) {\r\n        // Remover curtida\r\n        await prisma.articleLike.delete({\r\n          where: {\r\n            userId_articleId: {\r\n              userId: currentUser.id,\r\n              articleId: id\r\n            }\r\n          }\r\n        });\r\n        liked = false;\r\n      } else {\r\n        // Adicionar curtida\r\n        await prisma.articleLike.create({\r\n          data: {\r\n            userId: currentUser.id,\r\n            articleId: id\r\n          }\r\n        });\r\n        liked = true;\r\n      }\r\n\r\n      // Contar total de curtidas\r\n      const likesCount = await prisma.articleLike.count({\r\n        where: { articleId: id }\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: liked ? 'Artigo curtido' : 'Curtida removida',\r\n        data: {\r\n          liked,\r\n          likesCount\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao curtir artigo', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Buscar comentários de um artigo\r\n   */\r\n  static async getArticleComments(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { page = 1, limit = 10, sortOrder = 'desc' } = req.query;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const article = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!article) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Buscar comentários aprovados\r\n      const [comments, total] = await Promise.all([\r\n        prisma.comment.findMany({\r\n          where: {\r\n            articleId: id,\r\n            isApproved: true\r\n          },\r\n          include: {\r\n            author: {\r\n              select: {\r\n                id: true,\r\n                name: true\r\n              }\r\n            }\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy: { createdAt: sortOrder as 'asc' | 'desc' }\r\n        }),\r\n        prisma.comment.count({\r\n          where: {\r\n            articleId: id,\r\n            isApproved: true\r\n          }\r\n        })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Comentários encontrados',\r\n        data: {\r\n          comments,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar comentários', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Criar comentário em um artigo\r\n   */\r\n  static async createComment(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { content } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!content || content.trim().length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Conteúdo do comentário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const article = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!article) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Criar comentário\r\n      const comment = await prisma.comment.create({\r\n        data: {\r\n          content: content.trim(),\r\n          articleId: id,\r\n          authorId: currentUser.id,\r\n          isApproved: false // Comentários precisam de aprovação\r\n        },\r\n        include: {\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Comentário criado', {\r\n        commentId: comment.id,\r\n        articleId: id,\r\n        authorId: currentUser.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Comentário criado com sucesso. Aguardando aprovação.',\r\n        data: { comment }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar comentário', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default ArticleController;"],"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","ignoreList":[]}
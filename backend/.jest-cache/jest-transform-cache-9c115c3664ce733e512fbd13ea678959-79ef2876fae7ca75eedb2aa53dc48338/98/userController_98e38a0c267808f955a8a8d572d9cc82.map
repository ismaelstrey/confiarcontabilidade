{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\userController.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\userController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport bcrypt from 'bcrypt';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de usuário\r\ninterface UserData {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n  role?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface UserFilters {\r\n  search?: string;\r\n  role?: string;\r\n  isActive?: boolean;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de usuários\r\n */\r\nexport class UserController {\r\n  /**\r\n   * Lista todos os usuários com paginação e filtros\r\n   */\r\n  static async getUsers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        search,\r\n        role,\r\n        isActive,\r\n        page = 1,\r\n        limit = 10\r\n      }: UserFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { name: { contains: search, mode: 'insensitive' } },\r\n          { email: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (role) {\r\n        where.role = role;\r\n      }\r\n\r\n      if (isActive !== undefined) {\r\n        where.isActive = typeof isActive === 'string' ? isActive === 'true' : Boolean(isActive);\r\n      }\r\n\r\n      // Buscar usuários\r\n      const [users, total] = await Promise.all([\r\n        prisma.user.findMany({\r\n          where,\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            role: true,\r\n            isActive: true,\r\n            createdAt: true,\r\n            updatedAt: true\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy: { createdAt: 'desc' }\r\n        }),\r\n        prisma.user.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usuários listados com sucesso',\r\n        data: {\r\n          users,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar usuários', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um usuário por ID\r\n   */\r\n  static async getUserById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usuário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const user = await prisma.user.findUnique({\r\n        where: { id },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usuário encontrado',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar usuário', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria um novo usuário\r\n   */\r\n  static async createUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { name, email, password, role = 'USER', isActive = true }: UserData = req.body;\r\n\r\n      // Validações básicas\r\n      if (!name || !email || !password) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nome, email e senha são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar formato do email\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(email)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Formato de email inválido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar força da senha\r\n      if (password.length < 6) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A senha deve ter pelo menos 6 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usuário já existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      if (existingUser) {\r\n        res.status(409).json({\r\n          success: false,\r\n          message: 'Usuário já existe com este email'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Hash da senha\r\n      const saltRounds = 12;\r\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n\r\n      // Criar usuário\r\n      const user = await prisma.user.create({\r\n        data: {\r\n          name,\r\n          email,\r\n          password: hashedPassword,\r\n          role: role as any,\r\n          isActive\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      const currentUser = (req as any).user;\r\n      logger.info('Usuário criado', {\r\n        newUserId: user.id,\r\n        newUserEmail: user.email,\r\n        createdBy: currentUser?.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Usuário criado com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar usuário', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza um usuário existente\r\n   */\r\n  static async updateUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { name, email, password, role, isActive }: UserData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usuário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usuário existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permissões (usuário só pode editar próprio perfil, admin pode editar qualquer um)\r\n      if (currentUser.role !== 'ADMIN' && currentUser.id !== id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permissão para editar este usuário'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Preparar dados para atualização\r\n      const updateData: any = {};\r\n\r\n      if (name) updateData.name = name;\r\n      if (email) {\r\n        // Validar formato do email\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(email)) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Formato de email inválido'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Verificar se o email já está em uso por outro usuário\r\n        const emailInUse = await prisma.user.findFirst({\r\n          where: {\r\n            email,\r\n            id: { not: id }\r\n          }\r\n        });\r\n\r\n        if (emailInUse) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email já está em uso por outro usuário'\r\n          });\r\n          return;\r\n        }\r\n\r\n        updateData.email = email;\r\n      }\r\n\r\n      if (password) {\r\n        if (password.length < 6) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'A senha deve ter pelo menos 6 caracteres'\r\n          });\r\n          return;\r\n        }\r\n        const saltRounds = 12;\r\n        updateData.password = await bcrypt.hash(password, saltRounds);\r\n      }\r\n\r\n      // Apenas admin pode alterar role e isActive\r\n      if (currentUser.role === 'ADMIN') {\r\n        if (role !== undefined) updateData.role = role;\r\n        if (isActive !== undefined) updateData.isActive = isActive;\r\n      }\r\n\r\n      updateData.updatedAt = new Date();\r\n\r\n      // Atualizar usuário\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id },\r\n        data: updateData,\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Usuário atualizado', {\r\n        userId: id,\r\n        updatedBy: currentUser.id,\r\n        changes: Object.keys(updateData)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usuário atualizado com sucesso',\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar usuário', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza o status de um usuário (ativo/inativo)\r\n   */\r\n  static async updateUserStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { isActive, reason } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usuário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (typeof isActive !== 'boolean') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Campo isActive é obrigatório e deve ser boolean'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usuário existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Não permitir que o usuário desative a si mesmo\r\n      if (currentUser.id === id && !isActive) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Não é possível desativar sua própria conta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar status do usuário\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id },\r\n        data: {\r\n          isActive,\r\n          updatedAt: new Date()\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Status do usuário atualizado', {\r\n        userId: id,\r\n        oldStatus: existingUser.isActive,\r\n        newStatus: isActive,\r\n        reason: reason || 'Não informado',\r\n        updatedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Usuário ${isActive ? 'ativado' : 'desativado'} com sucesso`,\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar status do usuário', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um usuário (soft delete)\r\n   */\r\n  static async deleteUser(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do usuário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o usuário existe\r\n      const existingUser = await prisma.user.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingUser) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Não permitir que o usuário delete a si mesmo\r\n      if (currentUser.id === id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Não é possível deletar sua própria conta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Soft delete - apenas desativar o usuário\r\n      await prisma.user.update({\r\n        where: { id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Usuário desativado', {\r\n        userId: id,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Usuário desativado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar usuário', { error, userId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém o perfil do usuário logado\r\n   */\r\n  static async getProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil obtido com sucesso',\r\n        data: { user }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter perfil', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza o perfil do usuário logado\r\n   */\r\n  static async updateProfile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { name, email, password }: UserData = req.body;\r\n\r\n      // Preparar dados para atualização\r\n      const updateData: any = {};\r\n\r\n      if (name) updateData.name = name;\r\n      \r\n      if (email) {\r\n        // Validar formato do email\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(email)) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Formato de email inválido'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Verificar se o email já está em uso\r\n        const emailInUse = await prisma.user.findFirst({\r\n          where: {\r\n            email,\r\n            id: { not: currentUser.id }\r\n          }\r\n        });\r\n\r\n        if (emailInUse) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email já está em uso'\r\n          });\r\n          return;\r\n        }\r\n\r\n        updateData.email = email;\r\n      }\r\n\r\n      if (password) {\r\n        if (password.length < 6) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'A senha deve ter pelo menos 6 caracteres'\r\n          });\r\n          return;\r\n        }\r\n        const saltRounds = 12;\r\n        updateData.password = await bcrypt.hash(password, saltRounds);\r\n      }\r\n\r\n      updateData.updatedAt = new Date();\r\n\r\n      // Atualizar perfil\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: updateData,\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Perfil atualizado', {\r\n        userId: currentUser.id,\r\n        changes: Object.keys(updateData)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Perfil atualizado com sucesso',\r\n        data: { user: updatedUser }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar perfil', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exclui a conta do usuário logado\r\n   */\r\n  static async deleteAccount(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { password, confirmation } = req.body;\r\n\r\n      if (!password || !confirmation) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha e confirmação são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (confirmation !== 'DELETE_MY_ACCOUNT') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Confirmação inválida. Digite \"DELETE_MY_ACCOUNT\" para confirmar'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar senha atual\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const isPasswordValid = await bcrypt.compare(password, user.password);\r\n      if (!isPasswordValid) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha incorreta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Soft delete - desativar a conta\r\n      await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Conta excluída pelo próprio usuário', {\r\n        userId: currentUser.id,\r\n        email: user.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Conta excluída com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao excluir conta', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Altera a senha do usuário logado\r\n   */\r\n  static async changePassword(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const { currentPassword, newPassword, confirmPassword } = req.body;\r\n\r\n      // Validar dados obrigatórios\r\n      if (!currentPassword || !newPassword || !confirmPassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha atual, nova senha e confirmação são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar se as novas senhas coincidem\r\n      if (newPassword !== confirmPassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nova senha e confirmação não coincidem'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tamanho da nova senha\r\n      if (newPassword.length < 6) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A nova senha deve ter pelo menos 6 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar usuário atual\r\n      const user = await prisma.user.findUnique({\r\n        where: { id: currentUser.id }\r\n      });\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Usuário não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar senha atual\r\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n      if (!isCurrentPasswordValid) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Senha atual incorreta'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se a nova senha é diferente da atual\r\n      const isSamePassword = await bcrypt.compare(newPassword, user.password);\r\n      if (isSamePassword) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A nova senha deve ser diferente da senha atual'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Hash da nova senha\r\n      const saltRounds = 12;\r\n      const hashedNewPassword = await bcrypt.hash(newPassword, saltRounds);\r\n\r\n      // Atualizar senha\r\n      await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          password: hashedNewPassword,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Senha alterada', {\r\n        userId: currentUser.id,\r\n        userEmail: user.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Senha alterada com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao alterar senha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload de avatar do usuário\r\n   */\r\n  static async uploadAvatar(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const file = req.file;\r\n\r\n      if (!file) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo foi enviado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tipo de arquivo\r\n      const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n      if (!allowedTypes.includes(file.mimetype)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Tipo de arquivo não permitido. Use JPG, PNG, GIF ou WebP'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tamanho do arquivo (5MB)\r\n      const maxSize = 5 * 1024 * 1024; // 5MB\r\n      if (file.size > maxSize) {\r\n        res.status(413).json({\r\n          success: false,\r\n          message: 'Arquivo muito grande. Tamanho máximo: 5MB'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar URL do avatar (simulado - em produção seria o caminho real do arquivo)\r\n      const avatarUrl = `/uploads/avatars/${currentUser.id}_${Date.now()}_${file.originalname}`;\r\n\r\n      // Atualizar usuário com nova URL do avatar\r\n      const updatedUser = await prisma.user.update({\r\n        where: { id: currentUser.id },\r\n        data: {\r\n          // Nota: O campo avatar não existe no modelo atual, então vamos simular\r\n          updatedAt: new Date()\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          role: true,\r\n          isActive: true,\r\n          createdAt: true,\r\n          updatedAt: true\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Avatar atualizado', {\r\n        userId: currentUser.id,\r\n        fileName: file.originalname,\r\n        fileSize: file.size\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Avatar atualizado com sucesso',\r\n        data: {\r\n          avatarUrl,\r\n          user: updatedUser\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer upload do avatar', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserController;"],"version":3}
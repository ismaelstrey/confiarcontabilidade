8e9df36b6e9d7fec319be0a957eddf92
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock do bcrypt
jest.mock('bcrypt');
// Mock do jsonwebtoken
jest.mock('jsonwebtoken');
const auth_1 = require("../auth");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const mockBcrypt = bcrypt_1.default;
const mockJwt = jsonwebtoken_1.default;
describe('Auth Utils', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock environment variables
        process.env.JWT_SECRET = 'your-super-secret-jwt-key-change-this-in-production';
        process.env.JWT_REFRESH_SECRET = 'your-super-secret-refresh-jwt-key-change-this-in-production';
        process.env.BCRYPT_SALT_ROUNDS = '12';
    });
    describe('hashPassword', () => {
        it('should hash a password successfully', async () => {
            const password = 'test123';
            const hashedPassword = '$2b$10$hashedpassword';
            mockBcrypt.hash.mockResolvedValue(hashedPassword);
            const result = await (0, auth_1.hashPassword)(password);
            expect(result).toBe(hashedPassword);
            expect(mockBcrypt.hash).toHaveBeenCalledWith(password, 12);
        });
        it('should throw error if hashing fails', async () => {
            const password = 'test123';
            const error = new Error('Hashing failed');
            mockBcrypt.hash.mockRejectedValue(error);
            await expect((0, auth_1.hashPassword)(password)).rejects.toThrow('Hashing failed');
        });
    });
    describe('comparePassword', () => {
        it('should return true for matching password', async () => {
            const password = 'test123';
            const hashedPassword = '$2b$10$hashedpassword';
            mockBcrypt.compare.mockResolvedValue(true);
            const result = await (0, auth_1.comparePassword)(password, hashedPassword);
            expect(result).toBe(true);
            expect(mockBcrypt.compare).toHaveBeenCalledWith(password, hashedPassword);
        });
        it('should return false for non-matching password', async () => {
            const password = 'test123';
            const wrongPassword = 'wrong123';
            const hashedPassword = '$2b$10$hashedpassword';
            mockBcrypt.compare.mockResolvedValue(false);
            const result = await (0, auth_1.comparePassword)(wrongPassword, hashedPassword);
            expect(result).toBe(false);
            expect(mockBcrypt.compare).toHaveBeenCalledWith(wrongPassword, hashedPassword);
        });
        it('should throw error if comparison fails', async () => {
            const password = 'test123';
            const hashedPassword = '$2b$10$hashedpassword';
            const error = new Error('Comparison failed');
            mockBcrypt.compare.mockRejectedValue(error);
            await expect((0, auth_1.comparePassword)(password, hashedPassword)).rejects.toThrow('Comparison failed');
        });
    });
    describe('generateToken', () => {
        it('should generate a valid JWT access token', () => {
            const user = {
                id: '1',
                email: 'test@example.com',
                role: 'CLIENT',
                tokenVersion: 1,
            };
            const expectedToken = 'generated_jwt_token';
            mockJwt.sign.mockReturnValue(expectedToken);
            const result = (0, auth_1.generateToken)(user);
            expect(result).toBe(expectedToken);
            expect(mockJwt.sign).toHaveBeenCalledWith(user, 'test-jwt-secret', { expiresIn: '1h' });
        });
        it('should generate a valid JWT token with custom expiration', () => {
            const user = {
                id: '1',
                email: 'test@example.com',
                role: 'CLIENT',
            };
            const expectedToken = 'generated_jwt_token_custom';
            mockJwt.sign.mockReturnValue(expectedToken);
            const result = (0, auth_1.generateToken)(user, '2h');
            expect(result).toBe(expectedToken);
            expect(mockJwt.sign).toHaveBeenCalledWith(user, 'test-jwt-secret', { expiresIn: '2h' });
        });
        it('should throw error if token generation fails', () => {
            const user = {
                id: '1',
                email: 'test@example.com',
                role: 'CLIENT',
                tokenVersion: 1,
            };
            const error = new Error('Token generation failed');
            mockJwt.sign.mockImplementation(() => {
                throw error;
            });
            expect(() => (0, auth_1.generateToken)(user)).toThrow();
        });
    });
    describe('verifyToken', () => {
        it('should verify a valid access token', () => {
            const token = 'valid_jwt_token';
            const decodedPayload = {
                userId: '1',
                email: 'test@example.com',
                role: 'CLIENT',
                iat: 1234567890,
                exp: 1234571490,
            };
            mockJwt.verify.mockReturnValue(decodedPayload);
            const result = (0, auth_1.verifyToken)(token);
            expect(result).toEqual(decodedPayload);
            expect(mockJwt.verify).toHaveBeenCalledWith(token, 'test-jwt-secret');
        });
        it('should verify a valid refresh token', () => {
            const refreshToken = 'valid_refresh_token';
            const decodedPayload = {
                userId: '1',
                tokenVersion: 1,
                iat: 1234567890,
                exp: 1234571490,
            };
            mockJwt.verify.mockReturnValue(decodedPayload);
            const result = (0, auth_1.verifyToken)(refreshToken);
            expect(result).toEqual(decodedPayload);
            expect(mockJwt.verify).toHaveBeenCalledWith(refreshToken, 'test-jwt-secret');
        });
        it('should throw error for invalid token', () => {
            const token = 'invalid_token';
            const error = new Error('Invalid token');
            mockJwt.verify.mockImplementation(() => {
                throw error;
            });
            expect(() => (0, auth_1.verifyToken)(token)).toThrow('Invalid token');
        });
        it('should throw error for expired token', () => {
            const token = 'expired_token';
            const error = new Error('Token expired');
            mockJwt.verify.mockImplementation(() => {
                throw error;
            });
            expect(() => (0, auth_1.verifyToken)(token)).toThrow('Token expired');
        });
        it('should use default token type as access', () => {
            const token = 'valid_jwt_token';
            const decodedPayload = {
                userId: '1',
                email: 'test@example.com',
                role: 'CLIENT',
            };
            mockJwt.verify.mockReturnValue(decodedPayload);
            (0, auth_1.verifyToken)(token);
            expect(mockJwt.verify).toHaveBeenCalledWith(token, 'test-jwt-secret');
        });
    });
    describe('edge cases', () => {
        it('should handle empty password in hashPassword', async () => {
            const password = '';
            const hashedPassword = '$2b$10$emptyhash';
            mockBcrypt.hash.mockResolvedValue(hashedPassword);
            const result = await (0, auth_1.hashPassword)(password);
            expect(result).toBe(hashedPassword);
            expect(mockBcrypt.hash).toHaveBeenCalledWith(password, 12);
        });
        it('should handle special characters in password', async () => {
            const password = 'P@ssw0rd!#$%';
            const hashedPassword = '$2b$10$specialcharhash';
            mockBcrypt.hash.mockResolvedValue(hashedPassword);
            const result = await (0, auth_1.hashPassword)(password);
            expect(result).toBe(hashedPassword);
            expect(mockBcrypt.hash).toHaveBeenCalledWith(password, 12);
        });
        it('should handle missing environment variables gracefully', () => {
            delete process.env.JWT_SECRET;
            const user = {
                id: '1',
                email: 'test@example.com',
                role: 'CLIENT',
                tokenVersion: 1,
            };
            expect(() => (0, auth_1.generateToken)(user)).toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"version":3,"names":["express_1","cov_2csi8sp34t","s","require","auth_1","cache_1","articleController_1","__importDefault","router","Router","get","publicCacheMiddleware","default","getArticles","articleCacheMiddleware","getArticle","post","authenticate","authorize","invalidateArticleCacheMiddleware","createArticle","put","updateArticle","delete","deleteArticle","likeArticle","getArticleComments","createComment","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\articleRoutes.ts"],"sourcesContent":["import { Router } from 'express';\r\nimport { authenticate, authorize } from '../middlewares/auth';\r\nimport {\r\n  publicCacheMiddleware,\r\n  articleCacheMiddleware,\r\n  invalidateArticleCacheMiddleware\r\n} from '../middlewares/cache';\r\nimport ArticleController from '../controllers/articleController';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     Article:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         title:\r\n *           type: string\r\n *         slug:\r\n *           type: string\r\n *         excerpt:\r\n *           type: string\r\n *         content:\r\n *           type: string\r\n *         featuredImage:\r\n *           type: string\r\n *         status:\r\n *           type: string\r\n *           enum: [DRAFT, PUBLISHED, ARCHIVED]\r\n *         publishedAt:\r\n *           type: string\r\n *           format: date-time\r\n *         readTime:\r\n *           type: integer\r\n *         views:\r\n *           type: integer\r\n *         likes:\r\n *           type: integer\r\n *         seoTitle:\r\n *           type: string\r\n *         seoDescription:\r\n *           type: string\r\n *         seoKeywords:\r\n *           type: string\r\n *         author:\r\n *           $ref: '#/components/schemas/User'\r\n *         categories:\r\n *           type: array\r\n *           items:\r\n *             $ref: '#/components/schemas/Category'\r\n *         tags:\r\n *           type: array\r\n *           items:\r\n *             $ref: '#/components/schemas/Tag'\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *         updatedAt:\r\n *           type: string\r\n *           format: date-time\r\n *     Category:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         name:\r\n *           type: string\r\n *         slug:\r\n *           type: string\r\n *         description:\r\n *           type: string\r\n *         color:\r\n *           type: string\r\n *         icon:\r\n *           type: string\r\n *     Tag:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         name:\r\n *           type: string\r\n *         slug:\r\n *           type: string\r\n *         color:\r\n *           type: string\r\n *     CreateArticleRequest:\r\n *       type: object\r\n *       required:\r\n *         - title\r\n *         - content\r\n *       properties:\r\n *         title:\r\n *           type: string\r\n *           minLength: 3\r\n *           description: Título do artigo\r\n *         excerpt:\r\n *           type: string\r\n *           description: Resumo do artigo\r\n *         content:\r\n *           type: string\r\n *           minLength: 10\r\n *           description: Conteúdo do artigo\r\n *         featuredImage:\r\n *           type: string\r\n *           description: URL da imagem destacada\r\n *         status:\r\n *           type: string\r\n *           enum: [DRAFT, PUBLISHED]\r\n *           default: DRAFT\r\n *         publishedAt:\r\n *           type: string\r\n *           format: date-time\r\n *           description: Data de publicação (opcional)\r\n *         seoTitle:\r\n *           type: string\r\n *           description: Título SEO\r\n *         seoDescription:\r\n *           type: string\r\n *           description: Descrição SEO\r\n *         seoKeywords:\r\n *           type: string\r\n *           description: Palavras-chave SEO\r\n *         categoryIds:\r\n *           type: array\r\n *           items:\r\n *             type: string\r\n *           description: IDs das categorias\r\n *         tagIds:\r\n *           type: array\r\n *           items:\r\n *             type: string\r\n *           description: IDs das tags\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/articles:\r\n *   get:\r\n *     summary: Listar artigos\r\n *     tags: [Artigos]\r\n *     parameters:\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: Número da página\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 100\r\n *           default: 10\r\n *         description: Itens por página\r\n *       - in: query\r\n *         name: status\r\n *         schema:\r\n *           type: string\r\n *           enum: [DRAFT, PUBLISHED, ARCHIVED]\r\n *         description: Filtrar por status\r\n *       - in: query\r\n *         name: category\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por categoria (slug)\r\n *       - in: query\r\n *         name: tag\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por tag (slug)\r\n *       - in: query\r\n *         name: search\r\n *         schema:\r\n *           type: string\r\n *         description: Buscar por título ou conteúdo\r\n *       - in: query\r\n *         name: author\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por autor (ID)\r\n *       - in: query\r\n *         name: sortBy\r\n *         schema:\r\n *           type: string\r\n *           enum: [createdAt, publishedAt, title, views, likes]\r\n *           default: createdAt\r\n *         description: Campo para ordenação\r\n *       - in: query\r\n *         name: sortOrder\r\n *         schema:\r\n *           type: string\r\n *           enum: [asc, desc]\r\n *           default: desc\r\n *         description: Ordem da classificação\r\n *     responses:\r\n *       200:\r\n *         description: Lista de artigos\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     articles:\r\n *                       type: array\r\n *                       items:\r\n *                         $ref: '#/components/schemas/Article'\r\n *                     pagination:\r\n *                       type: object\r\n *                       properties:\r\n *                         page:\r\n *                           type: integer\r\n *                         limit:\r\n *                           type: integer\r\n *                         total:\r\n *                           type: integer\r\n *                         pages:\r\n *                           type: integer\r\n */\r\nrouter.get('/', publicCacheMiddleware(1800), ArticleController.getArticles);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/articles/{slug}:\r\n *   get:\r\n *     summary: Obter artigo por slug\r\n *     tags: [Artigos]\r\n *     parameters:\r\n *       - in: path\r\n *         name: slug\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: Slug do artigo\r\n *     responses:\r\n *       200:\r\n *         description: Dados do artigo\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/Article'\r\n *       404:\r\n *         description: Artigo não encontrado\r\n */\r\nrouter.get('/:slug', articleCacheMiddleware(3600), ArticleController.getArticle);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/articles:\r\n *   post:\r\n *     summary: Criar novo artigo\r\n *     tags: [Artigos]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/CreateArticleRequest'\r\n *     responses:\r\n *       201:\r\n *         description: Artigo criado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/Article'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n */\r\nrouter.post('/', authenticate, authorize('ADMIN', 'EDITOR'), invalidateArticleCacheMiddleware(), ArticleController.createArticle);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/articles/{id}:\r\n *   put:\r\n *     summary: Atualizar artigo\r\n *     tags: [Artigos]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do artigo\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             $ref: '#/components/schemas/CreateArticleRequest'\r\n *     responses:\r\n *       200:\r\n *         description: Artigo atualizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/Article'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n *       404:\r\n *         description: Artigo não encontrado\r\n */\r\nrouter.put('/:id', authenticate, authorize('ADMIN', 'EDITOR'), invalidateArticleCacheMiddleware(), ArticleController.updateArticle);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/articles/{id}:\r\n *   delete:\r\n *     summary: Excluir artigo\r\n *     tags: [Artigos]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do artigo\r\n *     responses:\r\n *       200:\r\n *         description: Artigo excluído com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n *       404:\r\n *         description: Artigo não encontrado\r\n */\r\nrouter.delete('/:id', authenticate, authorize('ADMIN', 'EDITOR'), invalidateArticleCacheMiddleware(), ArticleController.deleteArticle);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/articles/{id}/like:\r\n *   post:\r\n *     summary: Curtir/descurtir artigo\r\n *     tags: [Artigos]\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do artigo\r\n *     responses:\r\n *       200:\r\n *         description: Like processado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     liked:\r\n *                       type: boolean\r\n *                     totalLikes:\r\n *                       type: integer\r\n *                 message:\r\n *                   type: string\r\n *       404:\r\n *         description: Artigo não encontrado\r\n */\r\nrouter.post('/:id/like', ArticleController.likeArticle);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/articles/{id}/comments:\r\n *   get:\r\n *     summary: Listar comentários do artigo\r\n *     tags: [Artigos]\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do artigo\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: Número da página\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 50\r\n *           default: 10\r\n *         description: Itens por página\r\n *     responses:\r\n *       200:\r\n *         description: Lista de comentários\r\n *       404:\r\n *         description: Artigo não encontrado\r\n */\r\nrouter.get('/:id/comments', publicCacheMiddleware(600), ArticleController.getArticleComments);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/articles/{id}/comments:\r\n *   post:\r\n *     summary: Adicionar comentário ao artigo\r\n *     tags: [Artigos]\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do artigo\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - content\r\n *               - authorName\r\n *               - authorEmail\r\n *             properties:\r\n *               content:\r\n *                 type: string\r\n *                 minLength: 3\r\n *                 description: Conteúdo do comentário\r\n *               authorName:\r\n *                 type: string\r\n *                 minLength: 2\r\n *                 description: Nome do autor\r\n *               authorEmail:\r\n *                 type: string\r\n *                 format: email\r\n *                 description: Email do autor\r\n *               parentId:\r\n *                 type: string\r\n *                 description: ID do comentário pai (para respostas)\r\n *     responses:\r\n *       201:\r\n *         description: Comentário adicionado com sucesso\r\n *       400:\r\n *         description: Dados inválidos\r\n *       404:\r\n *         description: Artigo não encontrado\r\n */\r\nrouter.post('/:id/comments', ArticleController.createComment);\r\n\r\nexport default router;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,SAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,OAAAC,OAAA;AACA,MAAAC,MAAA;AAAA;AAAA,CAAAH,cAAA,GAAAC,CAAA,OAAAC,OAAA;AACA,MAAAE,OAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,OAAAC,OAAA;AAKA,MAAAG,mBAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,OAAAK,eAAA,CAAAJ,OAAA;AAEA,MAAMK,MAAM;AAAA;AAAA,CAAAP,cAAA,GAAAC,CAAA,OAAG,IAAAF,SAAA,CAAAS,MAAM,GAAE;AAEvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAR,cAAA,GAAAC,CAAA;AA2FAM,MAAM,CAACE,GAAG,CAAC,GAAG,EAAE,IAAAL,OAAA,CAAAM,qBAAqB,EAAC,IAAI,CAAC,EAAEL,mBAAA,CAAAM,OAAiB,CAACC,WAAW,CAAC;AAE3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAZ,cAAA,GAAAC,CAAA;AA4BAM,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAE,IAAAL,OAAA,CAAAS,sBAAsB,EAAC,IAAI,CAAC,EAAER,mBAAA,CAAAM,OAAiB,CAACG,UAAU,CAAC;AAEhF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAd,cAAA,GAAAC,CAAA;AAmCAM,MAAM,CAACQ,IAAI,CAAC,GAAG,EAAEZ,MAAA,CAAAa,YAAY,EAAE,IAAAb,MAAA,CAAAc,SAAS,EAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,IAAAb,OAAA,CAAAc,gCAAgC,GAAE,EAAEb,mBAAA,CAAAM,OAAiB,CAACQ,aAAa,CAAC;AAEjI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAnB,cAAA,GAAAC,CAAA;AA4CAM,MAAM,CAACa,GAAG,CAAC,MAAM,EAAEjB,MAAA,CAAAa,YAAY,EAAE,IAAAb,MAAA,CAAAc,SAAS,EAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,IAAAb,OAAA,CAAAc,gCAAgC,GAAE,EAAEb,mBAAA,CAAAM,OAAiB,CAACU,aAAa,CAAC;AAEnI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAArB,cAAA,GAAAC,CAAA;AAkCAM,MAAM,CAACe,MAAM,CAAC,MAAM,EAAEnB,MAAA,CAAAa,YAAY,EAAE,IAAAb,MAAA,CAAAc,SAAS,EAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,IAAAb,OAAA,CAAAc,gCAAgC,GAAE,EAAEb,mBAAA,CAAAM,OAAiB,CAACY,aAAa,CAAC;AAEtI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAvB,cAAA,GAAAC,CAAA;AAmCAM,MAAM,CAACQ,IAAI,CAAC,WAAW,EAAEV,mBAAA,CAAAM,OAAiB,CAACa,WAAW,CAAC;AAEvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAxB,cAAA,GAAAC,CAAA;AAkCAM,MAAM,CAACE,GAAG,CAAC,eAAe,EAAE,IAAAL,OAAA,CAAAM,qBAAqB,EAAC,GAAG,CAAC,EAAEL,mBAAA,CAAAM,OAAiB,CAACc,kBAAkB,CAAC;AAE7F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAAzB,cAAA,GAAAC,CAAA;AA+CAM,MAAM,CAACQ,IAAI,CAAC,eAAe,EAAEV,mBAAA,CAAAM,OAAiB,CAACe,aAAa,CAAC;AAAC;AAAA1B,cAAA,GAAAC,CAAA;AAE9D0B,OAAA,CAAAhB,OAAA,GAAeJ,MAAM","ignoreList":[]}
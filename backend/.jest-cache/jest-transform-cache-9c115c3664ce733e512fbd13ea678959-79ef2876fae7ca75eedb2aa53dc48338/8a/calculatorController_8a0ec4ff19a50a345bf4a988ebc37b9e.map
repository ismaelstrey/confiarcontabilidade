{"version":3,"names":["cov_2i6ia6afi0","actualCoverage","client_1","s","require","logger_1","__importDefault","prisma","PrismaClient","CalculatorController","calculateTaxes","req","res","f","income","deductions","taxYear","dependents","b","medicalExpenses","educationExpenses","pensionContributions","body","status","json","success","message","totalDeductions","dependentDeduction","taxableIncome","Math","max","incomeTax","socialSecurity","inssLimit","inssBase","min","stateTax","municipalTax","federalTax","totalTax","netIncome","effectiveRate","marginalRate","calculateMarginalRate","result","grossIncome","round","breakdown","calculationHistory","create","data","JSON","stringify","ipAddress","ip","userAgent","get","error","default","warn","getCalculationHistory","page","parseInt","query","limit","skip","calculations","total","Promise","all","findMany","take","orderBy","createdAt","select","id","count","formattedCalculations","map","calc","parse","pagination","pages","ceil","getCalculationStatistics","thirtyDaysAgo","Date","setDate","getDate","totalCalculations","recentCalculations","avgIncome","where","gte","aggregate","_avg","yearlyStats","groupBy","by","_count","averageIncome","yearlyStatistics","stat","year","calculateCompanyTax","revenue","expenses","regime","employees","profit","taxes","simplesNacional","irpj","csll","pis","cofins","irpjReal","csllReal","pisReal","cofinsReal","estimado","netProfit","calculatePayroll","salary","benefits","employeeCount","totalSalary","totalBenefits","inss","fgts","rat","salarioEducacao","incra","sebrae","sesi","senai","totalEncargos","totalCost","grossSalary","encargos","costPerEmployee","calculateSimplesNacional","activity","last12Months","annualRevenue","aliquota","anexo","tax","netRevenue","calculateDepreciation","assetValue","assetType","usefulLife","method","years","annualDepreciation","monthlyDepreciation","schedule","remainingValue","yearDepreciation","push","depreciation","accumulatedDepreciation","totalDepreciation","calculateLoan","principal","interestRate","months","type","monthlyRate","monthlyPayment","totalInterest","amortization","balance","month","interest","payment","pow","principalPayment","totalAmount","exports","calculatorController"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\calculatorController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport logger from '../utils/logger';\n\nconst prisma = new PrismaClient();\n\n// Interface para dados de cálculo fiscal\ninterface TaxCalculationRequest {\n  income: number;\n  deductions: number;\n  taxYear: number;\n  dependents?: number;\n  medicalExpenses?: number;\n  educationExpenses?: number;\n  pensionContributions?: number;\n}\n\ninterface TaxCalculationResult {\n  grossIncome: number;\n  taxableIncome: number;\n  incomeTax: number;\n  socialSecurity: number;\n  totalTax: number;\n  netIncome: number;\n  effectiveRate: number;\n  marginalRate: number;\n  breakdown: {\n    federalTax: number;\n    stateTax: number;\n    municipalTax: number;\n  };\n}\n\n/**\n * Controller responsável pelos cálculos fiscais\n */\nexport class CalculatorController {\n  /**\n   * Calcula impostos com base nos dados fornecidos\n   */\n  async calculateTaxes(req: Request, res: Response): Promise<void> {\n    try {\n      const {\n        income,\n        deductions,\n        taxYear,\n        dependents = 0,\n        medicalExpenses = 0,\n        educationExpenses = 0,\n        pensionContributions = 0\n      }: TaxCalculationRequest = req.body;\n\n      // Validações básicas\n      if (income < 0 || deductions < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Renda e deduções devem ser valores positivos'\n        });\n        return;\n      }\n\n      if (taxYear < 2020 || taxYear > 2030) {\n        res.status(400).json({\n          success: false,\n          message: 'Ano fiscal deve estar entre 2020 e 2030'\n        });\n        return;\n      }\n\n      // Cálculo da renda tributável\n      const totalDeductions = deductions + medicalExpenses + educationExpenses + pensionContributions;\n      const dependentDeduction = dependents * 2275.08; // Valor para 2024\n      const taxableIncome = Math.max(0, income - totalDeductions - dependentDeduction);\n\n      // Cálculo do Imposto de Renda (tabela progressiva 2024)\n      let incomeTax = 0;\n      if (taxableIncome > 22847.76) {\n        if (taxableIncome <= 33919.80) {\n          incomeTax = (taxableIncome - 22847.76) * 0.075;\n        } else if (taxableIncome <= 45012.60) {\n          incomeTax = (33919.80 - 22847.76) * 0.075 + (taxableIncome - 33919.80) * 0.15;\n        } else if (taxableIncome <= 55976.16) {\n          incomeTax = (33919.80 - 22847.76) * 0.075 + (45012.60 - 33919.80) * 0.15 + (taxableIncome - 45012.60) * 0.225;\n        } else {\n          incomeTax = (33919.80 - 22847.76) * 0.075 + (45012.60 - 33919.80) * 0.15 + (55976.16 - 45012.60) * 0.225 + (taxableIncome - 55976.16) * 0.275;\n        }\n      }\n\n      // Cálculo da Previdência Social (INSS)\n      let socialSecurity = 0;\n      const inssLimit = 7507.49; // Teto INSS 2024\n      const inssBase = Math.min(income, inssLimit);\n      \n      if (inssBase <= 1412.00) {\n        socialSecurity = inssBase * 0.075;\n      } else if (inssBase <= 2666.68) {\n        socialSecurity = 1412.00 * 0.075 + (inssBase - 1412.00) * 0.09;\n      } else if (inssBase <= 4000.03) {\n        socialSecurity = 1412.00 * 0.075 + (2666.68 - 1412.00) * 0.09 + (inssBase - 2666.68) * 0.12;\n      } else {\n        socialSecurity = 1412.00 * 0.075 + (2666.68 - 1412.00) * 0.09 + (4000.03 - 2666.68) * 0.12 + (inssBase - 4000.03) * 0.14;\n      }\n\n      // Estimativa de impostos estaduais e municipais (valores aproximados)\n      const stateTax = taxableIncome * 0.02; // ICMS estimado\n      const municipalTax = taxableIncome * 0.005; // ISS estimado\n      const federalTax = incomeTax;\n\n      const totalTax = incomeTax + socialSecurity + stateTax + municipalTax;\n      const netIncome = income - totalTax;\n      const effectiveRate = income > 0 ? (totalTax / income) * 100 : 0;\n      const marginalRate = this.calculateMarginalRate(taxableIncome);\n\n      const result: TaxCalculationResult = {\n        grossIncome: income,\n        taxableIncome,\n        incomeTax,\n        socialSecurity,\n        totalTax,\n        netIncome,\n        effectiveRate: Math.round(effectiveRate * 100) / 100,\n        marginalRate,\n        breakdown: {\n          federalTax,\n          stateTax,\n          municipalTax\n        }\n      };\n\n      // Salvar histórico do cálculo\n      try {\n        await prisma.calculationHistory.create({\n          data: {\n            income,\n            deductions: totalDeductions,\n            taxYear,\n            dependents,\n            result: JSON.stringify(result),\n            ipAddress: req.ip || 'unknown',\n            userAgent: req.get('User-Agent') || 'unknown'\n          }\n        });\n      } catch (error) {\n        logger.warn('Erro ao salvar histórico de cálculo:', error);\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo realizado com sucesso',\n        data: result\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de impostos:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula a alíquota marginal\n   */\n  private calculateMarginalRate(taxableIncome: number): number {\n    if (taxableIncome <= 22847.76) return 0;\n    if (taxableIncome <= 33919.80) return 7.5;\n    if (taxableIncome <= 45012.60) return 15;\n    if (taxableIncome <= 55976.16) return 22.5;\n    return 27.5;\n  }\n\n  /**\n   * Obtém histórico de cálculos (Admin)\n   */\n  async getCalculationHistory(req: Request, res: Response): Promise<void> {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      const skip = (page - 1) * limit;\n\n      const [calculations, total] = await Promise.all([\n        prisma.calculationHistory.findMany({\n          skip,\n          take: limit,\n          orderBy: { createdAt: 'desc' },\n          select: {\n            id: true,\n            income: true,\n            deductions: true,\n            taxYear: true,\n            dependents: true,\n            result: true,\n            createdAt: true,\n            ipAddress: true\n          }\n        }),\n        prisma.calculationHistory.count()\n      ]);\n\n      const formattedCalculations = calculations.map(calc => ({\n        ...calc,\n        result: JSON.parse(calc.result as string)\n      }));\n\n      res.status(200).json({\n        success: true,\n        message: 'Histórico obtido com sucesso',\n        data: {\n          calculations: formattedCalculations,\n          pagination: {\n            page,\n            limit,\n            total,\n            pages: Math.ceil(total / limit)\n          }\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro ao obter histórico de cálculos:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Obtém estatísticas de cálculos (Admin)\n   */\n  async getCalculationStatistics(req: Request, res: Response): Promise<void> {\n    try {\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const [totalCalculations, recentCalculations, avgIncome] = await Promise.all([\n        prisma.calculationHistory.count(),\n        prisma.calculationHistory.count({\n          where: {\n            createdAt: {\n              gte: thirtyDaysAgo\n            }\n          }\n        }),\n        prisma.calculationHistory.aggregate({\n          _avg: {\n            income: true\n          }\n        })\n      ]);\n\n      // Estatísticas por ano fiscal\n      const yearlyStats = await prisma.calculationHistory.groupBy({\n        by: ['taxYear'],\n        _count: {\n          id: true\n        },\n        _avg: {\n          income: true\n        },\n        orderBy: {\n          taxYear: 'desc'\n        }\n      });\n\n      res.status(200).json({\n        success: true,\n        message: 'Estatísticas obtidas com sucesso',\n        data: {\n          totalCalculations,\n          recentCalculations,\n          averageIncome: avgIncome._avg.income || 0,\n          yearlyStatistics: yearlyStats.map(stat => ({\n            year: stat.taxYear,\n            calculations: stat._count.id,\n            averageIncome: stat._avg.income || 0\n          }))\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro ao obter estatísticas:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula impostos para pessoa jurídica\n   */\n  async calculateCompanyTax(req: Request, res: Response): Promise<void> {\n    try {\n      const { revenue, expenses, regime, employees } = req.body;\n\n      if (!revenue || revenue < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Receita deve ser um valor positivo'\n        });\n        return;\n      }\n\n      const profit = revenue - (expenses || 0);\n      let taxes = 0;\n      let breakdown = {};\n\n      switch (regime) {\n        case 'simples':\n          taxes = revenue * 0.06; // Aproximação Simples Nacional\n          breakdown = { simplesNacional: taxes };\n          break;\n        case 'lucro_presumido':\n          const irpj = profit * 0.15;\n          const csll = profit * 0.09;\n          const pis = revenue * 0.0065;\n          const cofins = revenue * 0.03;\n          taxes = irpj + csll + pis + cofins;\n          breakdown = { irpj, csll, pis, cofins };\n          break;\n        case 'lucro_real':\n          const irpjReal = profit * 0.25;\n          const csllReal = profit * 0.09;\n          const pisReal = revenue * 0.0165;\n          const cofinsReal = revenue * 0.076;\n          taxes = irpjReal + csllReal + pisReal + cofinsReal;\n          breakdown = { irpj: irpjReal, csll: csllReal, pis: pisReal, cofins: cofinsReal };\n          break;\n        default:\n          taxes = profit * 0.15;\n          breakdown = { estimado: taxes };\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo de impostos PJ realizado com sucesso',\n        data: {\n          revenue,\n          expenses: expenses || 0,\n          profit,\n          taxes,\n          netProfit: profit - taxes,\n          effectiveRate: revenue > 0 ? (taxes / revenue) * 100 : 0,\n          breakdown\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de impostos PJ:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula folha de pagamento\n   */\n  async calculatePayroll(req: Request, res: Response): Promise<void> {\n    try {\n      const { salary, benefits, employees } = req.body;\n\n      if (!salary || salary < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Salário deve ser um valor positivo'\n        });\n        return;\n      }\n\n      const employeeCount = employees || 1;\n      const totalSalary = salary * employeeCount;\n      const totalBenefits = (benefits || 0) * employeeCount;\n      \n      // Cálculos de encargos\n      const inss = totalSalary * 0.20; // INSS patronal\n      const fgts = totalSalary * 0.08;\n      const rat = totalSalary * 0.02; // Risco de Acidente de Trabalho\n      const salarioEducacao = totalSalary * 0.025;\n      const incra = totalSalary * 0.002;\n      const sebrae = totalSalary * 0.006;\n      const sesi = totalSalary * 0.015;\n      const senai = totalSalary * 0.01;\n      \n      const totalEncargos = inss + fgts + rat + salarioEducacao + incra + sebrae + sesi + senai;\n      const totalCost = totalSalary + totalBenefits + totalEncargos;\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo de folha de pagamento realizado com sucesso',\n        data: {\n          employees: employeeCount,\n          grossSalary: totalSalary,\n          benefits: totalBenefits,\n          encargos: {\n            inss,\n            fgts,\n            rat,\n            salarioEducacao,\n            incra,\n            sebrae,\n            sesi,\n            senai,\n            total: totalEncargos\n          },\n          totalCost,\n          costPerEmployee: totalCost / employeeCount\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de folha de pagamento:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula Simples Nacional\n   */\n  async calculateSimplesNacional(req: Request, res: Response): Promise<void> {\n    try {\n      const { revenue, activity, last12Months } = req.body;\n\n      if (!revenue || revenue < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Receita deve ser um valor positivo'\n        });\n        return;\n      }\n\n      const annualRevenue = last12Months || revenue * 12;\n      let aliquota = 0;\n      let anexo = 'I';\n\n      // Determinar anexo e alíquota baseado na atividade e faturamento\n      if (activity === 'comercio') {\n        anexo = 'I';\n        if (annualRevenue <= 180000) aliquota = 4.0;\n        else if (annualRevenue <= 360000) aliquota = 7.3;\n        else if (annualRevenue <= 720000) aliquota = 9.5;\n        else if (annualRevenue <= 1800000) aliquota = 10.7;\n        else if (annualRevenue <= 3600000) aliquota = 14.3;\n        else aliquota = 19.0;\n      } else if (activity === 'industria') {\n        anexo = 'II';\n        if (annualRevenue <= 180000) aliquota = 4.5;\n        else if (annualRevenue <= 360000) aliquota = 7.8;\n        else if (annualRevenue <= 720000) aliquota = 10.0;\n        else if (annualRevenue <= 1800000) aliquota = 11.2;\n        else if (annualRevenue <= 3600000) aliquota = 14.7;\n        else aliquota = 30.0;\n      } else {\n        anexo = 'III';\n        if (annualRevenue <= 180000) aliquota = 6.0;\n        else if (annualRevenue <= 360000) aliquota = 11.2;\n        else if (annualRevenue <= 720000) aliquota = 13.5;\n        else if (annualRevenue <= 1800000) aliquota = 16.0;\n        else if (annualRevenue <= 3600000) aliquota = 21.0;\n        else aliquota = 33.0;\n      }\n\n      const tax = revenue * (aliquota / 100);\n      const netRevenue = revenue - tax;\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo Simples Nacional realizado com sucesso',\n        data: {\n          revenue,\n          annualRevenue,\n          activity,\n          anexo,\n          aliquota,\n          tax,\n          netRevenue,\n          effectiveRate: aliquota\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo Simples Nacional:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula depreciação de ativos\n   */\n  async calculateDepreciation(req: Request, res: Response): Promise<void> {\n    try {\n      const { assetValue, assetType, usefulLife, method } = req.body;\n\n      if (!assetValue || assetValue < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Valor do ativo deve ser positivo'\n        });\n        return;\n      }\n\n      let years = usefulLife;\n      if (!years) {\n        // Vida útil padrão por tipo de ativo\n        switch (assetType) {\n          case 'veiculo': years = 5; break;\n          case 'equipamento': years = 10; break;\n          case 'movel': years = 10; break;\n          case 'imovel': years = 25; break;\n          case 'computador': years = 5; break;\n          default: years = 10;\n        }\n      }\n\n      let annualDepreciation = 0;\n      let monthlyDepreciation = 0;\n      let schedule = [];\n\n      if (method === 'acelerada') {\n        // Depreciação acelerada (dobro da taxa normal)\n        annualDepreciation = (assetValue / years) * 2;\n        monthlyDepreciation = annualDepreciation / 12;\n        years = Math.ceil(years / 2);\n      } else {\n        // Depreciação linear (método padrão)\n        annualDepreciation = assetValue / years;\n        monthlyDepreciation = annualDepreciation / 12;\n      }\n\n      // Gerar cronograma de depreciação\n      let remainingValue = assetValue;\n      for (let year = 1; year <= years; year++) {\n        const yearDepreciation = Math.min(annualDepreciation, remainingValue);\n        remainingValue -= yearDepreciation;\n        schedule.push({\n          year,\n          depreciation: yearDepreciation,\n          accumulatedDepreciation: assetValue - remainingValue,\n          remainingValue\n        });\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo de depreciação realizado com sucesso',\n        data: {\n          assetValue,\n          assetType,\n          usefulLife: years,\n          method: method || 'linear',\n          annualDepreciation,\n          monthlyDepreciation,\n          totalDepreciation: assetValue,\n          schedule\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de depreciação:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula financiamento/empréstimo\n   */\n  async calculateLoan(req: Request, res: Response): Promise<void> {\n    try {\n      const { principal, interestRate, months, type } = req.body;\n\n      if (!principal || principal <= 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Valor principal deve ser positivo'\n        });\n        return;\n      }\n\n      if (!interestRate || interestRate < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Taxa de juros deve ser positiva'\n        });\n        return;\n      }\n\n      if (!months || months <= 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Número de parcelas deve ser positivo'\n        });\n        return;\n      }\n\n      const monthlyRate = interestRate / 100 / 12;\n      let monthlyPayment = 0;\n      let totalInterest = 0;\n      let schedule = [];\n\n      if (type === 'sac') {\n        // Sistema de Amortização Constante (SAC)\n        const amortization = principal / months;\n        let balance = principal;\n        \n        for (let month = 1; month <= months; month++) {\n          const interest = balance * monthlyRate;\n          const payment = amortization + interest;\n          balance -= amortization;\n          totalInterest += interest;\n          \n          schedule.push({\n            month,\n            payment: Math.round(payment * 100) / 100,\n            principal: Math.round(amortization * 100) / 100,\n            interest: Math.round(interest * 100) / 100,\n            balance: Math.round(balance * 100) / 100\n          });\n        }\n        \n        monthlyPayment = schedule[0]?.payment || 0;\n      } else {\n        // Sistema Price (parcelas fixas)\n        monthlyPayment = principal * (monthlyRate * Math.pow(1 + monthlyRate, months)) / (Math.pow(1 + monthlyRate, months) - 1);\n        let balance = principal;\n        \n        for (let month = 1; month <= months; month++) {\n          const interest = balance * monthlyRate;\n          const principalPayment = monthlyPayment - interest;\n          balance -= principalPayment;\n          totalInterest += interest;\n          \n          schedule.push({\n            month,\n            payment: Math.round(monthlyPayment * 100) / 100,\n            principal: Math.round(principalPayment * 100) / 100,\n            interest: Math.round(interest * 100) / 100,\n            balance: Math.round(Math.max(0, balance) * 100) / 100\n          });\n        }\n      }\n\n      const totalAmount = principal + totalInterest;\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo de financiamento realizado com sucesso',\n        data: {\n          principal,\n          interestRate,\n          months,\n          type: type || 'price',\n          monthlyPayment: Math.round(monthlyPayment * 100) / 100,\n          totalInterest: Math.round(totalInterest * 100) / 100,\n          totalAmount: Math.round(totalAmount * 100) / 100,\n          schedule\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de financiamento:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n}\n\n// Instância do controller\nexport const calculatorController = new CalculatorController();"],"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","ignoreList":[]}
{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\__tests__\\cacheService.test.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\__tests__\\cacheService.test.ts"],"sourcesContent":["import Redis from 'ioredis';\r\nimport logger from '../../utils/logger';\r\n\r\n// Mock do Redis\r\njest.mock('ioredis');\r\nconst MockedRedis = Redis as jest.MockedClass<typeof Redis>;\r\n\r\n// Mock do logger\r\njest.mock('../../utils/logger', () => ({\r\n  info: jest.fn(),\r\n  warn: jest.fn(),\r\n  error: jest.fn(),\r\n  debug: jest.fn(),\r\n}));\r\n\r\n// Mock do config\r\njest.mock('../../config/config', () => ({\r\n  config: {\r\n    cache: {\r\n      redis: {\r\n        host: 'localhost',\r\n        port: 6379,\r\n        password: '',\r\n        db: 0,\r\n      },\r\n      ttl: 3600, // TTL padrão em segundos\r\n    },\r\n  },\r\n}));\r\n\r\n// Importar após os mocks\r\nimport { CacheService } from '../cacheService';\r\n\r\ndescribe('CacheService', () => {\r\n  let mockRedisInstance: any;\r\n  let cacheService: any;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // Criar mock da instância do Redis\r\n    mockRedisInstance = {\r\n      connect: jest.fn(),\r\n      disconnect: jest.fn(),\r\n      setex: jest.fn(),\r\n      get: jest.fn(),\r\n      del: jest.fn(),\r\n      keys: jest.fn(),\r\n      exists: jest.fn(),\r\n      expire: jest.fn(),\r\n      ttl: jest.fn(),\r\n      flushdb: jest.fn(),\r\n      info: jest.fn(),\r\n      on: jest.fn(),\r\n      status: 'ready',\r\n    };\r\n\r\n    MockedRedis.mockImplementation(() => mockRedisInstance);\r\n    \r\n    // Criar nova instância para cada teste\r\n    cacheService = new CacheService();\r\n    // Configurar o estado de conexão como true por padrão\r\n    (cacheService as any).isConnected = true;\r\n  });\r\n\r\n  describe('connect', () => {\r\n    it('should connect to Redis successfully', async () => {\r\n      mockRedisInstance.connect.mockResolvedValue(undefined);\r\n\r\n      await cacheService.connect();\r\n\r\n      expect(mockRedisInstance.connect).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle connection errors', async () => {\r\n      const error = new Error('Connection failed');\r\n      mockRedisInstance.connect.mockRejectedValue(error);\r\n\r\n      await expect(cacheService.connect()).rejects.toThrow('Connection failed');\r\n      expect(logger.error).toHaveBeenCalledWith('Failed to connect to Redis:', error);\r\n    });\r\n  });\r\n\r\n  describe('disconnect', () => {\r\n    it('should disconnect from Redis successfully', async () => {\r\n      mockRedisInstance.disconnect.mockResolvedValue('OK' as any);\r\n\r\n      await cacheService.disconnect();\r\n\r\n      expect(mockRedisInstance.disconnect).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle disconnection errors', async () => {\r\n      const error = new Error('Disconnection failed');\r\n      mockRedisInstance.disconnect.mockRejectedValue(error);\r\n\r\n      await cacheService.disconnect();\r\n\r\n      expect(logger.error).toHaveBeenCalledWith('Failed to disconnect from Redis:', error);\r\n    });\r\n  });\r\n\r\n  describe('isRedisConnected', () => {\r\n    it('should return true when Redis is connected', () => {\r\n      // Mock do método privado isConnected\r\n      (cacheService as any).isConnected = true;\r\n      mockRedisInstance.status = 'ready';\r\n\r\n      const result = cacheService.isRedisConnected();\r\n\r\n      expect(result).toBe(true);\r\n    });\r\n\r\n    it('should return false when Redis is not connected', () => {\r\n      (cacheService as any).isConnected = false;\r\n      mockRedisInstance.status = 'disconnected' as any;\r\n\r\n      const result = cacheService.isRedisConnected();\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('set', () => {\r\n    beforeEach(() => {\r\n      (cacheService as any).isConnected = true;\r\n      mockRedisInstance.status = 'ready';\r\n    });\r\n\r\n    it('should set a value in cache with default TTL', async () => {\r\n      const key = 'test:key';\r\n      const value = { data: 'test' };\r\n      mockRedisInstance.setex.mockResolvedValue('OK');\r\n\r\n      await cacheService.set(key, value);\r\n\r\n      expect(mockRedisInstance.setex).toHaveBeenCalledWith(\r\n        key,\r\n        3600, // TTL padrão da configuração\r\n        JSON.stringify(value)\r\n      );\r\n      expect(logger.debug).toHaveBeenCalledWith(`Cache set: ${key} (TTL: 3600s)`);\r\n    });\r\n\r\n    it('should set a value in cache with custom TTL', async () => {\r\n      const key = 'test:key';\r\n      const value = { data: 'test' };\r\n      const ttl = 1800;\r\n      mockRedisInstance.setex.mockResolvedValue('OK');\r\n\r\n      await cacheService.set(key, value, ttl);\r\n\r\n      expect(mockRedisInstance.setex).toHaveBeenCalledWith(\r\n        key,\r\n        ttl,\r\n        JSON.stringify(value)\r\n      );\r\n      expect(logger.debug).toHaveBeenCalledWith(`Cache set: ${key} (TTL: ${ttl}s)`);\r\n    });\r\n\r\n    it('should skip cache set when Redis is not connected', async () => {\r\n      (cacheService as any).isConnected = false;\r\n      const key = 'test:key';\r\n      const value = { data: 'test' };\r\n\r\n      await cacheService.set(key, value);\r\n\r\n      expect(mockRedisInstance.setex).not.toHaveBeenCalled();\r\n      expect(logger.warn).toHaveBeenCalledWith('Redis not connected, skipping cache set');\r\n    });\r\n\r\n    it('should handle set errors gracefully', async () => {\r\n      const key = 'test:key';\r\n      const value = { data: 'test' };\r\n      const error = new Error('Set failed');\r\n      mockRedisInstance.setex.mockRejectedValue(error);\r\n\r\n      await cacheService.set(key, value);\r\n\r\n      expect(logger.error).toHaveBeenCalledWith(`Failed to set cache for key ${key}:`, error);\r\n    });\r\n  });\r\n\r\n  describe('get', () => {\r\n    beforeEach(() => {\r\n      (cacheService as any).isConnected = true;\r\n      mockRedisInstance.status = 'ready';\r\n    });\r\n\r\n    it('should get a value from cache', async () => {\r\n      const key = 'test:key';\r\n      const value = { data: 'test' };\r\n      mockRedisInstance.get.mockResolvedValue(JSON.stringify(value));\r\n\r\n      const result = await cacheService.get(key);\r\n\r\n      expect(mockRedisInstance.get).toHaveBeenCalledWith(key);\r\n      expect(result).toEqual(value);\r\n      expect(logger.debug).toHaveBeenCalledWith(`Cache hit: ${key}`);\r\n    });\r\n\r\n    it('should return null when key does not exist', async () => {\r\n      const key = 'test:key';\r\n      mockRedisInstance.get.mockResolvedValue(null);\r\n\r\n      const result = await cacheService.get(key);\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n\r\n    it('should return null when Redis is not connected', async () => {\r\n      (cacheService as any).isConnected = false;\r\n      const key = 'test:key';\r\n\r\n      const result = await cacheService.get(key);\r\n\r\n      expect(result).toBeNull();\r\n      expect(mockRedisInstance.get).not.toHaveBeenCalled();\r\n      expect(logger.warn).toHaveBeenCalledWith('Redis not connected, skipping cache get');\r\n    });\r\n\r\n    it('should handle get errors gracefully', async () => {\r\n      const key = 'test:key';\r\n      const error = new Error('Get failed');\r\n      mockRedisInstance.get.mockRejectedValue(error);\r\n\r\n      const result = await cacheService.get(key);\r\n\r\n      expect(result).toBeNull();\r\n      expect(logger.error).toHaveBeenCalledWith(`Failed to get cache for key ${key}:`, error);\r\n    });\r\n  });\r\n\r\n  describe('del', () => {\r\n    beforeEach(() => {\r\n      (cacheService as any).isConnected = true;\r\n      mockRedisInstance.status = 'ready';\r\n    });\r\n\r\n    it('should delete a key from cache', async () => {\r\n      const key = 'test:key';\r\n      mockRedisInstance.del.mockResolvedValue(1);\r\n\r\n      await cacheService.del(key);\r\n\r\n      expect(mockRedisInstance.del).toHaveBeenCalledWith(key);\r\n      expect(logger.debug).toHaveBeenCalledWith(`Cache deleted: ${key}`);\r\n    });\r\n\r\n    it('should skip delete when Redis is not connected', async () => {\r\n      (cacheService as any).isConnected = false;\r\n      const key = 'test:key';\r\n\r\n      await cacheService.del(key);\r\n\r\n      expect(mockRedisInstance.del).not.toHaveBeenCalled();\r\n      expect(logger.warn).toHaveBeenCalledWith('Redis not connected, skipping cache delete');\r\n    });\r\n  });\r\n\r\n  describe('delMany', () => {\r\n    beforeEach(() => {\r\n      (cacheService as any).isConnected = true;\r\n      mockRedisInstance.status = 'ready';\r\n    });\r\n\r\n    it('should delete multiple keys from cache', async () => {\r\n      const keys = ['test:key1', 'test:key2'];\r\n      mockRedisInstance.del.mockResolvedValue(2);\r\n\r\n      await cacheService.delMany(keys);\r\n\r\n      expect(mockRedisInstance.del).toHaveBeenCalledWith(...keys);\r\n      expect(logger.debug).toHaveBeenCalledWith(`Cache deleted: ${keys.join(', ')}`);\r\n    });\r\n\r\n    it('should skip delete when keys array is empty', async () => {\r\n      await cacheService.delMany([]);\r\n\r\n      expect(mockRedisInstance.del).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('delPattern', () => {\r\n    beforeEach(() => {\r\n      (cacheService as any).isConnected = true;\r\n      mockRedisInstance.status = 'ready';\r\n    });\r\n\r\n    it('should delete keys matching pattern', async () => {\r\n      const pattern = 'test:*';\r\n      const keys = ['test:key1', 'test:key2'];\r\n      mockRedisInstance.keys.mockResolvedValue(keys);\r\n      mockRedisInstance.del.mockResolvedValue(2);\r\n\r\n      await cacheService.delPattern(pattern);\r\n\r\n      expect(mockRedisInstance.keys).toHaveBeenCalledWith(pattern);\r\n      expect(mockRedisInstance.del).toHaveBeenCalledWith(...keys);\r\n      expect(logger.debug).toHaveBeenCalledWith(`Cache pattern deleted: ${pattern} (${keys.length} keys)`);\r\n    });\r\n\r\n    it('should not delete when no keys match pattern', async () => {\r\n      const pattern = 'test:*';\r\n      mockRedisInstance.keys.mockResolvedValue([]);\r\n\r\n      await cacheService.delPattern(pattern);\r\n\r\n      expect(mockRedisInstance.keys).toHaveBeenCalledWith(pattern);\r\n      expect(mockRedisInstance.del).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('exists', () => {\r\n    beforeEach(() => {\r\n      (cacheService as any).isConnected = true;\r\n      mockRedisInstance.status = 'ready';\r\n    });\r\n\r\n    it('should return true when key exists', async () => {\r\n      const key = 'test:key';\r\n      mockRedisInstance.exists.mockResolvedValue(1);\r\n\r\n      const result = await cacheService.exists(key);\r\n\r\n      expect(result).toBe(true);\r\n      expect(mockRedisInstance.exists).toHaveBeenCalledWith(key);\r\n    });\r\n\r\n    it('should return false when key does not exist', async () => {\r\n      const key = 'test:key';\r\n      mockRedisInstance.exists.mockResolvedValue(0);\r\n\r\n      const result = await cacheService.exists(key);\r\n\r\n      expect(result).toBe(false);\r\n    });\r\n\r\n    it('should return false when Redis is not connected', async () => {\r\n      (cacheService as any).isConnected = false;\r\n      const key = 'test:key';\r\n\r\n      const result = await cacheService.exists(key);\r\n\r\n      expect(result).toBe(false);\r\n      expect(mockRedisInstance.exists).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('flush', () => {\r\n    beforeEach(() => {\r\n      (cacheService as any).isConnected = true;\r\n      mockRedisInstance.status = 'ready';\r\n    });\r\n\r\n    it('should flush all cache', async () => {\r\n      mockRedisInstance.flushdb.mockResolvedValue('OK');\r\n\r\n      await cacheService.flush();\r\n\r\n      expect(mockRedisInstance.flushdb).toHaveBeenCalled();\r\n      expect(logger.info).toHaveBeenCalledWith('Cache flushed');\r\n    });\r\n\r\n    it('should skip flush when Redis is not connected', async () => {\r\n      (cacheService as any).isConnected = false;\r\n\r\n      await cacheService.flush();\r\n\r\n      expect(mockRedisInstance.flushdb).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n});"],"version":3}
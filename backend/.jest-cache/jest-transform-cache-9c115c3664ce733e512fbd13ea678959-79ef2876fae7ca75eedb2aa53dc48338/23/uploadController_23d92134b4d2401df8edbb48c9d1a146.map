{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\uploadController.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,2CAA8C;AAC9C,oDAA4B;AAC5B,2CAA6B;AAC7B,gDAAkC;AAClC,+CAAiC;AACjC,kDAA0B;AAC1B,6DAAqC;AAErC,MAAM,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;AA4BlC,yBAAyB;AACzB,MAAM,OAAO,GAAG,gBAAM,CAAC,WAAW,CAAC;IACjC,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;QACnC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,CAAC,CAAC;QACtD,IAAI,CAAC;YACH,MAAM,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACjD,CAAC;QACD,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACtB,CAAC;IACD,QAAQ,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;QAC1B,MAAM,YAAY,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;QACzC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,EAAE,CAAC,IAAI,EAAE,GAAG,YAAY,GAAG,GAAG,EAAE,CAAC,CAAC;IACpC,CAAC;CACF,CAAC,CAAC;AAEH,qBAAqB;AACrB,MAAM,UAAU,GAAG,CAAC,GAAQ,EAAE,IAAyB,EAAE,EAA6B,EAAE,EAAE;IACxF,mBAAmB;IACnB,MAAM,YAAY,GAAG;QACnB,UAAU;QACV,YAAY;QACZ,WAAW;QACX,WAAW;QACX,WAAW;QACX,YAAY;QACZ,eAAe;QACf,aAAa;QACb,iBAAiB;QACjB,oBAAoB;QACpB,yEAAyE;QACzE,0BAA0B;QAC1B,mEAAmE;QACnE,YAAY;QACZ,UAAU;KACX,CAAC;IAEF,IAAI,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;QACzC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACjB,CAAC;SAAM,CAAC;QACN,EAAE,CAAC,IAAI,KAAK,CAAC,kCAAkC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACnE,CAAC;AACH,CAAC,CAAC;AAEF,yBAAyB;AACzB,MAAM,MAAM,GAAG,IAAA,gBAAM,EAAC;IACpB,OAAO;IACP,UAAU;IACV,MAAM,EAAE;QACN,QAAQ,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,OAAO;QACnC,KAAK,EAAE,CAAC,CAAC,4BAA4B;KACtC;CACF,CAAC,CAAC;AAEH;;GAEG;AACH,MAAa,gBAAgB;IAC3B;;OAEG;IACH,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAE5C;;OAEG;IACH,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAEjD;;OAEG;IACK,MAAM,CAAC,WAAW,CAAC,QAAgB;QACzC,IAAI,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;YAClC,OAAO,OAAO,CAAC;QACjB,CAAC;QACD,IACE,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;YACxB,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC7B,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC;YAChC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EACzB,CAAC;YACD,OAAO,UAAU,CAAC;QACpB,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,QAAgB;QAClE,IAAI,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,QAAQ,KAAK,eAAe,EAAE,CAAC;gBACnE,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,KAAK,GAAG,IAAA,eAAK,EAAC,QAAQ,CAAC,CAAC;YAC9B,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;YAExC,gCAAgC;YAChC,MAAM,KAAK,GAAG;gBACZ,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;gBAC9C,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;gBAC1C,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;gBAC3C,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;aAC7C,CAAC;YAEF,MAAM,QAAQ,GAAQ,EAAE,CAAC;YACzB,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACnC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;YAEvC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;oBAClD,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,IAAI,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC;oBAChE,MAAM,KAAK;yBACR,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE;wBAC/B,GAAG,EAAE,QAAQ;wBACb,kBAAkB,EAAE,IAAI;qBACzB,CAAC;yBACD,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;yBACrB,MAAM,CAAC,WAAW,CAAC,CAAC;oBAEvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;wBACpB,IAAI,EAAE,WAAW;wBACjB,GAAG,EAAE,YAAY,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;wBAC7C,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;qBACpB,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,OAAO;gBACL,QAAQ,EAAE;oBACR,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,MAAM,EAAE,QAAQ,CAAC,MAAM;oBACvB,MAAM,EAAE,QAAQ,CAAC,MAAM;iBACxB;gBACD,QAAQ;aACT,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,GAAY,EAAE,GAAa;QACjD,IAAI,CAAC;YACH,MAAM,WAAW,GAAI,GAAW,CAAC,IAAI,CAAC;YACtC,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YAEtB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,4BAA4B;iBACtC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7D,MAAM,OAAO,GAAG,YAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;YAE5C,iCAAiC;YACjC,IAAI,QAAQ,GAAG,IAAI,CAAC;YACpB,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;gBACzB,QAAQ,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC3E,CAAC;YAED,8BAA8B;YAC9B,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;gBAC9C,IAAI,EAAE;oBACJ,YAAY,EAAE,IAAI,CAAC,YAAY;oBAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,GAAG,EAAE,OAAO;oBACZ,IAAI,EAAE,QAAQ;oBACd,2DAA2D;oBAC3D,MAAM,EAAE,WAAW,CAAC,EAAE;iBACvB;aACF,CAAC,CAAC;YAEH,cAAc;YACd,gBAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBAC7B,MAAM,EAAE,YAAY,CAAC,EAAE;gBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE,WAAW,CAAC,EAAE;aAC3B,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,6BAA6B;gBACtC,IAAI,EAAE;oBACJ,IAAI,EAAE;wBACJ,EAAE,EAAE,YAAY,CAAC,EAAE;wBACnB,YAAY,EAAE,YAAY,CAAC,YAAY;wBACvC,QAAQ,EAAE,YAAY,CAAC,QAAQ;wBAC/B,GAAG,EAAE,YAAY,CAAC,GAAG;wBACrB,IAAI,EAAE,YAAY,CAAC,IAAI;wBACvB,IAAI,EAAE,YAAY,CAAC,IAAI;wBACvB,QAAQ,EAAE,YAAY,CAAC,QAAQ;wBAC/B,qDAAqD;wBACrD,SAAS,EAAE,YAAY,CAAC,SAAS;qBAClC;iBACF;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QAC1D,IAAI,CAAC;YACH,MAAM,WAAW,GAAI,GAAW,CAAC,IAAI,CAAC;YACtC,MAAM,KAAK,GAAG,GAAG,CAAC,KAA8B,CAAC;YAEjD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,4BAA4B;iBACtC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,aAAa,GAAG,EAAE,CAAC;YAEzB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,MAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC7D,MAAM,OAAO,GAAG,YAAY,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAE5C,iCAAiC;gBACjC,IAAI,QAAQ,GAAG,IAAI,CAAC;gBACpB,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;oBACzB,QAAQ,GAAG,MAAM,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3E,CAAC;gBAED,8BAA8B;gBAC9B,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC9C,IAAI,EAAE;wBACJ,YAAY,EAAE,IAAI,CAAC,YAAY;wBAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;wBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,GAAG,EAAE,OAAO;wBACZ,IAAI,EAAE,QAAQ;wBACd,2DAA2D;wBAC3D,MAAM,EAAE,WAAW,CAAC,EAAE;qBACvB;iBACF,CAAC,CAAC;gBAEH,aAAa,CAAC,IAAI,CAAC;oBACjB,EAAE,EAAE,YAAY,CAAC,EAAE;oBACnB,YAAY,EAAE,YAAY,CAAC,YAAY;oBACvC,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,GAAG,EAAE,YAAY,CAAC,GAAG;oBACrB,IAAI,EAAE,YAAY,CAAC,IAAI;oBACvB,IAAI,EAAE,YAAY,CAAC,IAAI;oBACvB,QAAQ,EAAE,YAAY,CAAC,QAAQ;oBAC/B,qDAAqD;oBACrD,SAAS,EAAE,YAAY,CAAC,SAAS;iBAClC,CAAC,CAAC;YACL,CAAC;YAED,cAAc;YACd,gBAAM,CAAC,IAAI,CAAC,6BAA6B,EAAE;gBACzC,KAAK,EAAE,aAAa,CAAC,MAAM;gBAC3B,UAAU,EAAE,WAAW,CAAC,EAAE;gBAC1B,KAAK,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC;aACpE,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,GAAG,aAAa,CAAC,MAAM,gCAAgC;gBAChE,IAAI,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE;aAC/B,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YACtE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAY,EAAE,GAAa;QAC/C,IAAI,CAAC;YACH,MAAM,EACJ,IAAI,EACJ,QAAQ,EACR,MAAM,EACN,UAAU,EACV,QAAQ,EACR,MAAM,EACN,IAAI,GAAG,CAAC,EACR,KAAK,GAAG,EAAE,EACV,MAAM,GAAG,WAAW,EACpB,SAAS,GAAG,MAAM,EACnB,GAAgB,GAAG,CAAC,KAAK,CAAC;YAE3B,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAE3B,oBAAoB;YACpB,MAAM,KAAK,GAAQ,EAAE,CAAC;YAEtB,IAAI,IAAI,EAAE,CAAC;gBACT,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;YACpB,CAAC;YAED,IAAI,QAAQ,EAAE,CAAC;gBACb,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC5B,CAAC;YAED,IAAI,MAAM,EAAE,CAAC;gBACX,KAAK,CAAC,EAAE,GAAG;oBACT,EAAE,YAAY,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,EAAE;oBAC3D,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,EAAE;iBACxD,CAAC;YACJ,CAAC;YAED,IAAI,UAAU,EAAE,CAAC;gBACf,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC;YAC5B,CAAC;YAED,IAAI,QAAQ,IAAI,MAAM,EAAE,CAAC;gBACvB,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC;gBACrB,IAAI,QAAQ,EAAE,CAAC;oBACb,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3C,CAAC;gBACD,IAAI,MAAM,EAAE,CAAC;oBACX,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;oBACjC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;oBAClC,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,OAAO,CAAC;gBAChC,CAAC;YACH,CAAC;YAED,oBAAoB;YACpB,MAAM,OAAO,GAAQ,EAAE,CAAC;YACxB,OAAO,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;YAE5B,kBAAkB;YAClB,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACvC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;oBACrB,KAAK;oBACL,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,MAAM,EAAE;gCACN,EAAE,EAAE,IAAI;gCACR,IAAI,EAAE,IAAI;gCACV,KAAK,EAAE,IAAI;6BACZ;yBACF;qBACF;oBACD,IAAI;oBACJ,IAAI;oBACJ,OAAO;iBACR,CAAC;gBACF,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;aAC/B,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;YAE3C,eAAe;YACf,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;gBACxC,EAAE,EAAE,CAAC,MAAM,CAAC;gBACZ,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;aACrB,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG;gBACjB,KAAK;gBACL,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;gBACtE,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBACjC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;wBACf,KAAK,EAAE,IAAI,CAAC,MAAM;wBAClB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;qBAC1B,CAAC;oBACF,OAAO,GAAG,CAAC;gBACb,CAAC,EAAE,EAAS,CAAC;aACd,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,+BAA+B;gBACxC,IAAI,EAAE;oBACJ,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACxB,GAAG,IAAI;wBACP,2DAA2D;qBAC5D,CAAC,CAAC;oBACH,UAAU;oBACV,UAAU,EAAE;wBACV,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;wBAClB,KAAK,EAAE,IAAI;wBACX,KAAK;wBACL,UAAU;wBACV,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,UAAU;wBAClC,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;qBAC1B;iBACF;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,GAAY,EAAE,GAAa;QAClD,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE1B,IAAI,CAAC,EAAE,EAAE,CAAC;gBACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,6BAA6B;iBACvC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC1C,KAAK,EAAE,EAAE,EAAE,EAAE;gBACb,OAAO,EAAE;oBACP,IAAI,EAAE;wBACJ,MAAM,EAAE;4BACN,EAAE,EAAE,IAAI;4BACR,IAAI,EAAE,IAAI;4BACV,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,wBAAwB;iBAClC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,oBAAoB;gBAC7B,IAAI,EAAE;oBACJ,IAAI,EAAE;wBACJ,GAAG,IAAI;wBACP,2DAA2D;qBAC5D;iBACF;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;YACzE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,GAAY,EAAE,GAAa;QACjD,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,WAAW,GAAI,GAAW,CAAC,IAAI,CAAC;YAEtC,IAAI,CAAC,EAAE,EAAE,CAAC;gBACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,6BAA6B;iBACvC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC1C,KAAK,EAAE,EAAE,EAAE,EAAE;aACd,CAAC,CAAC;YAEH,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,wBAAwB;iBAClC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,+CAA+C;YAC/C,IAAI,WAAW,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,MAAM,KAAK,WAAW,CAAC,EAAE,EAAE,CAAC;gBACnE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,yCAAyC;iBACnD,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,yBAAyB;YACzB,IAAI,CAAC;gBACH,MAAM,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAE3B,oHAAoH;gBACpH,oEAAoE;YACtE,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,gBAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;YAC5E,CAAC;YAED,4BAA4B;YAC5B,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;gBACzB,KAAK,EAAE,EAAE,EAAE,EAAE;aACd,CAAC,CAAC;YAEH,cAAc;YACd,gBAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC9B,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,SAAS,EAAE,WAAW,CAAC,EAAE;aAC1B,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,8BAA8B;aACxC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAY,EAAE,GAAa;QAC1D,IAAI,CAAC;YACH,MAAM,EAAE,OAAO,EAAE,GAA0B,GAAG,CAAC,IAAI,CAAC;YACpD,MAAM,WAAW,GAAI,GAAW,CAAC,IAAI,CAAC;YAEtC,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAChE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,wCAAwC;iBAClD,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,IAAI,OAAO,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;gBACxB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,+BAA+B;iBACzC,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,kBAAkB;YAClB,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;gBACzC,KAAK,EAAE;oBACL,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE;oBACnB,wDAAwD;oBACxD,GAAG,CAAC,WAAW,CAAC,IAAI,KAAK,OAAO,IAAI,EAAE,YAAY,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC;iBACtE;aACF,CAAC,CAAC;YAEH,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,4CAA4C;iBACtD,CAAC,CAAC;gBACH,OAAO;YACT,CAAC;YAED,2BAA2B;YAC3B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,IAAI,CAAC;oBACH,MAAM,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAE3B,yEAAyE;gBAC3E,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,gBAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;gBAC5E,CAAC;YACH,CAAC;YAED,6BAA6B;YAC7B,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC5C,KAAK,EAAE;oBACL,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;iBACjC;aACF,CAAC,CAAC;YAEH,cAAc;YACd,gBAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE;gBAC1C,KAAK,EAAE,MAAM,CAAC,KAAK;gBACnB,SAAS,EAAE,WAAW,CAAC,EAAE;gBACzB,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC;aAC5D,CAAC,CAAC;YAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,GAAG,MAAM,CAAC,KAAK,iCAAiC;gBACzD,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,CAAC,KAAK,EAAE;aACrC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAC9D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,GAAY,EAAE,GAAa;QACnD,IAAI,CAAC;YACH,MAAM,EAAE,MAAM,GAAG,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;YACpC,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YAClC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAC7B,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;YAEpD,MAAM,CAAC,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBAC7D,sBAAsB;gBACtB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;oBACpB,EAAE,EAAE,CAAC,MAAM,CAAC;oBACZ,MAAM,EAAE,IAAI;oBACZ,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;iBACrB,CAAC;gBACF,0BAA0B;gBAC1B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;oBACpB,EAAE,EAAE,CAAC,MAAM,CAAC;oBACZ,KAAK,EAAE;wBACL,SAAS,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE;qBAC9B;oBACD,MAAM,EAAE,IAAI;oBACZ,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;iBACrB,CAAC;gBACF,0BAA0B;gBAC1B,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC;oBACtB,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;oBACpB,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;oBACpB,MAAM,EAAE,IAAI;iBACb,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG;gBACjB,KAAK,EAAE;oBACL,KAAK,EAAE,SAAS,CAAC,MAAM;oBACvB,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;oBAC9B,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;oBACrC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;wBACtC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;4BACf,KAAK,EAAE,IAAI,CAAC,MAAM;4BAClB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;yBAC1B,CAAC;wBACF,OAAO,GAAG,CAAC;oBACb,CAAC,EAAE,EAAS,CAAC;iBACd;gBACD,MAAM,EAAE;oBACN,IAAI,EAAE,UAAU;oBAChB,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;wBACvC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;4BACf,KAAK,EAAE,IAAI,CAAC,MAAM;4BAClB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;yBAC1B,CAAC;wBACF,OAAO,GAAG,CAAC;oBACb,CAAC,EAAE,EAAS,CAAC;iBACd;aACF,CAAC;YAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,kCAAkC;gBAC3C,IAAI,EAAE,EAAE,UAAU,EAAE;aACrB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gBAAM,CAAC,KAAK,CAAC,wCAAwC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAClE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,0BAA0B;aACpC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;;AAvoBH,4CAwoBC;AAED,kBAAe,gBAAgB,CAAC","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\uploadController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport multer from 'multer';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs/promises';\r\nimport * as crypto from 'crypto';\r\nimport sharp from 'sharp';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de arquivo\r\ninterface FileData {\r\n  originalName: string;\r\n  filename: string;\r\n  mimetype: string;\r\n  size: number;\r\n  path: string;\r\n  url: string;\r\n  type: 'IMAGE' | 'DOCUMENT' | 'OTHER';\r\n  // metadata removido pois não existe no modelo Upload\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface FileFilters {\r\n  type?: string;\r\n  mimetype?: string;\r\n  search?: string;\r\n  uploadedBy?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'originalName' | 'size';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n// Configuração do multer\r\nconst storage = multer.diskStorage({\r\n  destination: async (req, file, cb) => {\r\n    const uploadDir = path.join(process.cwd(), 'uploads');\r\n    try {\r\n      await fs.access(uploadDir);\r\n    } catch {\r\n      await fs.mkdir(uploadDir, { recursive: true });\r\n    }\r\n    cb(null, uploadDir);\r\n  },\r\n  filename: (req, file, cb) => {\r\n    const uniqueSuffix = crypto.randomUUID();\r\n    const ext = path.extname(file.originalname);\r\n    cb(null, `${uniqueSuffix}${ext}`);\r\n  }\r\n});\r\n\r\n// Filtros de arquivo\r\nconst fileFilter = (req: any, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n  // Tipos permitidos\r\n  const allowedMimes = [\r\n    // Imagens\r\n    'image/jpeg',\r\n    'image/jpg',\r\n    'image/png',\r\n    'image/gif',\r\n    'image/webp',\r\n    'image/svg+xml',\r\n    // Documentos\r\n    'application/pdf',\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    'application/vnd.ms-excel',\r\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    'text/plain',\r\n    'text/csv'\r\n  ];\r\n\r\n  if (allowedMimes.includes(file.mimetype)) {\r\n    cb(null, true);\r\n  } else {\r\n    cb(new Error(`Tipo de arquivo não permitido: ${file.mimetype}`));\r\n  }\r\n};\r\n\r\n// Configuração do multer\r\nconst upload = multer({\r\n  storage,\r\n  fileFilter,\r\n  limits: {\r\n    fileSize: 10 * 1024 * 1024, // 10MB\r\n    files: 5 // Máximo 5 arquivos por vez\r\n  }\r\n});\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de uploads\r\n */\r\nexport class UploadController {\r\n  /**\r\n   * Middleware do multer para upload único\r\n   */\r\n  static uploadSingle = upload.single('file');\r\n\r\n  /**\r\n   * Middleware do multer para múltiplos uploads\r\n   */\r\n  static uploadMultiple = upload.array('files', 5);\r\n\r\n  /**\r\n   * Determina o tipo de arquivo baseado no mimetype\r\n   */\r\n  private static getFileType(mimetype: string): 'IMAGE' | 'DOCUMENT' | 'OTHER' {\r\n    if (mimetype.startsWith('image/')) {\r\n      return 'IMAGE';\r\n    }\r\n    if (\r\n      mimetype.includes('pdf') ||\r\n      mimetype.includes('document') ||\r\n      mimetype.includes('spreadsheet') ||\r\n      mimetype.includes('text')\r\n    ) {\r\n      return 'DOCUMENT';\r\n    }\r\n    return 'OTHER';\r\n  }\r\n\r\n  /**\r\n   * Processa imagem (redimensionamento e otimização)\r\n   */\r\n  private static async processImage(filePath: string, mimetype: string): Promise<any> {\r\n    try {\r\n      if (!mimetype.startsWith('image/') || mimetype === 'image/svg+xml') {\r\n        return null;\r\n      }\r\n\r\n      const image = sharp(filePath);\r\n      const metadata = await image.metadata();\r\n\r\n      // Criar versões redimensionadas\r\n      const sizes = [\r\n        { name: 'thumbnail', width: 150, height: 150 },\r\n        { name: 'small', width: 300, height: 300 },\r\n        { name: 'medium', width: 600, height: 600 },\r\n        { name: 'large', width: 1200, height: 1200 }\r\n      ];\r\n\r\n      const versions: any = {};\r\n      const dir = path.dirname(filePath);\r\n      const name = path.parse(filePath).name;\r\n\r\n      for (const size of sizes) {\r\n        if (metadata.width && metadata.width > size.width) {\r\n          const resizedPath = path.join(dir, `${name}_${size.name}.webp`);\r\n          await image\r\n            .resize(size.width, size.height, {\r\n              fit: 'inside',\r\n              withoutEnlargement: true\r\n            })\r\n            .webp({ quality: 80 })\r\n            .toFile(resizedPath);\r\n\r\n          versions[size.name] = {\r\n            path: resizedPath,\r\n            url: `/uploads/${path.basename(resizedPath)}`,\r\n            width: size.width,\r\n            height: size.height\r\n          };\r\n        }\r\n      }\r\n\r\n      return {\r\n        original: {\r\n          width: metadata.width,\r\n          height: metadata.height,\r\n          format: metadata.format\r\n        },\r\n        versions\r\n      };\r\n    } catch (error) {\r\n      logger.error('Erro ao processar imagem', { error, filePath });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload de arquivo único\r\n   */\r\n  static async uploadFile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const file = req.file;\r\n\r\n      if (!file) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo foi enviado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const fileType = UploadController.getFileType(file.mimetype);\r\n      const fileUrl = `/uploads/${file.filename}`;\r\n\r\n      // Processar imagem se necessário\r\n      let metadata = null;\r\n      if (fileType === 'IMAGE') {\r\n        metadata = await UploadController.processImage(file.path, file.mimetype);\r\n      }\r\n\r\n      // Salvar informações no banco\r\n      const uploadedFile = await prisma.upload.create({\r\n        data: {\r\n          originalName: file.originalname,\r\n          filename: file.filename,\r\n          mimetype: file.mimetype,\r\n          size: file.size,\r\n          path: file.path,\r\n          url: fileUrl,\r\n          type: fileType,\r\n          // Campo metadata removido pois não existe no modelo Upload\r\n          userId: currentUser.id\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Arquivo enviado', {\r\n        fileId: uploadedFile.id,\r\n        filename: file.filename,\r\n        originalName: file.originalname,\r\n        size: file.size,\r\n        type: fileType,\r\n        uploadedBy: currentUser.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Arquivo enviado com sucesso',\r\n        data: {\r\n          file: {\r\n            id: uploadedFile.id,\r\n            originalName: uploadedFile.originalName,\r\n            filename: uploadedFile.filename,\r\n            url: uploadedFile.url,\r\n            type: uploadedFile.type,\r\n            size: uploadedFile.size,\r\n            mimetype: uploadedFile.mimetype,\r\n            // metadata removido pois não existe no modelo Upload\r\n            createdAt: uploadedFile.createdAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer upload de arquivo', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload de múltiplos arquivos\r\n   */\r\n  static async uploadMultipleFiles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const currentUser = (req as any).user;\r\n      const files = req.files as Express.Multer.File[];\r\n\r\n      if (!files || files.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo foi enviado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const uploadedFiles = [];\r\n\r\n      for (const file of files) {\r\n        const fileType = UploadController.getFileType(file.mimetype);\r\n        const fileUrl = `/uploads/${file.filename}`;\r\n\r\n        // Processar imagem se necessário\r\n        let metadata = null;\r\n        if (fileType === 'IMAGE') {\r\n          metadata = await UploadController.processImage(file.path, file.mimetype);\r\n        }\r\n\r\n        // Salvar informações no banco\r\n        const uploadedFile = await prisma.upload.create({\r\n          data: {\r\n            originalName: file.originalname,\r\n            filename: file.filename,\r\n            mimetype: file.mimetype,\r\n            size: file.size,\r\n            path: file.path,\r\n            url: fileUrl,\r\n            type: fileType,\r\n            // Campo metadata removido pois não existe no modelo Upload\r\n            userId: currentUser.id\r\n          }\r\n        });\r\n\r\n        uploadedFiles.push({\r\n          id: uploadedFile.id,\r\n          originalName: uploadedFile.originalName,\r\n          filename: uploadedFile.filename,\r\n          url: uploadedFile.url,\r\n          type: uploadedFile.type,\r\n          size: uploadedFile.size,\r\n          mimetype: uploadedFile.mimetype,\r\n          // metadata removido pois não existe no modelo Upload\r\n          createdAt: uploadedFile.createdAt\r\n        });\r\n      }\r\n\r\n      // Log da ação\r\n      logger.info('Múltiplos arquivos enviados', {\r\n        count: uploadedFiles.length,\r\n        uploadedBy: currentUser.id,\r\n        files: uploadedFiles.map(f => ({ id: f.id, name: f.originalName }))\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: `${uploadedFiles.length} arquivos enviados com sucesso`,\r\n        data: { files: uploadedFiles }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer upload de múltiplos arquivos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista arquivos com paginação e filtros\r\n   */\r\n  static async getFiles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        type,\r\n        mimetype,\r\n        search,\r\n        uploadedBy,\r\n        dateFrom,\r\n        dateTo,\r\n        page = 1,\r\n        limit = 20,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: FileFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (type) {\r\n        where.type = type;\r\n      }\r\n\r\n      if (mimetype) {\r\n        where.mimetype = mimetype;\r\n      }\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { originalName: { contains: search, mode: 'insensitive' } },\r\n          { filename: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (uploadedBy) {\r\n        where.userId = uploadedBy;\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.createdAt = {};\r\n        if (dateFrom) {\r\n          where.createdAt.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.createdAt.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar arquivos\r\n      const [files, total] = await Promise.all([\r\n        prisma.upload.findMany({\r\n          where,\r\n          include: {\r\n            user: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            }\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.upload.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      // Estatísticas\r\n      const stats = await prisma.upload.groupBy({\r\n        by: ['type'],\r\n        _count: true,\r\n        _sum: { size: true }\r\n      });\r\n\r\n      const statistics = {\r\n        total,\r\n        totalSize: stats.reduce((acc, stat) => acc + (stat._sum.size || 0), 0),\r\n        byType: stats.reduce((acc, stat) => {\r\n          acc[stat.type] = {\r\n            count: stat._count,\r\n            size: stat._sum.size || 0\r\n          };\r\n          return acc;\r\n        }, {} as any)\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Arquivos listados com sucesso',\r\n        data: {\r\n          files: files.map(file => ({\r\n            ...file,\r\n            // Campo metadata removido pois não existe no modelo Upload\r\n          })),\r\n          statistics,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar arquivos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca arquivo por ID\r\n   */\r\n  static async getFileById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do arquivo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const file = await prisma.upload.findUnique({\r\n        where: { id },\r\n        include: {\r\n          user: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      if (!file) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Arquivo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Arquivo encontrado',\r\n        data: {\r\n          file: {\r\n            ...file,\r\n            // Campo metadata removido pois não existe no modelo Upload\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar arquivo', { error, fileId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um arquivo\r\n   */\r\n  static async deleteFile(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do arquivo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const file = await prisma.upload.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!file) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Arquivo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permissões (proprietário ou admin)\r\n      if (currentUser.role !== 'ADMIN' && file.userId !== currentUser.id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permissão para deletar este arquivo'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Remover arquivo físico\r\n      try {\r\n        await fs.unlink(file.path);\r\n        \r\n        // TODO: Implementar remoção de versões redimensionadas quando o modelo Upload for atualizado para suportar metadata\r\n        // Código removido pois o campo metadata não existe no modelo Upload\r\n      } catch (error) {\r\n        logger.warn('Erro ao remover arquivo físico', { path: file.path, error });\r\n      }\r\n\r\n      // Remover registro do banco\r\n      await prisma.upload.delete({\r\n        where: { id }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Arquivo deletado', {\r\n        fileId: id,\r\n        filename: file.filename,\r\n        originalName: file.originalName,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Arquivo deletado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar arquivo', { error, fileId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove múltiplos arquivos\r\n   */\r\n  static async deleteMultipleFiles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { fileIds }: { fileIds: string[] } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!fileIds || !Array.isArray(fileIds) || fileIds.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Lista de IDs de arquivos é obrigatória'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (fileIds.length > 50) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Máximo de 50 arquivos por vez'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar arquivos\r\n      const files = await prisma.upload.findMany({\r\n        where: {\r\n          id: { in: fileIds },\r\n          // Apenas admin pode deletar arquivos de outros usuários\r\n          ...(currentUser.role !== 'ADMIN' && { uploadedById: currentUser.id })\r\n        }\r\n      });\r\n\r\n      if (files.length === 0) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Nenhum arquivo encontrado ou sem permissão'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Remover arquivos físicos\r\n      for (const file of files) {\r\n        try {\r\n          await fs.unlink(file.path);\r\n          \r\n          // TODO: Implementar remoção de versões redimensionadas quando necessário\r\n        } catch (error) {\r\n          logger.warn('Erro ao remover arquivo físico', { path: file.path, error });\r\n        }\r\n      }\r\n\r\n      // Remover registros do banco\r\n      const result = await prisma.upload.deleteMany({\r\n        where: {\r\n          id: { in: files.map(f => f.id) }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Múltiplos arquivos deletados', {\r\n        count: result.count,\r\n        deletedBy: currentUser.id,\r\n        files: files.map(f => ({ id: f.id, name: f.originalName }))\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${result.count} arquivos deletados com sucesso`,\r\n        data: { deletedCount: result.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar múltiplos arquivos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém estatísticas de arquivos\r\n   */\r\n  static async getFileStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const [totalStats, periodStats, sizeStats] = await Promise.all([\r\n        // Estatísticas gerais\r\n        prisma.upload.groupBy({\r\n          by: ['type'],\r\n          _count: true,\r\n          _sum: { size: true }\r\n        }),\r\n        // Estatísticas do período\r\n        prisma.upload.groupBy({\r\n          by: ['type'],\r\n          where: {\r\n            createdAt: { gte: dateLimit }\r\n          },\r\n          _count: true,\r\n          _sum: { size: true }\r\n        }),\r\n        // Estatísticas de tamanho\r\n        prisma.upload.aggregate({\r\n          _sum: { size: true },\r\n          _avg: { size: true },\r\n          _count: true\r\n        })\r\n      ]);\r\n\r\n      const statistics = {\r\n        total: {\r\n          files: sizeStats._count,\r\n          size: sizeStats._sum.size || 0,\r\n          averageSize: sizeStats._avg.size || 0,\r\n          byType: totalStats.reduce((acc, stat) => {\r\n            acc[stat.type] = {\r\n              count: stat._count,\r\n              size: stat._sum.size || 0\r\n            };\r\n            return acc;\r\n          }, {} as any)\r\n        },\r\n        period: {\r\n          days: periodDays,\r\n          byType: periodStats.reduce((acc, stat) => {\r\n            acc[stat.type] = {\r\n              count: stat._count,\r\n              size: stat._sum.size || 0\r\n            };\r\n            return acc;\r\n          }, {} as any)\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estatísticas obtidas com sucesso',\r\n        data: { statistics }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estatísticas de arquivos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default UploadController;"],"version":3}
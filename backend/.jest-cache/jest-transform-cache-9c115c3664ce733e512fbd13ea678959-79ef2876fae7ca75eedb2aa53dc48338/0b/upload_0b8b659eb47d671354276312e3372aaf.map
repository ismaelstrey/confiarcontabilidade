{"version":3,"names":["cov_1cikaawcmp","actualCoverage","multer_1","s","__importDefault","require","path_1","fs_1","sharp_1","logger_1","UPLOAD_CONFIG","maxFileSize","allowedImageTypes","allowedDocumentTypes","uploadDir","default","join","process","cwd","tempDir","exports","createUploadDirs","f","forEach","dir","existsSync","b","mkdirSync","recursive","storage","diskStorage","destination","req","file","cb","filename","uniqueSuffix","Date","now","Math","round","random","ext","extname","originalname","fieldname","fileFilter","allowedTypes","includes","mimetype","Error","upload","limits","fileSize","files","processImages","res","next","Array","isArray","Object","values","flat","processedFiles","isImage","processedPath","thumbnailPath","dirname","path","resize","fit","withoutEnlargement","jpeg","quality","toFile","unlinkSync","push","size","statSync","url","thumbnailUrl","finalPath","documentsDir","renameSync","info","count","length","map","name","error","status","json","success","message","env","NODE_ENV","undefined","validateUpload","cleanupTempFiles","on","uploadSingle","single","uploadMultiple","array","uploadFields","fields","maxCount"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\upload.ts"],"sourcesContent":["import multer from 'multer';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport sharp from 'sharp';\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport logger from '../utils/logger';\r\n\r\n// Configurações de upload\r\nconst UPLOAD_CONFIG = {\r\n    maxFileSize: 10 * 1024 * 1024, // 10MB\r\n    allowedImageTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],\r\n    allowedDocumentTypes: [\r\n        'application/pdf',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n        'application/vnd.ms-excel',\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n    ],\r\n    uploadDir: path.join(process.cwd(), 'uploads'),\r\n    tempDir: path.join(process.cwd(), 'uploads', 'temp')\r\n};\r\n\r\n// Criar diretórios se não existirem\r\nconst createUploadDirs = () => {\r\n    [UPLOAD_CONFIG.uploadDir, UPLOAD_CONFIG.tempDir].forEach(dir => {\r\n        if (!fs.existsSync(dir)) {\r\n            fs.mkdirSync(dir, { recursive: true });\r\n        }\r\n    });\r\n};\r\n\r\ncreateUploadDirs();\r\n\r\n// Configuração do storage do multer\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, UPLOAD_CONFIG.tempDir);\r\n    },\r\n    filename: (req, file, cb) => {\r\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\r\n        const ext = path.extname(file.originalname);\r\n        cb(null, `${file.fieldname}-${uniqueSuffix}${ext}`);\r\n    }\r\n});\r\n\r\n// Filtro de arquivos\r\nconst fileFilter = (req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\r\n    const allowedTypes = [\r\n        ...UPLOAD_CONFIG.allowedImageTypes,\r\n        ...UPLOAD_CONFIG.allowedDocumentTypes\r\n    ];\r\n\r\n    if (allowedTypes.includes(file.mimetype)) {\r\n        cb(null, true);\r\n    } else {\r\n        cb(new Error(`Tipo de arquivo não permitido: ${file.mimetype}`));\r\n    }\r\n};\r\n\r\n// Configuração do multer\r\nconst upload = multer({\r\n    storage,\r\n    fileFilter,\r\n    limits: {\r\n        fileSize: UPLOAD_CONFIG.maxFileSize,\r\n        files: 5 // Máximo 5 arquivos por upload\r\n    }\r\n});\r\n\r\n// Interface para arquivo processado\r\nexport interface ProcessedFile {\r\n    fieldname: string;\r\n    originalname: string;\r\n    filename: string;\r\n    path: string;\r\n    size: number;\r\n    mimetype: string;\r\n    url: string;\r\n    thumbnailUrl?: string;\r\n}\r\n\r\n// Middleware para processar imagens\r\nexport const processImages = async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n        if (!req.files) {\r\n            return next();\r\n        }\r\n\r\n        const files = Array.isArray(req.files) ? req.files : Object.values(req.files).flat();\r\n        const processedFiles: ProcessedFile[] = [];\r\n\r\n        for (const file of files) {\r\n            const isImage = UPLOAD_CONFIG.allowedImageTypes.includes(file.mimetype);\r\n\r\n            if (isImage) {\r\n                // Processar imagem com sharp\r\n                const processedPath = path.join(UPLOAD_CONFIG.uploadDir, 'images', file.filename);\r\n                const thumbnailPath = path.join(UPLOAD_CONFIG.uploadDir, 'thumbnails', `thumb_${file.filename}`);\r\n\r\n                // Criar diretórios se não existirem\r\n                [path.dirname(processedPath), path.dirname(thumbnailPath)].forEach(dir => {\r\n                    if (!fs.existsSync(dir)) {\r\n                        fs.mkdirSync(dir, { recursive: true });\r\n                    }\r\n                });\r\n\r\n                // Otimizar imagem principal\r\n                await sharp(file.path)\r\n                    .resize(1920, 1080, { fit: 'inside', withoutEnlargement: true })\r\n                    .jpeg({ quality: 85 })\r\n                    .toFile(processedPath);\r\n\r\n                // Criar thumbnail\r\n                await sharp(file.path)\r\n                    .resize(300, 300, { fit: 'cover' })\r\n                    .jpeg({ quality: 80 })\r\n                    .toFile(thumbnailPath);\r\n\r\n                // Remover arquivo temporário\r\n                fs.unlinkSync(file.path);\r\n\r\n                processedFiles.push({\r\n                    fieldname: file.fieldname,\r\n                    originalname: file.originalname,\r\n                    filename: file.filename,\r\n                    path: processedPath,\r\n                    size: fs.statSync(processedPath).size,\r\n                    mimetype: 'image/jpeg',\r\n                    url: `/uploads/images/${file.filename}`,\r\n                    thumbnailUrl: `/uploads/thumbnails/thumb_${file.filename}`\r\n                });\r\n            } else {\r\n                // Mover documento para pasta final\r\n                const finalPath = path.join(UPLOAD_CONFIG.uploadDir, 'documents', file.filename);\r\n                const documentsDir = path.dirname(finalPath);\r\n\r\n                if (!fs.existsSync(documentsDir)) {\r\n                    fs.mkdirSync(documentsDir, { recursive: true });\r\n                }\r\n\r\n                fs.renameSync(file.path, finalPath);\r\n\r\n                processedFiles.push({\r\n                    fieldname: file.fieldname,\r\n                    originalname: file.originalname,\r\n                    filename: file.filename,\r\n                    path: finalPath,\r\n                    size: file.size,\r\n                    mimetype: file.mimetype,\r\n                    url: `/uploads/documents/${file.filename}`\r\n                });\r\n            }\r\n        }\r\n\r\n        // Adicionar arquivos processados ao request\r\n        req.processedFiles = processedFiles;\r\n\r\n        logger.info('Arquivos processados com sucesso', {\r\n            count: processedFiles.length,\r\n            files: processedFiles.map(f => ({ name: f.originalname, size: f.size }))\r\n        });\r\n\r\n        next();\r\n    } catch (error) {\r\n        logger.error('Erro ao processar arquivos', { error });\r\n\r\n        // Limpar arquivos temporários em caso de erro\r\n        if (req.files) {\r\n            const files = Array.isArray(req.files) ? req.files : Object.values(req.files).flat();\r\n            files.forEach(file => {\r\n                if (fs.existsSync(file.path)) {\r\n                    fs.unlinkSync(file.path);\r\n                }\r\n            });\r\n        }\r\n\r\n        res.status(500).json({\r\n            success: false,\r\n            message: 'Erro interno do servidor ao processar arquivos',\r\n            error: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined\r\n        });\r\n    }\r\n};\r\n\r\n// Middleware para validar upload\r\nexport const validateUpload = (req: Request, res: Response, next: NextFunction) => {\r\n    if (!req.files || (Array.isArray(req.files) && req.files.length === 0)) {\r\n        return res.status(400).json({\r\n            success: false,\r\n            message: 'Nenhum arquivo foi enviado',\r\n            error: 'Nenhum arquivo foi enviado'\r\n        });\r\n    }\r\n\r\n    return next();\r\n};\r\n\r\n// Middleware para limpar arquivos temporários\r\nexport const cleanupTempFiles = (req: Request, res: Response, next: NextFunction) => {\r\n    res.on('finish', () => {\r\n        if (req.files) {\r\n            const files = Array.isArray(req.files) ? req.files : Object.values(req.files).flat();\r\n            files.forEach(file => {\r\n                if (fs.existsSync(file.path)) {\r\n                    fs.unlinkSync(file.path);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    next();\r\n};\r\n\r\n// Exportar configurações de upload\r\nexport const uploadSingle = upload.single('file');\r\nexport const uploadMultiple = upload.array('files', 5);\r\nexport const uploadFields = upload.fields([\r\n    { name: 'images', maxCount: 3 },\r\n    { name: 'documents', maxCount: 2 }\r\n]);\r\n\r\nexport { UPLOAD_CONFIG };\r\n\r\n// Estender o tipo Request para incluir processedFiles\r\ndeclare global {\r\n    namespace Express {\r\n        interface Request {\r\n            processedFiles?: ProcessedFile[];\r\n        }\r\n    }\r\n}"],"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","ignoreList":[]}
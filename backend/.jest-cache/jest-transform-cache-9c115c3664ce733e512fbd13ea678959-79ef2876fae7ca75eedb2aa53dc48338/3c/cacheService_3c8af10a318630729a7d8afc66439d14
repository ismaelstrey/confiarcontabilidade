4325dc283c720dfa4be2a2e17631bacc
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheService = exports.cacheService = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
const config_1 = require("../config/config");
const logger_1 = __importDefault(require("../utils/logger"));
/**
 * Serviço de cache usando Redis
 * Gerencia operações de cache para melhorar performance da aplicação
 */
class CacheService {
    redis;
    isConnected = false;
    constructor() {
        this.redis = new ioredis_1.default({
            host: config_1.config.cache.redis.host,
            port: config_1.config.cache.redis.port,
            password: config_1.config.cache.redis.password || '',
            db: config_1.config.cache.redis.db,
            maxRetriesPerRequest: 3,
            lazyConnect: true,
        });
        this.setupEventListeners();
    }
    /**
     * Configura os listeners de eventos do Redis
     */
    setupEventListeners() {
        this.redis.on('connect', () => {
            this.isConnected = true;
            logger_1.default.info('Redis connected successfully');
        });
        this.redis.on('error', (error) => {
            this.isConnected = false;
            logger_1.default.error('Redis connection error:', error);
        });
        this.redis.on('close', () => {
            this.isConnected = false;
            logger_1.default.warn('Redis connection closed');
        });
        this.redis.on('reconnecting', () => {
            logger_1.default.info('Redis reconnecting...');
        });
    }
    /**
     * Conecta ao Redis
     */
    async connect() {
        try {
            await this.redis.connect();
        }
        catch (error) {
            logger_1.default.error('Failed to connect to Redis:', error);
            throw error;
        }
    }
    /**
     * Desconecta do Redis
     */
    async disconnect() {
        try {
            await this.redis.disconnect();
            this.isConnected = false;
        }
        catch (error) {
            logger_1.default.error('Failed to disconnect from Redis:', error);
        }
    }
    /**
     * Verifica se o Redis está conectado
     */
    isRedisConnected() {
        return this.isConnected && this.redis.status === 'ready';
    }
    /**
     * Define um valor no cache
     * @param key - Chave do cache
     * @param value - Valor a ser armazenado
     * @param ttl - Tempo de vida em segundos (opcional)
     */
    async set(key, value, ttl) {
        try {
            if (!this.isRedisConnected()) {
                logger_1.default.warn('Redis not connected, skipping cache set');
                return;
            }
            const serializedValue = JSON.stringify(value);
            const cacheTtl = ttl || config_1.config.cache.ttl;
            await this.redis.setex(key, cacheTtl, serializedValue);
            logger_1.default.debug(`Cache set: ${key} (TTL: ${cacheTtl}s)`);
        }
        catch (error) {
            logger_1.default.error(`Failed to set cache for key ${key}:`, error);
        }
    }
    /**
     * Obtém um valor do cache
     * @param key - Chave do cache
     * @returns Valor do cache ou null se não encontrado
     */
    async get(key) {
        try {
            if (!this.isRedisConnected()) {
                logger_1.default.warn('Redis not connected, skipping cache get');
                return null;
            }
            const value = await this.redis.get(key);
            if (!value) {
                return null;
            }
            const parsedValue = JSON.parse(value);
            logger_1.default.debug(`Cache hit: ${key}`);
            return parsedValue;
        }
        catch (error) {
            logger_1.default.error(`Failed to get cache for key ${key}:`, error);
            return null;
        }
    }
    /**
     * Remove um valor do cache
     * @param key - Chave do cache
     */
    async del(key) {
        try {
            if (!this.isRedisConnected()) {
                logger_1.default.warn('Redis not connected, skipping cache delete');
                return;
            }
            await this.redis.del(key);
            logger_1.default.debug(`Cache deleted: ${key}`);
        }
        catch (error) {
            logger_1.default.error(`Failed to delete cache for key ${key}:`, error);
        }
    }
    /**
     * Remove múltiplas chaves do cache
     * @param keys - Array de chaves do cache
     */
    async delMany(keys) {
        try {
            if (!this.isRedisConnected() || keys.length === 0) {
                return;
            }
            await this.redis.del(...keys);
            logger_1.default.debug(`Cache deleted: ${keys.join(', ')}`);
        }
        catch (error) {
            logger_1.default.error(`Failed to delete cache for keys ${keys.join(', ')}:`, error);
        }
    }
    /**
     * Remove todas as chaves que correspondem ao padrão
     * @param pattern - Padrão das chaves (ex: 'user:*')
     */
    async delPattern(pattern) {
        try {
            if (!this.isRedisConnected()) {
                return;
            }
            const keys = await this.redis.keys(pattern);
            if (keys.length > 0) {
                await this.redis.del(...keys);
                logger_1.default.debug(`Cache pattern deleted: ${pattern} (${keys.length} keys)`);
            }
        }
        catch (error) {
            logger_1.default.error(`Failed to delete cache pattern ${pattern}:`, error);
        }
    }
    /**
     * Verifica se uma chave existe no cache
     * @param key - Chave do cache
     * @returns True se a chave existe
     */
    async exists(key) {
        try {
            if (!this.isRedisConnected()) {
                return false;
            }
            const result = await this.redis.exists(key);
            return result === 1;
        }
        catch (error) {
            logger_1.default.error(`Failed to check cache existence for key ${key}:`, error);
            return false;
        }
    }
    /**
     * Define o tempo de vida de uma chave
     * @param key - Chave do cache
     * @param ttl - Tempo de vida em segundos
     */
    async expire(key, ttl) {
        try {
            if (!this.isRedisConnected()) {
                return;
            }
            await this.redis.expire(key, ttl);
            logger_1.default.debug(`Cache TTL set: ${key} (${ttl}s)`);
        }
        catch (error) {
            logger_1.default.error(`Failed to set TTL for key ${key}:`, error);
        }
    }
    /**
     * Obtém o tempo de vida restante de uma chave
     * @param key - Chave do cache
     * @returns Tempo de vida em segundos (-1 se não tem TTL, -2 se não existe)
     */
    async ttl(key) {
        try {
            if (!this.isRedisConnected()) {
                return -2;
            }
            return await this.redis.ttl(key);
        }
        catch (error) {
            logger_1.default.error(`Failed to get TTL for key ${key}:`, error);
            return -2;
        }
    }
    /**
     * Limpa todo o cache
     */
    async flush() {
        try {
            if (!this.isRedisConnected()) {
                return;
            }
            await this.redis.flushdb();
            logger_1.default.info('Cache flushed');
        }
        catch (error) {
            logger_1.default.error('Failed to flush cache:', error);
        }
    }
    /**
     * Obtém informações sobre o Redis
     */
    async info() {
        try {
            if (!this.isRedisConnected()) {
                return null;
            }
            const info = await this.redis.info();
            return info;
        }
        catch (error) {
            logger_1.default.error('Failed to get Redis info:', error);
            return null;
        }
    }
}
exports.CacheService = CacheService;
// Instância singleton do serviço de cache
exports.cacheService = new CacheService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
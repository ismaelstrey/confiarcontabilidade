36864c95b9b8680d5f11f1ebacaee89a
"use strict";

/* istanbul ignore next */
function cov_2ll3lefw2d() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\contactController.ts";
  var hash = "732ffd276ee2f7520f8702afb66c61d0d69d6fd9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\contactController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 35
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 60
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "7": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "8": {
        start: {
          line: 19,
          column: 61
        },
        end: {
          line: 19,
          column: 69
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 27,
          column: 13
        }
      },
      "10": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 25,
          column: 19
        }
      },
      "11": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 23
        }
      },
      "12": {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 59
        }
      },
      "13": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 36,
          column: 13
        }
      },
      "14": {
        start: {
          line: 31,
          column: 16
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "15": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 23
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 44,
          column: 13
        }
      },
      "17": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 42,
          column: 19
        }
      },
      "18": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 23
        }
      },
      "19": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "20": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 49,
          column: 19
        }
      },
      "21": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 23
        }
      },
      "22": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "23": {
        start: {
          line: 54,
          column: 35
        },
        end: {
          line: 54,
          column: 60
        }
      },
      "24": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 61,
          column: 17
        }
      },
      "25": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 59,
          column: 23
        }
      },
      "26": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 27
        }
      },
      "27": {
        start: {
          line: 64,
          column: 31
        },
        end: {
          line: 64,
          column: 68
        }
      },
      "28": {
        start: {
          line: 65,
          column: 35
        },
        end: {
          line: 72,
          column: 14
        }
      },
      "29": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "30": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "31": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 23
        }
      },
      "32": {
        start: {
          line: 81,
          column: 28
        },
        end: {
          line: 90,
          column: 14
        }
      },
      "33": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 96,
          column: 15
        }
      },
      "34": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "35": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 71
        }
      },
      "36": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "37": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "38": {
        start: {
          line: 119,
          column: 121
        },
        end: {
          line: 119,
          column: 130
        }
      },
      "39": {
        start: {
          line: 120,
          column: 25
        },
        end: {
          line: 120,
          column: 59
        }
      },
      "40": {
        start: {
          line: 121,
          column: 25
        },
        end: {
          line: 121,
          column: 38
        }
      },
      "41": {
        start: {
          line: 123,
          column: 26
        },
        end: {
          line: 123,
          column: 28
        }
      },
      "42": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "43": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 130,
          column: 18
        }
      },
      "44": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "45": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 38
        }
      },
      "46": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "47": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 37
        }
      },
      "48": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 139,
          column: 17
        }
      },
      "49": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 61
        }
      },
      "50": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 144,
          column: 17
        }
      },
      "51": {
        start: {
          line: 141,
          column: 36
        },
        end: {
          line: 141,
          column: 52
        }
      },
      "52": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 54
        }
      },
      "53": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 50
        }
      },
      "54": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 147,
          column: 30
        }
      },
      "55": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 40
        }
      },
      "56": {
        start: {
          line: 150,
          column: 38
        },
        end: {
          line: 158,
          column: 14
        }
      },
      "57": {
        start: {
          line: 159,
          column: 31
        },
        end: {
          line: 159,
          column: 54
        }
      },
      "58": {
        start: {
          line: 161,
          column: 26
        },
        end: {
          line: 164,
          column: 14
        }
      },
      "59": {
        start: {
          line: 165,
          column: 31
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "60": {
        start: {
          line: 167,
          column: 41
        },
        end: {
          line: 167,
          column: 63
        }
      },
      "61": {
        start: {
          line: 168,
          column: 44
        },
        end: {
          line: 168,
          column: 70
        }
      },
      "62": {
        start: {
          line: 169,
          column: 42
        },
        end: {
          line: 169,
          column: 65
        }
      },
      "63": {
        start: {
          line: 170,
          column: 40
        },
        end: {
          line: 170,
          column: 61
        }
      },
      "64": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "65": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 73
        }
      },
      "66": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 194,
          column: 15
        }
      },
      "67": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 234,
          column: 9
        }
      },
      "68": {
        start: {
          line: 202,
          column: 27
        },
        end: {
          line: 202,
          column: 37
        }
      },
      "69": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "70": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 208,
          column: 19
        }
      },
      "71": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 23
        }
      },
      "72": {
        start: {
          line: 211,
          column: 28
        },
        end: {
          line: 213,
          column: 14
        }
      },
      "73": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "74": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 218,
          column: 19
        }
      },
      "75": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 23
        }
      },
      "76": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 226,
          column: 15
        }
      },
      "77": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 98
        }
      },
      "78": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 233,
          column: 15
        }
      },
      "79": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 303,
          column: 9
        }
      },
      "80": {
        start: {
          line: 242,
          column: 27
        },
        end: {
          line: 242,
          column: 37
        }
      },
      "81": {
        start: {
          line: 243,
          column: 31
        },
        end: {
          line: 243,
          column: 39
        }
      },
      "82": {
        start: {
          line: 245,
          column: 34
        },
        end: {
          line: 245,
          column: 82
        }
      },
      "83": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "84": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 250,
          column: 19
        }
      },
      "85": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 23
        }
      },
      "86": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 259,
          column: 13
        }
      },
      "87": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 257,
          column: 19
        }
      },
      "88": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 23
        }
      },
      "89": {
        start: {
          line: 261,
          column: 36
        },
        end: {
          line: 263,
          column: 14
        }
      },
      "90": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "91": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 268,
          column: 19
        }
      },
      "92": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 23
        }
      },
      "93": {
        start: {
          line: 272,
          column: 35
        },
        end: {
          line: 278,
          column: 14
        }
      },
      "94": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 284,
          column: 15
        }
      },
      "95": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 295,
          column: 15
        }
      },
      "96": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 82
        }
      },
      "97": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 302,
          column: 15
        }
      },
      "98": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "99": {
        start: {
          line: 310,
          column: 27
        },
        end: {
          line: 310,
          column: 37
        }
      },
      "100": {
        start: {
          line: 311,
          column: 32
        },
        end: {
          line: 311,
          column: 40
        }
      },
      "101": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 318,
          column: 13
        }
      },
      "102": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 316,
          column: 19
        }
      },
      "103": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 23
        }
      },
      "104": {
        start: {
          line: 319,
          column: 28
        },
        end: {
          line: 321,
          column: 14
        }
      },
      "105": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "106": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 326,
          column: 19
        }
      },
      "107": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 23
        }
      },
      "108": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "109": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 333,
          column: 19
        }
      },
      "110": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 23
        }
      },
      "111": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 341,
          column: 15
        }
      },
      "112": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 346,
          column: 15
        }
      },
      "113": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 350,
          column: 15
        }
      },
      "114": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 108
        }
      },
      "115": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 357,
          column: 15
        }
      },
      "116": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "117": {
        start: {
          line: 365,
          column: 35
        },
        end: {
          line: 365,
          column: 43
        }
      },
      "118": {
        start: {
          line: 366,
          column: 32
        },
        end: {
          line: 366,
          column: 40
        }
      },
      "119": {
        start: {
          line: 367,
          column: 12
        },
        end: {
          line: 373,
          column: 13
        }
      },
      "120": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 371,
          column: 19
        }
      },
      "121": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 23
        }
      },
      "122": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 380,
          column: 13
        }
      },
      "123": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 378,
          column: 19
        }
      },
      "124": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 23
        }
      },
      "125": {
        start: {
          line: 381,
          column: 27
        },
        end: {
          line: 389,
          column: 14
        }
      },
      "126": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 394,
          column: 15
        }
      },
      "127": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 399,
          column: 15
        }
      },
      "128": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 94
        }
      },
      "129": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 406,
          column: 15
        }
      },
      "130": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 484,
          column: 9
        }
      },
      "131": {
        start: {
          line: 414,
          column: 27
        },
        end: {
          line: 414,
          column: 37
        }
      },
      "132": {
        start: {
          line: 415,
          column: 32
        },
        end: {
          line: 415,
          column: 40
        }
      },
      "133": {
        start: {
          line: 416,
          column: 32
        },
        end: {
          line: 416,
          column: 40
        }
      },
      "134": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 423,
          column: 13
        }
      },
      "135": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 421,
          column: 19
        }
      },
      "136": {
        start: {
          line: 422,
          column: 16
        },
        end: {
          line: 422,
          column: 23
        }
      },
      "137": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 430,
          column: 13
        }
      },
      "138": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 428,
          column: 19
        }
      },
      "139": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 429,
          column: 23
        }
      },
      "140": {
        start: {
          line: 431,
          column: 12
        },
        end: {
          line: 437,
          column: 13
        }
      },
      "141": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 435,
          column: 19
        }
      },
      "142": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 436,
          column: 23
        }
      },
      "143": {
        start: {
          line: 438,
          column: 28
        },
        end: {
          line: 440,
          column: 14
        }
      },
      "144": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 447,
          column: 13
        }
      },
      "145": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 445,
          column: 19
        }
      },
      "146": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 23
        }
      },
      "147": {
        start: {
          line: 449,
          column: 35
        },
        end: {
          line: 454,
          column: 14
        }
      },
      "148": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 460,
          column: 15
        }
      },
      "149": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 476,
          column: 15
        }
      },
      "150": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 101
        }
      },
      "151": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 483,
          column: 15
        }
      },
      "152": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 531,
          column: 9
        }
      },
      "153": {
        start: {
          line: 491,
          column: 27
        },
        end: {
          line: 491,
          column: 37
        }
      },
      "154": {
        start: {
          line: 492,
          column: 32
        },
        end: {
          line: 492,
          column: 40
        }
      },
      "155": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 499,
          column: 13
        }
      },
      "156": {
        start: {
          line: 494,
          column: 16
        },
        end: {
          line: 497,
          column: 19
        }
      },
      "157": {
        start: {
          line: 498,
          column: 16
        },
        end: {
          line: 498,
          column: 23
        }
      },
      "158": {
        start: {
          line: 500,
          column: 28
        },
        end: {
          line: 502,
          column: 14
        }
      },
      "159": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 509,
          column: 13
        }
      },
      "160": {
        start: {
          line: 504,
          column: 16
        },
        end: {
          line: 507,
          column: 19
        }
      },
      "161": {
        start: {
          line: 508,
          column: 16
        },
        end: {
          line: 508,
          column: 23
        }
      },
      "162": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 512,
          column: 15
        }
      },
      "163": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 519,
          column: 15
        }
      },
      "164": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 523,
          column: 15
        }
      },
      "165": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 526,
          column: 99
        }
      },
      "166": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 530,
          column: 15
        }
      },
      "167": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 576,
          column: 9
        }
      },
      "168": {
        start: {
          line: 538,
          column: 35
        },
        end: {
          line: 538,
          column: 43
        }
      },
      "169": {
        start: {
          line: 539,
          column: 32
        },
        end: {
          line: 539,
          column: 40
        }
      },
      "170": {
        start: {
          line: 540,
          column: 12
        },
        end: {
          line: 546,
          column: 13
        }
      },
      "171": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 544,
          column: 19
        }
      },
      "172": {
        start: {
          line: 545,
          column: 16
        },
        end: {
          line: 545,
          column: 23
        }
      },
      "173": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 553,
          column: 13
        }
      },
      "174": {
        start: {
          line: 548,
          column: 16
        },
        end: {
          line: 551,
          column: 19
        }
      },
      "175": {
        start: {
          line: 552,
          column: 16
        },
        end: {
          line: 552,
          column: 23
        }
      },
      "176": {
        start: {
          line: 554,
          column: 27
        },
        end: {
          line: 558,
          column: 14
        }
      },
      "177": {
        start: {
          line: 560,
          column: 12
        },
        end: {
          line: 563,
          column: 15
        }
      },
      "178": {
        start: {
          line: 564,
          column: 12
        },
        end: {
          line: 568,
          column: 15
        }
      },
      "179": {
        start: {
          line: 571,
          column: 12
        },
        end: {
          line: 571,
          column: 84
        }
      },
      "180": {
        start: {
          line: 572,
          column: 12
        },
        end: {
          line: 575,
          column: 15
        }
      },
      "181": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 646,
          column: 9
        }
      },
      "182": {
        start: {
          line: 583,
          column: 38
        },
        end: {
          line: 583,
          column: 47
        }
      },
      "183": {
        start: {
          line: 584,
          column: 31
        },
        end: {
          line: 584,
          column: 45
        }
      },
      "184": {
        start: {
          line: 585,
          column: 30
        },
        end: {
          line: 585,
          column: 40
        }
      },
      "185": {
        start: {
          line: 586,
          column: 12
        },
        end: {
          line: 586,
          column: 64
        }
      },
      "186": {
        start: {
          line: 587,
          column: 58
        },
        end: {
          line: 611,
          column: 14
        }
      },
      "187": {
        start: {
          line: 612,
          column: 26
        },
        end: {
          line: 612,
          column: 54
        }
      },
      "188": {
        start: {
          line: 613,
          column: 34
        },
        end: {
          line: 615,
          column: 14
        }
      },
      "189": {
        start: {
          line: 616,
          column: 31
        },
        end: {
          line: 633,
          column: 13
        }
      },
      "190": {
        start: {
          line: 619,
          column: 50
        },
        end: {
          line: 619,
          column: 72
        }
      },
      "191": {
        start: {
          line: 620,
          column: 53
        },
        end: {
          line: 620,
          column: 79
        }
      },
      "192": {
        start: {
          line: 621,
          column: 51
        },
        end: {
          line: 621,
          column: 74
        }
      },
      "193": {
        start: {
          line: 622,
          column: 49
        },
        end: {
          line: 622,
          column: 70
        }
      },
      "194": {
        start: {
          line: 627,
          column: 51
        },
        end: {
          line: 627,
          column: 73
        }
      },
      "195": {
        start: {
          line: 628,
          column: 54
        },
        end: {
          line: 628,
          column: 80
        }
      },
      "196": {
        start: {
          line: 629,
          column: 52
        },
        end: {
          line: 629,
          column: 75
        }
      },
      "197": {
        start: {
          line: 630,
          column: 50
        },
        end: {
          line: 630,
          column: 71
        }
      },
      "198": {
        start: {
          line: 634,
          column: 12
        },
        end: {
          line: 638,
          column: 15
        }
      },
      "199": {
        start: {
          line: 641,
          column: 12
        },
        end: {
          line: 641,
          column: 88
        }
      },
      "200": {
        start: {
          line: 642,
          column: 12
        },
        end: {
          line: 645,
          column: 15
        }
      },
      "201": {
        start: {
          line: 649,
          column: 0
        },
        end: {
          line: 649,
          column: 46
        }
      },
      "202": {
        start: {
          line: 650,
          column: 0
        },
        end: {
          line: 650,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 39
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 117
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 167,
            column: 36
          },
          end: {
            line: 167,
            column: 37
          }
        },
        loc: {
          start: {
            line: 167,
            column: 41
          },
          end: {
            line: 167,
            column: 63
          }
        },
        line: 167
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 168,
            column: 39
          },
          end: {
            line: 168,
            column: 40
          }
        },
        loc: {
          start: {
            line: 168,
            column: 44
          },
          end: {
            line: 168,
            column: 70
          }
        },
        line: 168
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 169,
            column: 37
          },
          end: {
            line: 169,
            column: 38
          }
        },
        loc: {
          start: {
            line: 169,
            column: 42
          },
          end: {
            line: 169,
            column: 65
          }
        },
        line: 169
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 170,
            column: 35
          },
          end: {
            line: 170,
            column: 36
          }
        },
        loc: {
          start: {
            line: 170,
            column: 40
          },
          end: {
            line: 170,
            column: 61
          }
        },
        line: 170
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 200,
            column: 4
          },
          end: {
            line: 200,
            column: 5
          }
        },
        loc: {
          start: {
            line: 200,
            column: 42
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 200
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 47
          },
          end: {
            line: 304,
            column: 5
          }
        },
        line: 240
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 38
          },
          end: {
            line: 359,
            column: 5
          }
        },
        line: 308
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 363,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        loc: {
          start: {
            line: 363,
            column: 46
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 363
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 42
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 412
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 489,
            column: 4
          },
          end: {
            line: 489,
            column: 5
          }
        },
        loc: {
          start: {
            line: 489,
            column: 41
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 489
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 536,
            column: 4
          },
          end: {
            line: 536,
            column: 5
          }
        },
        loc: {
          start: {
            line: 536,
            column: 50
          },
          end: {
            line: 577,
            column: 5
          }
        },
        line: 536
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 581,
            column: 4
          },
          end: {
            line: 581,
            column: 5
          }
        },
        loc: {
          start: {
            line: 581,
            column: 43
          },
          end: {
            line: 647,
            column: 5
          }
        },
        line: 581
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 619,
            column: 45
          },
          end: {
            line: 619,
            column: 46
          }
        },
        loc: {
          start: {
            line: 619,
            column: 50
          },
          end: {
            line: 619,
            column: 72
          }
        },
        line: 619
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 620,
            column: 48
          },
          end: {
            line: 620,
            column: 49
          }
        },
        loc: {
          start: {
            line: 620,
            column: 53
          },
          end: {
            line: 620,
            column: 79
          }
        },
        line: 620
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 621,
            column: 46
          },
          end: {
            line: 621,
            column: 47
          }
        },
        loc: {
          start: {
            line: 621,
            column: 51
          },
          end: {
            line: 621,
            column: 74
          }
        },
        line: 621
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 622,
            column: 44
          },
          end: {
            line: 622,
            column: 45
          }
        },
        loc: {
          start: {
            line: 622,
            column: 49
          },
          end: {
            line: 622,
            column: 70
          }
        },
        line: 622
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 627,
            column: 46
          },
          end: {
            line: 627,
            column: 47
          }
        },
        loc: {
          start: {
            line: 627,
            column: 51
          },
          end: {
            line: 627,
            column: 73
          }
        },
        line: 627
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 628,
            column: 49
          },
          end: {
            line: 628,
            column: 50
          }
        },
        loc: {
          start: {
            line: 628,
            column: 54
          },
          end: {
            line: 628,
            column: 80
          }
        },
        line: 628
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 629,
            column: 47
          },
          end: {
            line: 629,
            column: 48
          }
        },
        loc: {
          start: {
            line: 629,
            column: 52
          },
          end: {
            line: 629,
            column: 75
          }
        },
        line: 629
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 630,
            column: 45
          },
          end: {
            line: 630,
            column: 46
          }
        },
        loc: {
          start: {
            line: 630,
            column: 50
          },
          end: {
            line: 630,
            column: 71
          }
        },
        line: 630
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "4": {
        loc: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 21
          }
        }, {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 21,
            column: 31
          }
        }, {
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 21,
            column: 43
          }
        }, {
          start: {
            line: 21,
            column: 47
          },
          end: {
            line: 21,
            column: 55
          }
        }],
        line: 21
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "7": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "8": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "9": {
        loc: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 61,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 61,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "10": {
        loc: {
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 12
          },
          end: {
            line: 79,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "11": {
        loc: {
          start: {
            line: 85,
            column: 27
          },
          end: {
            line: 85,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 85,
            column: 27
          },
          end: {
            line: 85,
            column: 40
          }
        }, {
          start: {
            line: 85,
            column: 44
          },
          end: {
            line: 85,
            column: 48
          }
        }],
        line: 85
      },
      "12": {
        loc: {
          start: {
            line: 119,
            column: 54
          },
          end: {
            line: 119,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 119,
            column: 61
          },
          end: {
            line: 119,
            column: 62
          }
        }],
        line: 119
      },
      "13": {
        loc: {
          start: {
            line: 119,
            column: 64
          },
          end: {
            line: 119,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 119,
            column: 72
          },
          end: {
            line: 119,
            column: 74
          }
        }],
        line: 119
      },
      "14": {
        loc: {
          start: {
            line: 119,
            column: 76
          },
          end: {
            line: 119,
            column: 96
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 119,
            column: 85
          },
          end: {
            line: 119,
            column: 96
          }
        }],
        line: 119
      },
      "15": {
        loc: {
          start: {
            line: 119,
            column: 98
          },
          end: {
            line: 119,
            column: 116
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 119,
            column: 110
          },
          end: {
            line: 119,
            column: 116
          }
        }],
        line: 119
      },
      "16": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "17": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "18": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "19": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 135,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 135,
            column: 24
          }
        }, {
          start: {
            line: 135,
            column: 28
          },
          end: {
            line: 135,
            column: 34
          }
        }],
        line: 135
      },
      "20": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "21": {
        loc: {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 144,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 144,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "22": {
        loc: {
          start: {
            line: 167,
            column: 25
          },
          end: {
            line: 167,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 25
          },
          end: {
            line: 167,
            column: 72
          }
        }, {
          start: {
            line: 167,
            column: 76
          },
          end: {
            line: 167,
            column: 77
          }
        }],
        line: 167
      },
      "23": {
        loc: {
          start: {
            line: 168,
            column: 28
          },
          end: {
            line: 168,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 28
          },
          end: {
            line: 168,
            column: 79
          }
        }, {
          start: {
            line: 168,
            column: 83
          },
          end: {
            line: 168,
            column: 84
          }
        }],
        line: 168
      },
      "24": {
        loc: {
          start: {
            line: 169,
            column: 26
          },
          end: {
            line: 169,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 169,
            column: 26
          },
          end: {
            line: 169,
            column: 74
          }
        }, {
          start: {
            line: 169,
            column: 78
          },
          end: {
            line: 169,
            column: 79
          }
        }],
        line: 169
      },
      "25": {
        loc: {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 70
          }
        }, {
          start: {
            line: 170,
            column: 74
          },
          end: {
            line: 170,
            column: 75
          }
        }],
        line: 170
      },
      "26": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 210,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "27": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "28": {
        loc: {
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "29": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 23
          }
        }, {
          start: {
            line: 246,
            column: 27
          },
          end: {
            line: 246,
            column: 58
          }
        }],
        line: 246
      },
      "30": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "31": {
        loc: {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 270,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "32": {
        loc: {
          start: {
            line: 283,
            column: 27
          },
          end: {
            line: 283,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 27
          },
          end: {
            line: 283,
            column: 39
          }
        }, {
          start: {
            line: 283,
            column: 43
          },
          end: {
            line: 283,
            column: 51
          }
        }],
        line: 283
      },
      "33": {
        loc: {
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 318,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "34": {
        loc: {
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "35": {
        loc: {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "36": {
        loc: {
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 373,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      },
      "37": {
        loc: {
          start: {
            line: 367,
            column: 16
          },
          end: {
            line: 367,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 16
          },
          end: {
            line: 367,
            column: 27
          }
        }, {
          start: {
            line: 367,
            column: 31
          },
          end: {
            line: 367,
            column: 57
          }
        }, {
          start: {
            line: 367,
            column: 61
          },
          end: {
            line: 367,
            column: 84
          }
        }],
        line: 367
      },
      "38": {
        loc: {
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 380,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "39": {
        loc: {
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 423,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 423,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "40": {
        loc: {
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 430,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 430,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "41": {
        loc: {
          start: {
            line: 431,
            column: 12
          },
          end: {
            line: 437,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 431,
            column: 12
          },
          end: {
            line: 437,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 431
      },
      "42": {
        loc: {
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "43": {
        loc: {
          start: {
            line: 493,
            column: 12
          },
          end: {
            line: 499,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 12
          },
          end: {
            line: 499,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 493
      },
      "44": {
        loc: {
          start: {
            line: 503,
            column: 12
          },
          end: {
            line: 509,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 12
          },
          end: {
            line: 509,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "45": {
        loc: {
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 546,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 546,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 540
      },
      "46": {
        loc: {
          start: {
            line: 540,
            column: 16
          },
          end: {
            line: 540,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 540,
            column: 16
          },
          end: {
            line: 540,
            column: 27
          }
        }, {
          start: {
            line: 540,
            column: 31
          },
          end: {
            line: 540,
            column: 57
          }
        }, {
          start: {
            line: 540,
            column: 61
          },
          end: {
            line: 540,
            column: 84
          }
        }],
        line: 540
      },
      "47": {
        loc: {
          start: {
            line: 547,
            column: 12
          },
          end: {
            line: 553,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 547,
            column: 12
          },
          end: {
            line: 553,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 547
      },
      "48": {
        loc: {
          start: {
            line: 583,
            column: 20
          },
          end: {
            line: 583,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 583,
            column: 29
          },
          end: {
            line: 583,
            column: 33
          }
        }],
        line: 583
      },
      "49": {
        loc: {
          start: {
            line: 619,
            column: 29
          },
          end: {
            line: 619,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 619,
            column: 29
          },
          end: {
            line: 619,
            column: 81
          }
        }, {
          start: {
            line: 619,
            column: 85
          },
          end: {
            line: 619,
            column: 86
          }
        }],
        line: 619
      },
      "50": {
        loc: {
          start: {
            line: 620,
            column: 32
          },
          end: {
            line: 620,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 620,
            column: 32
          },
          end: {
            line: 620,
            column: 88
          }
        }, {
          start: {
            line: 620,
            column: 92
          },
          end: {
            line: 620,
            column: 93
          }
        }],
        line: 620
      },
      "51": {
        loc: {
          start: {
            line: 621,
            column: 30
          },
          end: {
            line: 621,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 621,
            column: 30
          },
          end: {
            line: 621,
            column: 83
          }
        }, {
          start: {
            line: 621,
            column: 87
          },
          end: {
            line: 621,
            column: 88
          }
        }],
        line: 621
      },
      "52": {
        loc: {
          start: {
            line: 622,
            column: 28
          },
          end: {
            line: 622,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 622,
            column: 28
          },
          end: {
            line: 622,
            column: 79
          }
        }, {
          start: {
            line: 622,
            column: 83
          },
          end: {
            line: 622,
            column: 84
          }
        }],
        line: 622
      },
      "53": {
        loc: {
          start: {
            line: 627,
            column: 29
          },
          end: {
            line: 627,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 627,
            column: 29
          },
          end: {
            line: 627,
            column: 82
          }
        }, {
          start: {
            line: 627,
            column: 86
          },
          end: {
            line: 627,
            column: 87
          }
        }],
        line: 627
      },
      "54": {
        loc: {
          start: {
            line: 628,
            column: 32
          },
          end: {
            line: 628,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 628,
            column: 32
          },
          end: {
            line: 628,
            column: 89
          }
        }, {
          start: {
            line: 628,
            column: 93
          },
          end: {
            line: 628,
            column: 94
          }
        }],
        line: 628
      },
      "55": {
        loc: {
          start: {
            line: 629,
            column: 30
          },
          end: {
            line: 629,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 629,
            column: 30
          },
          end: {
            line: 629,
            column: 84
          }
        }, {
          start: {
            line: 629,
            column: 88
          },
          end: {
            line: 629,
            column: 89
          }
        }],
        line: 629
      },
      "56": {
        loc: {
          start: {
            line: 630,
            column: 28
          },
          end: {
            line: 630,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 630,
            column: 28
          },
          end: {
            line: 630,
            column: 80
          }
        }, {
          start: {
            line: 630,
            column: 84
          },
          end: {
            line: 630,
            column: 85
          }
        }],
        line: 630
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0],
      "14": [0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0, 0],
      "47": [0, 0],
      "48": [0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\contactController.ts",
      mappings: "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",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\contactController.ts"],
      sourcesContent: ["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de contato\r\ninterface ContactData {\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  subject: string;\r\n  message: string;\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface ContactFilters {\r\n  search?: string;\r\n  status?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'name' | 'subject';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n// Interface para resposta de contato\r\ninterface ContactReplyData {\r\n  message: string;\r\n}\r\n\r\n/**\r\n * Controller respons\xE1vel pelo gerenciamento de contatos\r\n */\r\nexport class ContactController {\r\n  /**\r\n   * Cria um novo contato (formul\xE1rio p\xFAblico)\r\n   */\r\n  static async createContact(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { name, email, phone, subject, message }: ContactData = req.body;\r\n\r\n      // Valida\xE7\xF5es b\xE1sicas\r\n      if (!name || !email || !subject || !message) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nome, email, assunto e mensagem s\xE3o obrigat\xF3rios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar formato do email\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(email)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Formato de email inv\xE1lido'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar tamanho da mensagem\r\n      if (message.length < 10) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A mensagem deve ter pelo menos 10 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (message.length > 5000) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A mensagem n\xE3o pode exceder 5000 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validar telefone se fornecido\r\n      if (phone) {\r\n        const phoneRegex = /^[\\d\\s\\(\\)\\+\\-\\.]{10,}$/;\r\n        if (!phoneRegex.test(phone.replace(/\\s/g, ''))) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Formato de telefone inv\xE1lido'\r\n          });\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Verificar rate limiting (m\xE1ximo 3 contatos por email por hora)\r\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\r\n      const recentContacts = await prisma.contact.count({\r\n        where: {\r\n          email,\r\n          createdAt: {\r\n            gte: oneHourAgo\r\n          }\r\n        }\r\n      });\r\n\r\n      if (recentContacts >= 3) {\r\n        res.status(429).json({\r\n          success: false,\r\n          message: 'Muitas mensagens enviadas. Tente novamente em uma hora.'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Criar contato\r\n      const contact = await prisma.contact.create({\r\n        data: {\r\n          name: name.trim(),\r\n          email: email.toLowerCase().trim(),\r\n          phone: phone?.trim() || null,\r\n          subject: subject.trim(),\r\n          message: message.trim(),\r\n          status: 'PENDING'\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Novo contato recebido', {\r\n        contactId: contact.id,\r\n        email: contact.email,\r\n        subject: contact.subject\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Mensagem enviada com sucesso! Entraremos em contato em breve.',\r\n        data: {\r\n          id: contact.id,\r\n          createdAt: contact.createdAt\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar contato', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor. Tente novamente mais tarde.'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista todos os contatos com pagina\xE7\xE3o e filtros (admin)\r\n   */\r\n  static async getContacts(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        search,\r\n        status,\r\n        dateFrom,\r\n        dateTo,\r\n        page = 1,\r\n        limit = 10,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: ContactFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { name: { contains: search, mode: 'insensitive' } },\r\n          { email: { contains: search, mode: 'insensitive' } },\r\n          { subject: { contains: search, mode: 'insensitive' } },\r\n          { message: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (status) {\r\n        where.status = status;\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.createdAt = {};\r\n        if (dateFrom) {\r\n          where.createdAt.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.createdAt.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Definir ordena\xE7\xE3o\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar contatos\r\n      const [contacts, total] = await Promise.all([\r\n        prisma.contact.findMany({\r\n          where,\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.contact.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      // Estat\xEDsticas\r\n      const stats = await prisma.contact.groupBy({\r\n        by: ['status'],\r\n        _count: true\r\n      });\r\n\r\n      const statistics = {\r\n        total,\r\n        pending: stats.find(s => s.status === 'PENDING')?._count || 0,\r\n        inProgress: stats.find(s => s.status === 'IN_PROGRESS')?._count || 0,\r\n        resolved: stats.find(s => s.status === 'RESOLVED')?._count || 0,\r\n        closed: stats.find(s => s.status === 'CLOSED')?._count || 0\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contatos listados com sucesso',\r\n        data: {\r\n          contacts,\r\n          statistics,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar contatos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um contato por ID (admin)\r\n   */\r\n  static async getContactById(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      // Removido markAsRead pois n\xE3o existe no modelo\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!contact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Funcionalidade de marcar como lido removida pois n\xE3o existe no modelo\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contato encontrado',\r\n        data: { contact }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar contato', { error, contactId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n/**\r\n   * Atualiza status do contato\r\n   */\r\n  static async updateContactStatus(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { status } = req.body;\r\n\r\n      // Validar status\r\n      const validStatuses = ['PENDING', 'IN_PROGRESS', 'RESOLVED', 'CLOSED'];\r\n      if (!status || !validStatuses.includes(status)) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Status deve ser: PENDING, IN_PROGRESS, RESOLVED ou CLOSED'\r\n        });\r\n        return;\r\n      }\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n      // Verificar se o contato existe\r\n      const existingContact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingContact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar status\r\n      const updatedContact = await prisma.contact.update({\r\n        where: { id },\r\n        data: {\r\n          status,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      logger.info('Status do contato atualizado', {\r\n        contactId: id,\r\n        oldStatus: existingContact.status,\r\n        newStatus: status,\r\n        updatedBy: req.user?.id || 'system'\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Status atualizado com sucesso',\r\n        data: {\r\n          contact: {\r\n            id: updatedContact.id,\r\n            status: updatedContact.status,\r\n            updatedAt: updatedContact.updatedAt\r\n          }\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar status do contato:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marca contato como lido\r\n   */\r\n  static async markAsRead(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!contact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (contact.status !== 'PENDING') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Contato j\xE1 foi processado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      await prisma.contact.update({\r\n        where: { id },\r\n        data: {\r\n          status: 'IN_PROGRESS'\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Contato marcado como lido', {\r\n        contactId: id,\r\n        readBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contato marcado como lido'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao marcar contato como lido', { error, contactId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marca m\xFAltiplos contatos como lidos (admin)\r\n   */\r\n  static async markMultipleAsRead(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { contactIds }: { contactIds: string[] } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!contactIds || !Array.isArray(contactIds) || contactIds.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Lista de IDs de contatos \xE9 obrigat\xF3ria'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (contactIds.length > 100) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'M\xE1ximo de 100 contatos por vez'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const result = await prisma.contact.updateMany({\r\n        where: {\r\n          id: { in: contactIds },\r\n          status: 'PENDING'\r\n        },\r\n        data: {\r\n          status: 'IN_PROGRESS'\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('M\xFAltiplos contatos marcados como lidos', {\r\n        count: result.count,\r\n        readBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${result.count} contatos marcados como lidos`,\r\n        data: { updatedCount: result.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao marcar m\xFAltiplos contatos como lidos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Responde a um contato (admin)\r\n   */\r\n  static async replyToContact(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { message }: ContactReplyData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!message) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Mensagem de resposta \xE9 obrigat\xF3ria'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (message.length < 10) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'A resposta deve ter pelo menos 10 caracteres'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!contact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar contato com resposta\r\n      const updatedContact = await prisma.contact.update({\r\n        where: { id },\r\n        data: {\r\n          status: 'RESOLVED'\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Resposta enviada para contato', {\r\n        contactId: id,\r\n        repliedBy: currentUser.id,\r\n        recipientEmail: contact.email\r\n      });\r\n\r\n      // TODO: Implementar envio de email real aqui\r\n      // await emailService.sendReply({\r\n      //   to: contact.email,\r\n      //   message: message,\r\n      //   originalMessage: contact.message\r\n      // });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Resposta enviada com sucesso',\r\n        data: {\r\n          contact: {\r\n            id: updatedContact.id,\r\n            status: updatedContact.status\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao responder contato', { error, contactId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um contato (admin)\r\n   */\r\n  static async deleteContact(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do contato \xE9 obrigat\xF3rio'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const contact = await prisma.contact.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!contact) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Contato n\xE3o encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      await prisma.contact.delete({\r\n        where: { id }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('Contato deletado', {\r\n        contactId: id,\r\n        email: contact.email,\r\n        subject: contact.subject,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Contato deletado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar contato', { error, contactId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove m\xFAltiplos contatos (admin)\r\n   */\r\n  static async deleteMultipleContacts(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { contactIds }: { contactIds: string[] } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!contactIds || !Array.isArray(contactIds) || contactIds.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Lista de IDs de contatos \xE9 obrigat\xF3ria'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (contactIds.length > 100) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'M\xE1ximo de 100 contatos por vez'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const result = await prisma.contact.deleteMany({\r\n        where: {\r\n          id: { in: contactIds }\r\n        }\r\n      });\r\n\r\n      // Log da a\xE7\xE3o\r\n      logger.info('M\xFAltiplos contatos deletados', {\r\n        count: result.count,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${result.count} contatos deletados com sucesso`,\r\n        data: { deletedCount: result.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar m\xFAltiplos contatos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obt\xE9m estat\xEDsticas de contatos (admin)\r\n   */\r\n  static async getContactStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const [totalStats, periodStats, dailyStats] = await Promise.all([\r\n        // Estat\xEDsticas gerais\r\n        prisma.contact.groupBy({\r\n          by: ['status'],\r\n          _count: true\r\n        }),\r\n        // Estat\xEDsticas do per\xEDodo\r\n        prisma.contact.groupBy({\r\n          by: ['status'],\r\n          where: {\r\n            createdAt: { gte: dateLimit }\r\n          },\r\n          _count: true\r\n        }),\r\n        // Estat\xEDsticas di\xE1rias dos \xFAltimos 7 dias\r\n        prisma.$queryRaw`\r\n          SELECT \r\n            DATE(createdAt) as date,\r\n            COUNT(*) as count\r\n          FROM Contact \r\n          WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n          GROUP BY DATE(createdAt)\r\n          ORDER BY date DESC\r\n        `\r\n      ]);\r\n\r\n      const total = await prisma.contact.count();\r\n      const totalInPeriod = await prisma.contact.count({\r\n        where: { createdAt: { gte: dateLimit } }\r\n      });\r\n\r\n      const statistics = {\r\n        total: {\r\n          all: total,\r\n          pending: totalStats.find(s => s.status === 'PENDING')?._count || 0,\r\n          inProgress: totalStats.find(s => s.status === 'IN_PROGRESS')?._count || 0,\r\n          resolved: totalStats.find(s => s.status === 'RESOLVED')?._count || 0,\r\n          closed: totalStats.find(s => s.status === 'CLOSED')?._count || 0\r\n        },\r\n        period: {\r\n          days: periodDays,\r\n          all: totalInPeriod,\r\n          pending: periodStats.find(s => s.status === 'PENDING')?._count || 0,\r\n          inProgress: periodStats.find(s => s.status === 'IN_PROGRESS')?._count || 0,\r\n          resolved: periodStats.find(s => s.status === 'RESOLVED')?._count || 0,\r\n          closed: periodStats.find(s => s.status === 'CLOSED')?._count || 0\r\n        },\r\n        daily: dailyStats\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estat\xEDsticas obtidas com sucesso',\r\n        data: { statistics }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estat\xEDsticas de contatos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default ContactController;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "732ffd276ee2f7520f8702afb66c61d0d69d6fd9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ll3lefw2d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ll3lefw2d();
var __importDefault =
/* istanbul ignore next */
(cov_2ll3lefw2d().s[0]++,
/* istanbul ignore next */
(cov_2ll3lefw2d().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2ll3lefw2d().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2ll3lefw2d().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2ll3lefw2d().f[0]++;
  cov_2ll3lefw2d().s[1]++;
  return /* istanbul ignore next */(cov_2ll3lefw2d().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2ll3lefw2d().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2ll3lefw2d().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2ll3lefw2d().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2ll3lefw2d().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ll3lefw2d().s[3]++;
exports.ContactController = void 0;
const client_1 =
/* istanbul ignore next */
(cov_2ll3lefw2d().s[4]++, require("@prisma/client"));
const logger_1 =
/* istanbul ignore next */
(cov_2ll3lefw2d().s[5]++, __importDefault(require("../utils/logger")));
const prisma =
/* istanbul ignore next */
(cov_2ll3lefw2d().s[6]++, new client_1.PrismaClient());
/**
 * Controller responsável pelo gerenciamento de contatos
 */
class ContactController {
  /**
   * Cria um novo contato (formulário público)
   */
  static async createContact(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[1]++;
    cov_2ll3lefw2d().s[7]++;
    try {
      const {
        name,
        email,
        phone,
        subject,
        message
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[8]++, req.body);
      // Validações básicas
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[9]++;
      if (
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[4][0]++, !name) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[4][1]++, !email) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[4][2]++, !subject) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[4][3]++, !message)) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[3][0]++;
        cov_2ll3lefw2d().s[10]++;
        res.status(400).json({
          success: false,
          message: 'Nome, email, assunto e mensagem são obrigatórios'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[11]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[3][1]++;
      }
      // Validar formato do email
      const emailRegex =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[12]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[13]++;
      if (!emailRegex.test(email)) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[5][0]++;
        cov_2ll3lefw2d().s[14]++;
        res.status(400).json({
          success: false,
          message: 'Formato de email inválido'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[15]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[5][1]++;
      }
      // Validar tamanho da mensagem
      cov_2ll3lefw2d().s[16]++;
      if (message.length < 10) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[6][0]++;
        cov_2ll3lefw2d().s[17]++;
        res.status(400).json({
          success: false,
          message: 'A mensagem deve ter pelo menos 10 caracteres'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[18]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[6][1]++;
      }
      cov_2ll3lefw2d().s[19]++;
      if (message.length > 5000) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[7][0]++;
        cov_2ll3lefw2d().s[20]++;
        res.status(400).json({
          success: false,
          message: 'A mensagem não pode exceder 5000 caracteres'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[21]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[7][1]++;
      }
      // Validar telefone se fornecido
      cov_2ll3lefw2d().s[22]++;
      if (phone) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[8][0]++;
        const phoneRegex =
        /* istanbul ignore next */
        (cov_2ll3lefw2d().s[23]++, /^[\d\s\(\)\+\-\.]{10,}$/);
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[24]++;
        if (!phoneRegex.test(phone.replace(/\s/g, ''))) {
          /* istanbul ignore next */
          cov_2ll3lefw2d().b[9][0]++;
          cov_2ll3lefw2d().s[25]++;
          res.status(400).json({
            success: false,
            message: 'Formato de telefone inválido'
          });
          /* istanbul ignore next */
          cov_2ll3lefw2d().s[26]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_2ll3lefw2d().b[9][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[8][1]++;
      }
      // Verificar rate limiting (máximo 3 contatos por email por hora)
      const oneHourAgo =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[27]++, new Date(Date.now() - 60 * 60 * 1000));
      const recentContacts =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[28]++, await prisma.contact.count({
        where: {
          email,
          createdAt: {
            gte: oneHourAgo
          }
        }
      }));
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[29]++;
      if (recentContacts >= 3) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[10][0]++;
        cov_2ll3lefw2d().s[30]++;
        res.status(429).json({
          success: false,
          message: 'Muitas mensagens enviadas. Tente novamente em uma hora.'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[31]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[10][1]++;
      }
      // Criar contato
      const contact =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[32]++, await prisma.contact.create({
        data: {
          name: name.trim(),
          email: email.toLowerCase().trim(),
          phone:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[11][0]++, phone?.trim()) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[11][1]++, null),
          subject: subject.trim(),
          message: message.trim(),
          status: 'PENDING'
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[33]++;
      logger_1.default.info('Novo contato recebido', {
        contactId: contact.id,
        email: contact.email,
        subject: contact.subject
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[34]++;
      res.status(201).json({
        success: true,
        message: 'Mensagem enviada com sucesso! Entraremos em contato em breve.',
        data: {
          id: contact.id,
          createdAt: contact.createdAt
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[35]++;
      logger_1.default.error('Erro ao criar contato', {
        error
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[36]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor. Tente novamente mais tarde.'
      });
    }
  }
  /**
   * Lista todos os contatos com paginação e filtros (admin)
   */
  static async getContacts(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[2]++;
    cov_2ll3lefw2d().s[37]++;
    try {
      const {
        search,
        status,
        dateFrom,
        dateTo,
        page =
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[12][0]++, 1),
        limit =
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[13][0]++, 10),
        sortBy =
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[14][0]++, 'createdAt'),
        sortOrder =
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[15][0]++, 'desc')
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[38]++, req.query);
      const skip =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[39]++, (Number(page) - 1) * Number(limit));
      const take =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[40]++, Number(limit));
      // Construir filtros
      const where =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[41]++, {});
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[42]++;
      if (search) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[16][0]++;
        cov_2ll3lefw2d().s[43]++;
        where.OR = [{
          name: {
            contains: search,
            mode: 'insensitive'
          }
        }, {
          email: {
            contains: search,
            mode: 'insensitive'
          }
        }, {
          subject: {
            contains: search,
            mode: 'insensitive'
          }
        }, {
          message: {
            contains: search,
            mode: 'insensitive'
          }
        }];
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[16][1]++;
      }
      cov_2ll3lefw2d().s[44]++;
      if (status) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[17][0]++;
        cov_2ll3lefw2d().s[45]++;
        where.status = status;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[17][1]++;
      }
      cov_2ll3lefw2d().s[46]++;
      if (
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[19][0]++, dateFrom) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[19][1]++, dateTo)) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[18][0]++;
        cov_2ll3lefw2d().s[47]++;
        where.createdAt = {};
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[48]++;
        if (dateFrom) {
          /* istanbul ignore next */
          cov_2ll3lefw2d().b[20][0]++;
          cov_2ll3lefw2d().s[49]++;
          where.createdAt.gte = new Date(dateFrom);
        } else
        /* istanbul ignore next */
        {
          cov_2ll3lefw2d().b[20][1]++;
        }
        cov_2ll3lefw2d().s[50]++;
        if (dateTo) {
          /* istanbul ignore next */
          cov_2ll3lefw2d().b[21][0]++;
          const endDate =
          /* istanbul ignore next */
          (cov_2ll3lefw2d().s[51]++, new Date(dateTo));
          /* istanbul ignore next */
          cov_2ll3lefw2d().s[52]++;
          endDate.setHours(23, 59, 59, 999);
          /* istanbul ignore next */
          cov_2ll3lefw2d().s[53]++;
          where.createdAt.lte = endDate;
        } else
        /* istanbul ignore next */
        {
          cov_2ll3lefw2d().b[21][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[18][1]++;
      }
      // Definir ordenação
      const orderBy =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[54]++, {});
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[55]++;
      orderBy[sortBy] = sortOrder;
      // Buscar contatos
      const [contacts, total] =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[56]++, await Promise.all([prisma.contact.findMany({
        where,
        skip,
        take,
        orderBy
      }), prisma.contact.count({
        where
      })]));
      const totalPages =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[57]++, Math.ceil(total / take));
      // Estatísticas
      const stats =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[58]++, await prisma.contact.groupBy({
        by: ['status'],
        _count: true
      }));
      const statistics =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[59]++, {
        total,
        pending:
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[22][0]++, stats.find(s => {
          /* istanbul ignore next */
          cov_2ll3lefw2d().f[3]++;
          cov_2ll3lefw2d().s[60]++;
          return s.status === 'PENDING';
        })?._count) ||
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[22][1]++, 0),
        inProgress:
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[23][0]++, stats.find(s => {
          /* istanbul ignore next */
          cov_2ll3lefw2d().f[4]++;
          cov_2ll3lefw2d().s[61]++;
          return s.status === 'IN_PROGRESS';
        })?._count) ||
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[23][1]++, 0),
        resolved:
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[24][0]++, stats.find(s => {
          /* istanbul ignore next */
          cov_2ll3lefw2d().f[5]++;
          cov_2ll3lefw2d().s[62]++;
          return s.status === 'RESOLVED';
        })?._count) ||
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[24][1]++, 0),
        closed:
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[25][0]++, stats.find(s => {
          /* istanbul ignore next */
          cov_2ll3lefw2d().f[6]++;
          cov_2ll3lefw2d().s[63]++;
          return s.status === 'CLOSED';
        })?._count) ||
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[25][1]++, 0)
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[64]++;
      res.status(200).json({
        success: true,
        message: 'Contatos listados com sucesso',
        data: {
          contacts,
          statistics,
          pagination: {
            page: Number(page),
            limit: take,
            total,
            totalPages,
            hasNext: Number(page) < totalPages,
            hasPrev: Number(page) > 1
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[65]++;
      logger_1.default.error('Erro ao listar contatos', {
        error
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[66]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Busca um contato por ID (admin)
   */
  static async getContactById(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[7]++;
    cov_2ll3lefw2d().s[67]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[68]++, req.params);
      // Removido markAsRead pois não existe no modelo
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[69]++;
      if (!id) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[26][0]++;
        cov_2ll3lefw2d().s[70]++;
        res.status(400).json({
          success: false,
          message: 'ID do contato é obrigatório'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[71]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[26][1]++;
      }
      const contact =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[72]++, await prisma.contact.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[73]++;
      if (!contact) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[27][0]++;
        cov_2ll3lefw2d().s[74]++;
        res.status(404).json({
          success: false,
          message: 'Contato não encontrado'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[75]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[27][1]++;
      }
      // Funcionalidade de marcar como lido removida pois não existe no modelo
      cov_2ll3lefw2d().s[76]++;
      res.status(200).json({
        success: true,
        message: 'Contato encontrado',
        data: {
          contact
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[77]++;
      logger_1.default.error('Erro ao buscar contato', {
        error,
        contactId: req.params.id
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[78]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
  /**
   * Atualiza status do contato
   */
  static async updateContactStatus(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[8]++;
    cov_2ll3lefw2d().s[79]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[80]++, req.params);
      const {
        status
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[81]++, req.body);
      // Validar status
      const validStatuses =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[82]++, ['PENDING', 'IN_PROGRESS', 'RESOLVED', 'CLOSED']);
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[83]++;
      if (
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[29][0]++, !status) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[29][1]++, !validStatuses.includes(status))) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[28][0]++;
        cov_2ll3lefw2d().s[84]++;
        res.status(400).json({
          success: false,
          message: 'Status deve ser: PENDING, IN_PROGRESS, RESOLVED ou CLOSED'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[85]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[28][1]++;
      }
      cov_2ll3lefw2d().s[86]++;
      if (!id) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[30][0]++;
        cov_2ll3lefw2d().s[87]++;
        res.status(400).json({
          success: false,
          message: 'ID do contato é obrigatório'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[88]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[30][1]++;
      }
      // Verificar se o contato existe
      const existingContact =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[89]++, await prisma.contact.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[90]++;
      if (!existingContact) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[31][0]++;
        cov_2ll3lefw2d().s[91]++;
        res.status(404).json({
          success: false,
          message: 'Contato não encontrado'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[92]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[31][1]++;
      }
      // Atualizar status
      const updatedContact =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[93]++, await prisma.contact.update({
        where: {
          id
        },
        data: {
          status,
          updatedAt: new Date()
        }
      }));
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[94]++;
      logger_1.default.info('Status do contato atualizado', {
        contactId: id,
        oldStatus: existingContact.status,
        newStatus: status,
        updatedBy:
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[32][0]++, req.user?.id) ||
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[32][1]++, 'system')
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[95]++;
      res.status(200).json({
        success: true,
        message: 'Status atualizado com sucesso',
        data: {
          contact: {
            id: updatedContact.id,
            status: updatedContact.status,
            updatedAt: updatedContact.updatedAt
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[96]++;
      logger_1.default.error('Erro ao atualizar status do contato:', error);
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[97]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Marca contato como lido
   */
  static async markAsRead(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[9]++;
    cov_2ll3lefw2d().s[98]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[99]++, req.params);
      const currentUser =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[100]++, req.user);
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[101]++;
      if (!id) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[33][0]++;
        cov_2ll3lefw2d().s[102]++;
        res.status(400).json({
          success: false,
          message: 'ID do contato é obrigatório'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[103]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[33][1]++;
      }
      const contact =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[104]++, await prisma.contact.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[105]++;
      if (!contact) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[34][0]++;
        cov_2ll3lefw2d().s[106]++;
        res.status(404).json({
          success: false,
          message: 'Contato não encontrado'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[107]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[34][1]++;
      }
      cov_2ll3lefw2d().s[108]++;
      if (contact.status !== 'PENDING') {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[35][0]++;
        cov_2ll3lefw2d().s[109]++;
        res.status(400).json({
          success: false,
          message: 'Contato já foi processado'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[110]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[35][1]++;
      }
      cov_2ll3lefw2d().s[111]++;
      await prisma.contact.update({
        where: {
          id
        },
        data: {
          status: 'IN_PROGRESS'
        }
      });
      // Log da ação
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[112]++;
      logger_1.default.info('Contato marcado como lido', {
        contactId: id,
        readBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[113]++;
      res.status(200).json({
        success: true,
        message: 'Contato marcado como lido'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[114]++;
      logger_1.default.error('Erro ao marcar contato como lido', {
        error,
        contactId: req.params.id
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[115]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Marca múltiplos contatos como lidos (admin)
   */
  static async markMultipleAsRead(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[10]++;
    cov_2ll3lefw2d().s[116]++;
    try {
      const {
        contactIds
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[117]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[118]++, req.user);
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[119]++;
      if (
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[37][0]++, !contactIds) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[37][1]++, !Array.isArray(contactIds)) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[37][2]++, contactIds.length === 0)) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[36][0]++;
        cov_2ll3lefw2d().s[120]++;
        res.status(400).json({
          success: false,
          message: 'Lista de IDs de contatos é obrigatória'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[121]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[36][1]++;
      }
      cov_2ll3lefw2d().s[122]++;
      if (contactIds.length > 100) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[38][0]++;
        cov_2ll3lefw2d().s[123]++;
        res.status(400).json({
          success: false,
          message: 'Máximo de 100 contatos por vez'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[124]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[38][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[125]++, await prisma.contact.updateMany({
        where: {
          id: {
            in: contactIds
          },
          status: 'PENDING'
        },
        data: {
          status: 'IN_PROGRESS'
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[126]++;
      logger_1.default.info('Múltiplos contatos marcados como lidos', {
        count: result.count,
        readBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[127]++;
      res.status(200).json({
        success: true,
        message: `${result.count} contatos marcados como lidos`,
        data: {
          updatedCount: result.count
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[128]++;
      logger_1.default.error('Erro ao marcar múltiplos contatos como lidos', {
        error
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[129]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Responde a um contato (admin)
   */
  static async replyToContact(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[11]++;
    cov_2ll3lefw2d().s[130]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[131]++, req.params);
      const {
        message
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[132]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[133]++, req.user);
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[134]++;
      if (!id) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[39][0]++;
        cov_2ll3lefw2d().s[135]++;
        res.status(400).json({
          success: false,
          message: 'ID do contato é obrigatório'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[136]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[39][1]++;
      }
      cov_2ll3lefw2d().s[137]++;
      if (!message) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[40][0]++;
        cov_2ll3lefw2d().s[138]++;
        res.status(400).json({
          success: false,
          message: 'Mensagem de resposta é obrigatória'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[139]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[40][1]++;
      }
      cov_2ll3lefw2d().s[140]++;
      if (message.length < 10) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[41][0]++;
        cov_2ll3lefw2d().s[141]++;
        res.status(400).json({
          success: false,
          message: 'A resposta deve ter pelo menos 10 caracteres'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[142]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[41][1]++;
      }
      const contact =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[143]++, await prisma.contact.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[144]++;
      if (!contact) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[42][0]++;
        cov_2ll3lefw2d().s[145]++;
        res.status(404).json({
          success: false,
          message: 'Contato não encontrado'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[146]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[42][1]++;
      }
      // Atualizar contato com resposta
      const updatedContact =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[147]++, await prisma.contact.update({
        where: {
          id
        },
        data: {
          status: 'RESOLVED'
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[148]++;
      logger_1.default.info('Resposta enviada para contato', {
        contactId: id,
        repliedBy: currentUser.id,
        recipientEmail: contact.email
      });
      // TODO: Implementar envio de email real aqui
      // await emailService.sendReply({
      //   to: contact.email,
      //   message: message,
      //   originalMessage: contact.message
      // });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[149]++;
      res.status(200).json({
        success: true,
        message: 'Resposta enviada com sucesso',
        data: {
          contact: {
            id: updatedContact.id,
            status: updatedContact.status
          }
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[150]++;
      logger_1.default.error('Erro ao responder contato', {
        error,
        contactId: req.params.id
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[151]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Remove um contato (admin)
   */
  static async deleteContact(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[12]++;
    cov_2ll3lefw2d().s[152]++;
    try {
      const {
        id
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[153]++, req.params);
      const currentUser =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[154]++, req.user);
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[155]++;
      if (!id) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[43][0]++;
        cov_2ll3lefw2d().s[156]++;
        res.status(400).json({
          success: false,
          message: 'ID do contato é obrigatório'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[157]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[43][1]++;
      }
      const contact =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[158]++, await prisma.contact.findUnique({
        where: {
          id
        }
      }));
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[159]++;
      if (!contact) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[44][0]++;
        cov_2ll3lefw2d().s[160]++;
        res.status(404).json({
          success: false,
          message: 'Contato não encontrado'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[161]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[44][1]++;
      }
      cov_2ll3lefw2d().s[162]++;
      await prisma.contact.delete({
        where: {
          id
        }
      });
      // Log da ação
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[163]++;
      logger_1.default.info('Contato deletado', {
        contactId: id,
        email: contact.email,
        subject: contact.subject,
        deletedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[164]++;
      res.status(200).json({
        success: true,
        message: 'Contato deletado com sucesso'
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[165]++;
      logger_1.default.error('Erro ao deletar contato', {
        error,
        contactId: req.params.id
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[166]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Remove múltiplos contatos (admin)
   */
  static async deleteMultipleContacts(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[13]++;
    cov_2ll3lefw2d().s[167]++;
    try {
      const {
        contactIds
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[168]++, req.body);
      const currentUser =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[169]++, req.user);
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[170]++;
      if (
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[46][0]++, !contactIds) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[46][1]++, !Array.isArray(contactIds)) ||
      /* istanbul ignore next */
      (cov_2ll3lefw2d().b[46][2]++, contactIds.length === 0)) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[45][0]++;
        cov_2ll3lefw2d().s[171]++;
        res.status(400).json({
          success: false,
          message: 'Lista de IDs de contatos é obrigatória'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[172]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[45][1]++;
      }
      cov_2ll3lefw2d().s[173]++;
      if (contactIds.length > 100) {
        /* istanbul ignore next */
        cov_2ll3lefw2d().b[47][0]++;
        cov_2ll3lefw2d().s[174]++;
        res.status(400).json({
          success: false,
          message: 'Máximo de 100 contatos por vez'
        });
        /* istanbul ignore next */
        cov_2ll3lefw2d().s[175]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_2ll3lefw2d().b[47][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[176]++, await prisma.contact.deleteMany({
        where: {
          id: {
            in: contactIds
          }
        }
      }));
      // Log da ação
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[177]++;
      logger_1.default.info('Múltiplos contatos deletados', {
        count: result.count,
        deletedBy: currentUser.id
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[178]++;
      res.status(200).json({
        success: true,
        message: `${result.count} contatos deletados com sucesso`,
        data: {
          deletedCount: result.count
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[179]++;
      logger_1.default.error('Erro ao deletar múltiplos contatos', {
        error
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[180]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
  /**
   * Obtém estatísticas de contatos (admin)
   */
  static async getContactStats(req, res) {
    /* istanbul ignore next */
    cov_2ll3lefw2d().f[14]++;
    cov_2ll3lefw2d().s[181]++;
    try {
      const {
        period =
        /* istanbul ignore next */
        (cov_2ll3lefw2d().b[48][0]++, '30')
      } =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[182]++, req.query);
      const periodDays =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[183]++, Number(period));
      const dateLimit =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[184]++, new Date());
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[185]++;
      dateLimit.setDate(dateLimit.getDate() - periodDays);
      const [totalStats, periodStats, dailyStats] =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[186]++, await Promise.all([
      // Estatísticas gerais
      prisma.contact.groupBy({
        by: ['status'],
        _count: true
      }),
      // Estatísticas do período
      prisma.contact.groupBy({
        by: ['status'],
        where: {
          createdAt: {
            gte: dateLimit
          }
        },
        _count: true
      }),
      // Estatísticas diárias dos últimos 7 dias
      prisma.$queryRaw`
          SELECT 
            DATE(createdAt) as date,
            COUNT(*) as count
          FROM Contact 
          WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)
          GROUP BY DATE(createdAt)
          ORDER BY date DESC
        `]));
      const total =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[187]++, await prisma.contact.count());
      const totalInPeriod =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[188]++, await prisma.contact.count({
        where: {
          createdAt: {
            gte: dateLimit
          }
        }
      }));
      const statistics =
      /* istanbul ignore next */
      (cov_2ll3lefw2d().s[189]++, {
        total: {
          all: total,
          pending:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[49][0]++, totalStats.find(s => {
            /* istanbul ignore next */
            cov_2ll3lefw2d().f[15]++;
            cov_2ll3lefw2d().s[190]++;
            return s.status === 'PENDING';
          })?._count) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[49][1]++, 0),
          inProgress:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[50][0]++, totalStats.find(s => {
            /* istanbul ignore next */
            cov_2ll3lefw2d().f[16]++;
            cov_2ll3lefw2d().s[191]++;
            return s.status === 'IN_PROGRESS';
          })?._count) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[50][1]++, 0),
          resolved:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[51][0]++, totalStats.find(s => {
            /* istanbul ignore next */
            cov_2ll3lefw2d().f[17]++;
            cov_2ll3lefw2d().s[192]++;
            return s.status === 'RESOLVED';
          })?._count) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[51][1]++, 0),
          closed:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[52][0]++, totalStats.find(s => {
            /* istanbul ignore next */
            cov_2ll3lefw2d().f[18]++;
            cov_2ll3lefw2d().s[193]++;
            return s.status === 'CLOSED';
          })?._count) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[52][1]++, 0)
        },
        period: {
          days: periodDays,
          all: totalInPeriod,
          pending:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[53][0]++, periodStats.find(s => {
            /* istanbul ignore next */
            cov_2ll3lefw2d().f[19]++;
            cov_2ll3lefw2d().s[194]++;
            return s.status === 'PENDING';
          })?._count) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[53][1]++, 0),
          inProgress:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[54][0]++, periodStats.find(s => {
            /* istanbul ignore next */
            cov_2ll3lefw2d().f[20]++;
            cov_2ll3lefw2d().s[195]++;
            return s.status === 'IN_PROGRESS';
          })?._count) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[54][1]++, 0),
          resolved:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[55][0]++, periodStats.find(s => {
            /* istanbul ignore next */
            cov_2ll3lefw2d().f[21]++;
            cov_2ll3lefw2d().s[196]++;
            return s.status === 'RESOLVED';
          })?._count) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[55][1]++, 0),
          closed:
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[56][0]++, periodStats.find(s => {
            /* istanbul ignore next */
            cov_2ll3lefw2d().f[22]++;
            cov_2ll3lefw2d().s[197]++;
            return s.status === 'CLOSED';
          })?._count) ||
          /* istanbul ignore next */
          (cov_2ll3lefw2d().b[56][1]++, 0)
        },
        daily: dailyStats
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[198]++;
      res.status(200).json({
        success: true,
        message: 'Estatísticas obtidas com sucesso',
        data: {
          statistics
        }
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[199]++;
      logger_1.default.error('Erro ao obter estatísticas de contatos', {
        error
      });
      /* istanbul ignore next */
      cov_2ll3lefw2d().s[200]++;
      res.status(500).json({
        success: false,
        message: 'Erro interno do servidor'
      });
    }
  }
}
/* istanbul ignore next */
cov_2ll3lefw2d().s[201]++;
exports.ContactController = ContactController;
/* istanbul ignore next */
cov_2ll3lefw2d().s[202]++;
exports.default = ContactController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
d4f264fd562f8ed9abe0b97a227672c6
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.app = exports.prisma = void 0;
const express_1 = __importDefault(require("express"));
const dotenv_1 = __importDefault(require("dotenv"));
const client_1 = require("@prisma/client");
const swagger_1 = require("./docs/swagger");
const cacheService_1 = require("./services/cacheService");
// Importar middlewares personalizados
const errorHandler_1 = require("./middlewares/errorHandler");
const logger_1 = require("./middlewares/logger");
const requestLogger_1 = require("./middlewares/requestLogger");
const security_1 = require("./middlewares/security");
// Importar rotas
const authRoutes_1 = __importDefault(require("./routes/authRoutes"));
const userRoutes_1 = __importDefault(require("./routes/userRoutes"));
const articleRoutes_1 = __importDefault(require("./routes/articleRoutes"));
const contactRoutes_1 = __importDefault(require("./routes/contactRoutes"));
const calculatorRoutes_1 = __importDefault(require("./routes/calculatorRoutes"));
const newsletterRoutes_1 = __importDefault(require("./routes/newsletterRoutes"));
const uploadRoutes_1 = __importDefault(require("./routes/uploadRoutes"));
const adminRoutes_1 = __importDefault(require("./routes/adminRoutes"));
const cacheRoutes_1 = __importDefault(require("./routes/cacheRoutes"));
// Carregar vari√°veis de ambiente
dotenv_1.default.config();
// Inicializar Prisma Client
exports.prisma = new client_1.PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'info', 'warn', 'error'] : ['error'],
});
// Criar aplica√ß√£o Express
const app = (0, express_1.default)();
exports.app = app;
const PORT = process.env.PORT || 3001;
const API_VERSION = process.env.API_VERSION || 'v1';
// Configura√ß√£o do Swagger ser√° feita atrav√©s do m√≥dulo dedicado
// Middlewares de seguran√ßa
app.use(security_1.customSecurityHeaders);
app.use(security_1.helmetMiddleware);
app.use(security_1.corsMiddleware);
app.use(security_1.compressionMiddleware);
app.use(security_1.generalRateLimit);
app.use(security_1.securityLogger);
// Middlewares de parsing
app.use(express_1.default.json({ limit: '10mb' }));
app.use(express_1.default.urlencoded({ extended: true, limit: '10mb' }));
// Middleware de logging
app.use(requestLogger_1.requestLogger);
// Configurar documenta√ß√£o da API
(0, swagger_1.setupSwagger)(app);
// Health check endpoint
app.get('/health', async (req, res) => {
    try {
        // Verificar conex√£o com o banco de dados
        await exports.prisma.$queryRaw `SELECT 1`;
        // Verificar conex√£o com o Redis
        const redisStatus = cacheService_1.cacheService.isRedisConnected() ? 'connected' : 'disconnected';
        const healthStatus = {
            status: 'healthy',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            environment: process.env.NODE_ENV || 'development',
            version: process.env.npm_package_version || '1.0.0',
            database: 'connected',
            cache: redisStatus,
            memory: {
                used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',
                total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'
            }
        };
        res.status(200).json(healthStatus);
    }
    catch (error) {
        res.status(503).json({
            status: 'unhealthy',
            timestamp: new Date().toISOString(),
            error: 'Database connection failed'
        });
    }
});
// Rotas da API
const apiRouter = express_1.default.Router();
// Registrar rotas com rate limiting espec√≠fico
apiRouter.use('/auth', security_1.authRateLimit, authRoutes_1.default);
apiRouter.use('/users', security_1.apiRateLimit, userRoutes_1.default);
apiRouter.use('/articles', security_1.apiRateLimit, articleRoutes_1.default);
apiRouter.use('/contact', security_1.apiRateLimit, contactRoutes_1.default);
apiRouter.use('/calculator', security_1.apiRateLimit, calculatorRoutes_1.default);
apiRouter.use('/newsletter', security_1.apiRateLimit, newsletterRoutes_1.default);
apiRouter.use('/upload', security_1.uploadRateLimit, uploadRoutes_1.default);
apiRouter.use('/admin', security_1.apiRateLimit, adminRoutes_1.default);
apiRouter.use('/cache', security_1.apiRateLimit, cacheRoutes_1.default);
// Usar o roteador da API
app.use(`/api/${API_VERSION}`, apiRouter);
// Rota raiz
app.get('/', (req, res) => {
    res.json({
        message: 'Contabilidade Igrejinha API',
        version: process.env.SWAGGER_VERSION || '1.0.0',
        documentation: `/api-docs`,
        health: '/health',
        timestamp: new Date().toISOString(),
    });
});
// Middleware para rotas n√£o encontradas
app.use('*', (req, res) => {
    res.status(404).json({
        error: 'Rota n√£o encontrada',
        message: `A rota ${req.originalUrl} n√£o existe nesta API`,
        availableRoutes: {
            documentation: '/api-docs',
            health: '/health',
            api: `/api/${API_VERSION}`,
        },
    });
});
// Middleware de tratamento de erros (deve ser o √∫ltimo)
app.use(errorHandler_1.errorHandler);
// Fun√ß√£o para inicializar o servidor
const startServer = async () => {
    try {
        // Conectar ao banco de dados
        await exports.prisma.$connect();
        logger_1.logger.info('Conectado ao banco de dados PostgreSQL');
        // Conectar ao Redis (cache)
        try {
            await cacheService_1.cacheService.connect();
            logger_1.logger.info('‚úÖ Redis cache connected successfully');
        }
        catch (error) {
            logger_1.logger.warn('‚ö†Ô∏è Redis cache connection failed, continuing without cache:', error);
        }
        // Iniciar servidor
        app.listen(PORT, () => {
            logger_1.logger.info(`üöÄ Servidor rodando na porta ${PORT}`);
            logger_1.logger.info(`üìö Documenta√ß√£o dispon√≠vel em http://localhost:${PORT}/api-docs`);
            logger_1.logger.info(`üè• Health check dispon√≠vel em http://localhost:${PORT}/health`);
            logger_1.logger.info(`üåç Ambiente: ${process.env.NODE_ENV}`);
        });
    }
    catch (error) {
        logger_1.logger.error('Erro ao inicializar o servidor:', error);
        process.exit(1);
    }
};
// Tratamento de sinais de encerramento
process.on('SIGINT', async () => {
    logger_1.logger.info('Recebido SIGINT. Encerrando servidor graciosamente...');
    await cacheService_1.cacheService.disconnect();
    await exports.prisma.$disconnect();
    process.exit(0);
});
process.on('SIGTERM', async () => {
    logger_1.logger.info('Recebido SIGTERM. Encerrando servidor graciosamente...');
    await cacheService_1.cacheService.disconnect();
    await exports.prisma.$disconnect();
    process.exit(0);
});
// Tratamento de erros n√£o capturados
process.on('uncaughtException', (error) => {
    logger_1.logger.error('Erro n√£o capturado:', error);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger_1.logger.error('Promise rejeitada n√£o tratada:', { reason, promise });
    process.exit(1);
});
// Inicializar servidor
if (require.main === module) {
    startServer();
}
exports.default = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
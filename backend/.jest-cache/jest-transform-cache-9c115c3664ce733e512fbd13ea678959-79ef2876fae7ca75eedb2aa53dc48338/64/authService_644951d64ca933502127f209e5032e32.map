{"version":3,"names":["cov_2kjbgecriy","actualCoverage","bcrypt_1","s","__importDefault","require","jsonwebtoken_1","client_1","logger_1","error_1","AuthService","JWT_SECRET","JWT_REFRESH_SECRET","JWT_EXPIRES_IN","JWT_REFRESH_EXPIRES_IN","SALT_ROUNDS","prisma","constructor","prismaClient","f","b","process","env","parseInt","BCRYPT_SALT_ROUNDS","PrismaClient","register","userData","emailRegex","test","email","ValidationError","password","length","existingUser","user","findUnique","where","Error","hashedPassword","default","hash","create","data","name","role","tokens","generateTokens","userId","id","saveRefreshToken","refreshToken","logger","info","formatUserResponse","error","login","credentials","isPasswordValid","compare","payload","verify","storedToken","findFirst","token","delete","logout","deleteMany","verifyAccessToken","getUserById","changePassword","currentPassword","newPassword","isCurrentPasswordValid","hashedNewPassword","update","accessToken","sign","expiresIn","expiresAt","Date","setDate","getDate","createdAt","updatedAt","exports","authService"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\services\\authService.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { logger } from '../middlewares/logger';\r\nimport { ValidationError } from '../utils/error';\r\n\r\n// Interfaces para tipagem\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterData {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  role?: string;\r\n}\r\n\r\nexport interface TokenPayload {\r\n  userId: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\nexport interface AuthTokens {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface UserResponse {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport class AuthService {\r\n  private readonly JWT_SECRET: string;\r\n  private readonly JWT_REFRESH_SECRET: string;\r\n  private readonly JWT_EXPIRES_IN: string;\r\n  private readonly JWT_REFRESH_EXPIRES_IN: string;\r\n  private readonly SALT_ROUNDS: number;\r\n  private readonly prisma: PrismaClient;\r\n\r\n  constructor(prismaClient?: PrismaClient) {\r\n    this.JWT_SECRET = process.env.JWT_SECRET || 'default-secret';\r\n    this.JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || 'default-refresh-secret';\r\n    this.JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '15m';\r\n    this.JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '7d';\r\n    this.SALT_ROUNDS = parseInt(process.env.BCRYPT_SALT_ROUNDS || '12');\r\n    this.prisma = prismaClient || new PrismaClient();\r\n  }\r\n\r\n  /**\r\n   * Registra um novo usuário no sistema\r\n   */\r\n  async register(userData: RegisterData): Promise<{ user: UserResponse; tokens: AuthTokens }> {\r\n    try {\r\n      // Validar formato do email\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!emailRegex.test(userData.email)) {\r\n        throw new ValidationError('Formato de email inválido');\r\n      }\r\n\r\n      // Validar força da senha\r\n      if (userData.password.length < 8) {\r\n        throw new ValidationError('Senha deve ter pelo menos 8 caracteres');\r\n      }\r\n\r\n      // Verificar se o usuário já existe\r\n      const existingUser = await this.prisma.user.findUnique({\r\n        where: { email: userData.email }\r\n      });\r\n\r\n      if (existingUser) {\r\n        throw new Error('Usuário já existe com este email');\r\n      }\r\n\r\n      // Hash da senha\r\n      const hashedPassword = await bcrypt.hash(userData.password, this.SALT_ROUNDS);\r\n\r\n      // Criar usuário\r\n      const user = await this.prisma.user.create({\r\n        data: {\r\n          name: userData.name,\r\n          email: userData.email,\r\n          password: hashedPassword,\r\n          role: userData.role || 'USER'\r\n        }\r\n      });\r\n\r\n      // Gerar tokens\r\n      const tokens = this.generateTokens({\r\n        userId: user.id,\r\n        email: user.email,\r\n        role: user.role\r\n      });\r\n\r\n      // Salvar refresh token no banco\r\n      await this.saveRefreshToken(user.id, tokens.refreshToken);\r\n\r\n      logger.info(`Usuário registrado com sucesso: ${user.email}`);\r\n\r\n      return {\r\n        user: this.formatUserResponse(user),\r\n        tokens\r\n      };\r\n    } catch (error) {\r\n      logger.error('Erro ao registrar usuário:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Autentica um usuário e retorna tokens\r\n   */\r\n  async login(credentials: LoginCredentials): Promise<{ user: UserResponse; tokens: AuthTokens }> {\r\n    try {\r\n      // Buscar usuário\r\n      const user = await this.prisma.user.findUnique({\r\n        where: { email: credentials.email }\r\n      });\r\n\r\n      if (!user) {\r\n        throw new Error('Credenciais inválidas');\r\n      }\r\n\r\n      // Verificar senha\r\n      const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n      if (!isPasswordValid) {\r\n        throw new Error('Credenciais inválidas');\r\n      }\r\n\r\n      // Gerar tokens\r\n      const tokens = this.generateTokens({\r\n        userId: user.id,\r\n        email: user.email,\r\n        role: user.role\r\n      });\r\n\r\n      // Salvar refresh token no banco\r\n      await this.saveRefreshToken(user.id, tokens.refreshToken);\r\n\r\n      logger.info(`Login realizado com sucesso: ${user.email}`);\r\n\r\n      return {\r\n        user: this.formatUserResponse(user),\r\n        tokens\r\n      };\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer login:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renova o access token usando o refresh token\r\n   */\r\n  async refreshToken(refreshToken: string): Promise<AuthTokens> {\r\n    try {\r\n      // Verificar refresh token\r\n      const payload = jwt.verify(refreshToken, this.JWT_REFRESH_SECRET) as TokenPayload;\r\n\r\n      // Verificar se o refresh token existe no banco\r\n      const storedToken = await this.prisma.refreshToken.findFirst({\r\n        where: {\r\n          token: refreshToken,\r\n          userId: payload.userId\r\n        }\r\n      });\r\n\r\n      if (!storedToken) {\r\n        throw new Error('Refresh token inválido');\r\n      }\r\n\r\n      // Buscar usuário\r\n      const user = await this.prisma.user.findUnique({\r\n        where: { id: payload.userId }\r\n      });\r\n\r\n      if (!user) {\r\n        throw new Error('Usuário não encontrado');\r\n      }\r\n\r\n      // Gerar novos tokens\r\n      const tokens = this.generateTokens({\r\n        userId: user.id,\r\n        email: user.email,\r\n        role: user.role\r\n      });\r\n\r\n      // Remover refresh token antigo e salvar o novo\r\n      await this.prisma.refreshToken.delete({\r\n        where: { id: storedToken.id }\r\n      });\r\n      await this.saveRefreshToken(user.id, tokens.refreshToken);\r\n\r\n      logger.info(`Token renovado para usuário: ${user.email}`);\r\n\r\n      return tokens;\r\n    } catch (error) {\r\n      logger.error('Erro ao renovar token:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Faz logout do usuário removendo o refresh token\r\n   */\r\n  async logout(refreshToken: string): Promise<void> {\r\n    try {\r\n      await this.prisma.refreshToken.deleteMany({\r\n        where: { token: refreshToken }\r\n      });\r\n\r\n      logger.info('Logout realizado com sucesso');\r\n    } catch (error) {\r\n      logger.error('Erro ao fazer logout:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verifica se um access token é válido\r\n   */\r\n  async verifyAccessToken(token: string): Promise<TokenPayload> {\r\n    try {\r\n      const payload = jwt.verify(token, this.JWT_SECRET) as TokenPayload;\r\n      return payload;\r\n    } catch (error) {\r\n      logger.error('Token inválido:', error);\r\n      throw new Error('Token inválido');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um usuário pelo ID\r\n   */\r\n  async getUserById(userId: string): Promise<UserResponse | null> {\r\n    try {\r\n      const user = await this.prisma.user.findUnique({\r\n        where: { id: userId }\r\n      });\r\n\r\n      return user ? this.formatUserResponse(user) : null;\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar usuário:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Altera a senha do usuário\r\n   */\r\n  async changePassword(userId: string, currentPassword: string, newPassword: string): Promise<void> {\r\n    try {\r\n      // Buscar usuário\r\n      const user = await this.prisma.user.findUnique({\r\n        where: { id: userId }\r\n      });\r\n\r\n      if (!user) {\r\n        throw new Error('Usuário não encontrado');\r\n      }\r\n\r\n      // Verificar senha atual\r\n      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n      if (!isCurrentPasswordValid) {\r\n        throw new Error('Senha atual incorreta');\r\n      }\r\n\r\n      // Hash da nova senha\r\n      const hashedNewPassword = await bcrypt.hash(newPassword, this.SALT_ROUNDS);\r\n\r\n      // Atualizar senha\r\n      await this.prisma.user.update({\r\n        where: { id: userId },\r\n        data: { password: hashedNewPassword }\r\n      });\r\n\r\n      // Remover todos os refresh tokens do usuário (forçar novo login)\r\n      await this.prisma.refreshToken.deleteMany({\r\n        where: { userId }\r\n      });\r\n\r\n      logger.info(`Senha alterada para usuário: ${user.email}`);\r\n    } catch (error) {\r\n      logger.error('Erro ao alterar senha:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gera tokens de acesso e refresh\r\n   */\r\n  private generateTokens(payload: TokenPayload): AuthTokens {\r\n    const accessToken = jwt.sign(\r\n      payload as object,\r\n      this.JWT_SECRET as jwt.Secret,\r\n      {\r\n        expiresIn: this.JWT_EXPIRES_IN\r\n      } as jwt.SignOptions\r\n    );\r\n\r\n    const refreshToken = jwt.sign(\r\n      payload as object,\r\n      this.JWT_REFRESH_SECRET as jwt.Secret,\r\n      {\r\n        expiresIn: this.JWT_REFRESH_EXPIRES_IN\r\n      } as jwt.SignOptions\r\n    );\r\n\r\n    return { accessToken, refreshToken };\r\n  }\r\n\r\n  /**\r\n   * Salva o refresh token no banco de dados\r\n   */\r\n  private async saveRefreshToken(userId: string, token: string): Promise<void> {\r\n    const expiresAt = new Date();\r\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 dias\r\n\r\n    await this.prisma.refreshToken.create({\r\n      data: {\r\n        token,\r\n        userId,\r\n        expiresAt\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Formata a resposta do usuário removendo dados sensíveis\r\n   */\r\n  private formatUserResponse(user: any): UserResponse {\r\n    return {\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email,\r\n      role: user.role,\r\n      createdAt: user.createdAt,\r\n      updatedAt: user.updatedAt\r\n    };\r\n  }\r\n}\r\n\r\n// Exportar instância singleton\r\nexport const authService = new AuthService();"],"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","ignoreList":[]}
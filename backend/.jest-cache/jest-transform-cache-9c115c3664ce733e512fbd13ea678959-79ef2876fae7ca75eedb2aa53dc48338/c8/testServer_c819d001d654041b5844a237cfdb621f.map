{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\tests\\helpers\\testServer.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\tests\\helpers\\testServer.ts"],"sourcesContent":["import express from 'express';\r\nimport { setupSwagger } from '../../docs/swagger';\r\nimport { requestLogger } from '../../middlewares/requestLogger';\r\nimport { errorHandler } from '../../middlewares/errorHandler';\r\nimport {\r\n  corsMiddleware,\r\n  helmetMiddleware,\r\n  generalRateLimit,\r\n  authRateLimit,\r\n  apiRateLimit,\r\n  uploadRateLimit,\r\n  compressionMiddleware,\r\n  customSecurityHeaders,\r\n  securityLogger\r\n} from '../../middlewares/security';\r\n\r\n// Importar rotas individuais\r\nimport authRoutes from '../../routes/authRoutes';\r\nimport userRoutes from '../../routes/userRoutes';\r\nimport articleRoutes from '../../routes/articleRoutes';\r\nimport contactRoutes from '../../routes/contactRoutes';\r\nimport calculatorRoutes from '../../routes/calculatorRoutes';\r\nimport newsletterRoutes from '../../routes/newsletterRoutes';\r\nimport uploadRoutes from '../../routes/uploadRoutes';\r\nimport adminRoutes from '../../routes/adminRoutes';\r\nimport cacheRoutes from '../../routes/cacheRoutes';\r\n\r\n/**\r\n * Cria uma instância do aplicativo Express para testes\r\n * @returns Aplicativo Express configurado\r\n */\r\nexport const createTestServer = () => {\r\n  const app = express();\r\n\r\n  // Middlewares de segurança\r\n  app.use(customSecurityHeaders);\r\n  app.use(helmetMiddleware);\r\n  app.use(corsMiddleware);\r\n  app.use(compressionMiddleware);\r\n  app.use(generalRateLimit);\r\n  app.use(securityLogger);\r\n\r\n  // Parsing de JSON e URL encoded\r\n  app.use(express.json({ limit: '10mb' }));\r\n  app.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n  // Middleware de logging (apenas para testes de integração)\r\n  if (process.env.TEST_LOGGING === 'true') {\r\n    app.use(requestLogger);\r\n  }\r\n\r\n  // Health check\r\n  app.get('/health', (req, res) => {\r\n    res.status(200).json({\r\n      status: 'OK',\r\n      timestamp: new Date().toISOString(),\r\n      environment: process.env.NODE_ENV || 'development',\r\n    });\r\n  });\r\n\r\n  // Documentação Swagger (apenas se não for teste unitário)\r\n  if (process.env.JEST_WORKER_ID === undefined || process.env.TEST_SWAGGER === 'true') {\r\n    setupSwagger(app);\r\n  }\r\n\r\n  // Configurar rotas da API com middlewares específicos\r\n  const apiRouter = express.Router();\r\n  \r\n  apiRouter.use('/auth', authRateLimit, authRoutes);\r\n  apiRouter.use('/users', apiRateLimit, userRoutes);\r\n  apiRouter.use('/articles', apiRateLimit, articleRoutes);\r\n  apiRouter.use('/contact', apiRateLimit, contactRoutes);\r\n  apiRouter.use('/calculator', apiRateLimit, calculatorRoutes);\r\n  apiRouter.use('/newsletter', apiRateLimit, newsletterRoutes);\r\n  apiRouter.use('/upload', uploadRateLimit, uploadRoutes);\r\n  apiRouter.use('/admin', apiRateLimit, adminRoutes);\r\n  apiRouter.use('/cache', apiRateLimit, cacheRoutes);\r\n  \r\n  app.use('/api/v1', apiRouter);\r\n\r\n  // Middleware de tratamento de erros\r\n  app.use(errorHandler);\r\n\r\n  // Rota 404\r\n  app.use('*', (req, res) => {\r\n    res.status(404).json({\r\n      success: false,\r\n      message: 'Rota não encontrada',\r\n      path: req.originalUrl,\r\n    });\r\n  });\r\n\r\n  return app;\r\n};\r\n\r\n/**\r\n * Cria um servidor de teste simplificado para testes unitários\r\n * @returns Aplicativo Express mínimo\r\n */\r\nexport const createMinimalTestServer = () => {\r\n  const app = express();\r\n  \r\n  app.use(express.json());\r\n  app.use(express.urlencoded({ extended: true }));\r\n  \r\n  return app;\r\n};"],"version":3}
{"version":3,"names":["express_1","cov_2asxumotdg","s","require","auth_1","adminController_1","__importDefault","router","Router","get","authenticate","authorize","req","res","f","default","getDashboard","getSystemInfo","getSystemLogs","getBackups","post","createBackup","downloadBackup","delete","deleteBackup","getSettings","put","updateSettings","clearCache","enableMaintenance","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\adminRoutes.ts"],"sourcesContent":["import { Router } from 'express';\r\nimport { authenticate, authorize } from '../middlewares/auth';\r\nimport AdminController from '../controllers/adminController';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     DashboardStats:\r\n *       type: object\r\n *       properties:\r\n *         users:\r\n *           type: object\r\n *           properties:\r\n *             total:\r\n *               type: integer\r\n *             active:\r\n *               type: integer\r\n *             newThisMonth:\r\n *               type: integer\r\n *             byRole:\r\n *               type: object\r\n *               properties:\r\n *                 admin:\r\n *                   type: integer\r\n *                 editor:\r\n *                   type: integer\r\n *                 user:\r\n *                   type: integer\r\n *         articles:\r\n *           type: object\r\n *           properties:\r\n *             total:\r\n *               type: integer\r\n *             published:\r\n *               type: integer\r\n *             draft:\r\n *               type: integer\r\n *             thisMonth:\r\n *               type: integer\r\n *             totalViews:\r\n *               type: integer\r\n *             totalLikes:\r\n *               type: integer\r\n *         contacts:\r\n *           type: object\r\n *           properties:\r\n *             total:\r\n *               type: integer\r\n *             pending:\r\n *               type: integer\r\n *             replied:\r\n *               type: integer\r\n *             thisMonth:\r\n *               type: integer\r\n *         newsletter:\r\n *           type: object\r\n *           properties:\r\n *             subscribers:\r\n *               type: integer\r\n *             activeSubscribers:\r\n *               type: integer\r\n *             campaigns:\r\n *               type: integer\r\n *             thisMonth:\r\n *               type: integer\r\n *         uploads:\r\n *           type: object\r\n *           properties:\r\n *             total:\r\n *               type: integer\r\n *             totalSize:\r\n *               type: string\r\n *             thisMonth:\r\n *               type: integer\r\n *             byType:\r\n *               type: object\r\n *         system:\r\n *           type: object\r\n *           properties:\r\n *             uptime:\r\n *               type: string\r\n *             version:\r\n *               type: string\r\n *             environment:\r\n *               type: string\r\n *             lastBackup:\r\n *               type: string\r\n *               format: date-time\r\n *     SystemInfo:\r\n *       type: object\r\n *       properties:\r\n *         server:\r\n *           type: object\r\n *           properties:\r\n *             platform:\r\n *               type: string\r\n *             nodeVersion:\r\n *               type: string\r\n *             memory:\r\n *               type: object\r\n *               properties:\r\n *                 used:\r\n *                   type: string\r\n *                 total:\r\n *                   type: string\r\n *                 percentage:\r\n *                   type: number\r\n *             cpu:\r\n *               type: object\r\n *               properties:\r\n *                 usage:\r\n *                   type: number\r\n *                 cores:\r\n *                   type: integer\r\n *             uptime:\r\n *               type: string\r\n *         database:\r\n *           type: object\r\n *           properties:\r\n *             status:\r\n *               type: string\r\n *             version:\r\n *               type: string\r\n *             size:\r\n *               type: string\r\n *             connections:\r\n *               type: integer\r\n *         cache:\r\n *           type: object\r\n *           properties:\r\n *             status:\r\n *               type: string\r\n *             memory:\r\n *               type: string\r\n *             keys:\r\n *               type: integer\r\n *             hitRate:\r\n *               type: number\r\n *     ActivityLog:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         userId:\r\n *           type: string\r\n *         userName:\r\n *           type: string\r\n *         action:\r\n *           type: string\r\n *         resource:\r\n *           type: string\r\n *         resourceId:\r\n *           type: string\r\n *         details:\r\n *           type: object\r\n *         ipAddress:\r\n *           type: string\r\n *         userAgent:\r\n *           type: string\r\n *         timestamp:\r\n *           type: string\r\n *           format: date-time\r\n *     BackupInfo:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         filename:\r\n *           type: string\r\n *         size:\r\n *           type: string\r\n *         type:\r\n *           type: string\r\n *           enum: [full, incremental]\r\n *         status:\r\n *           type: string\r\n *           enum: [completed, failed, in_progress]\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *         duration:\r\n *           type: string\r\n *     SettingItem:\r\n *       type: object\r\n *       properties:\r\n *         key:\r\n *           type: string\r\n *         value:\r\n *           type: string\r\n *         type:\r\n *           type: string\r\n *           enum: [string, number, boolean, json]\r\n *         category:\r\n *           type: string\r\n *         description:\r\n *           type: string\r\n *         isPublic:\r\n *           type: boolean\r\n *         updatedAt:\r\n *           type: string\r\n *           format: date-time\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/dashboard:\r\n *   get:\r\n *     summary: Obter estatísticas do dashboard administrativo\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Estatísticas do dashboard\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/DashboardStats'\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n */\r\nrouter.get('/dashboard', authenticate, authorize('ADMIN'), (req, res) => AdminController.getDashboard(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/system-info:\r\n *   get:\r\n *     summary: Obter informações do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Informações do sistema\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/SystemInfo'\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n */\r\nrouter.get('/system-info', authenticate, authorize('ADMIN'), (req, res) => AdminController.getSystemInfo(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/activity-logs:\r\n *   get:\r\n *     summary: Listar logs de atividade\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: Número da página\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 100\r\n *           default: 50\r\n *         description: Itens por página\r\n *       - in: query\r\n *         name: userId\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por usuário\r\n *       - in: query\r\n *         name: action\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por ação\r\n *       - in: query\r\n *         name: resource\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por recurso\r\n *       - in: query\r\n *         name: dateFrom\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Data inicial (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: dateTo\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Data final (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: sortBy\r\n *         schema:\r\n *           type: string\r\n *           enum: [timestamp, action, resource]\r\n *           default: timestamp\r\n *         description: Campo para ordenação\r\n *       - in: query\r\n *         name: sortOrder\r\n *         schema:\r\n *           type: string\r\n *           enum: [asc, desc]\r\n *           default: desc\r\n *         description: Ordem da classificação\r\n *     responses:\r\n *       200:\r\n *         description: Lista de logs de atividade\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     logs:\r\n *                       type: array\r\n *                       items:\r\n *                         $ref: '#/components/schemas/ActivityLog'\r\n *                     pagination:\r\n *                       type: object\r\n *                       properties:\r\n *                         page:\r\n *                           type: integer\r\n *                         limit:\r\n *                           type: integer\r\n *                         total:\r\n *                           type: integer\r\n *                         pages:\r\n *                           type: integer\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n */\r\nrouter.get('/activity-logs', authenticate, authorize('ADMIN'), (req, res) => AdminController.getSystemLogs(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/backups:\r\n *   get:\r\n *     summary: Listar backups do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: Número da página\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 50\r\n *           default: 20\r\n *         description: Itens por página\r\n *       - in: query\r\n *         name: type\r\n *         schema:\r\n *           type: string\r\n *           enum: [full, incremental]\r\n *         description: Filtrar por tipo de backup\r\n *       - in: query\r\n *         name: status\r\n *         schema:\r\n *           type: string\r\n *           enum: [completed, failed, in_progress]\r\n *         description: Filtrar por status\r\n *     responses:\r\n *       200:\r\n *         description: Lista de backups\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     backups:\r\n *                       type: array\r\n *                       items:\r\n *                         $ref: '#/components/schemas/BackupInfo'\r\n *                     pagination:\r\n *                       type: object\r\n *                       properties:\r\n *                         page:\r\n *                           type: integer\r\n *                         limit:\r\n *                           type: integer\r\n *                         total:\r\n *                           type: integer\r\n *                         pages:\r\n *                           type: integer\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n */\r\nrouter.get('/backups', authenticate, authorize('ADMIN'), (req, res) => AdminController.getBackups(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/backups:\r\n *   post:\r\n *     summary: Criar novo backup\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               type:\r\n *                 type: string\r\n *                 enum: [full, incremental]\r\n *                 default: full\r\n *                 description: Tipo de backup\r\n *               description:\r\n *                 type: string\r\n *                 description: Descrição do backup (opcional)\r\n *     responses:\r\n *       202:\r\n *         description: Backup iniciado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     backupId:\r\n *                       type: string\r\n *                     status:\r\n *                       type: string\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n *       409:\r\n *         description: Backup já em andamento\r\n */\r\nrouter.post('/backups', authenticate, authorize('ADMIN'), (req, res) => AdminController.createBackup(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/backups/{id}/download:\r\n *   get:\r\n *     summary: Download de backup\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do backup\r\n *     responses:\r\n *       200:\r\n *         description: Arquivo de backup\r\n *         content:\r\n *           application/octet-stream:\r\n *             schema:\r\n *               type: string\r\n *               format: binary\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n *       404:\r\n *         description: Backup não encontrado\r\n */\r\nrouter.get('/backups/:id/download', authenticate, authorize('ADMIN'), (req, res) => AdminController.downloadBackup(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/backups/{id}:\r\n *   delete:\r\n *     summary: Excluir backup\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do backup\r\n *     responses:\r\n *       200:\r\n *         description: Backup excluído com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n *       404:\r\n *         description: Backup não encontrado\r\n */\r\nrouter.delete('/backups/:id', authenticate, authorize('ADMIN'), (req, res) => AdminController.deleteBackup(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/settings:\r\n *   get:\r\n *     summary: Listar configurações do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: category\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por categoria\r\n *       - in: query\r\n *         name: search\r\n *         schema:\r\n *           type: string\r\n *         description: Buscar por chave ou descrição\r\n *     responses:\r\n *       200:\r\n *         description: Lista de configurações\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/SettingItem'\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n */\r\nrouter.get('/settings', authenticate, authorize('ADMIN'), (req, res) => AdminController.getSettings(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/settings:\r\n *   put:\r\n *     summary: Atualizar configurações do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               settings:\r\n *                 type: array\r\n *                 items:\r\n *                   type: object\r\n *                   required:\r\n *                     - key\r\n *                     - value\r\n *                   properties:\r\n *                     key:\r\n *                       type: string\r\n *                       description: Chave da configuração\r\n *                     value:\r\n *                       type: string\r\n *                       description: Valor da configuração\r\n *     responses:\r\n *       200:\r\n *         description: Configurações atualizadas com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     updated:\r\n *                       type: integer\r\n *                     failed:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           key:\r\n *                             type: string\r\n *                           error:\r\n *                             type: string\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n */\r\nrouter.put('/settings', authenticate, authorize('ADMIN'), (req, res) => AdminController.updateSettings(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/cache/clear:\r\n *   post:\r\n *     summary: Limpar cache do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: false\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               pattern:\r\n *                 type: string\r\n *                 description: Padrão de chaves para limpar (opcional)\r\n *               category:\r\n *                 type: string\r\n *                 enum: [all, articles, users, settings, uploads]\r\n *                 default: all\r\n *                 description: Categoria de cache para limpar\r\n *     responses:\r\n *       200:\r\n *         description: Cache limpo com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     keysCleared:\r\n *                       type: integer\r\n *                     category:\r\n *                       type: string\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n *       500:\r\n *         description: Erro interno do servidor\r\n */\r\nrouter.post('/cache/clear', authenticate, authorize('ADMIN'), (req, res) => AdminController.clearCache(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/maintenance:\r\n *   post:\r\n *     summary: Ativar/desativar modo de manutenção\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - enabled\r\n *             properties:\r\n *               enabled:\r\n *                 type: boolean\r\n *                 description: Ativar ou desativar modo de manutenção\r\n *               message:\r\n *                 type: string\r\n *                 description: Mensagem personalizada (opcional)\r\n *               estimatedDuration:\r\n *                 type: string\r\n *                 description: Duração estimada (opcional)\r\n *     responses:\r\n *       200:\r\n *         description: Modo de manutenção alterado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     maintenanceMode:\r\n *                       type: boolean\r\n *                     message:\r\n *                       type: string\r\n *                     estimatedDuration:\r\n *                       type: string\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão de administrador\r\n */\r\nrouter.post('/maintenance', authenticate, authorize('ADMIN'), (req, res) => AdminController.enableMaintenance(req, res));\r\n\r\nexport default router;"],"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","ignoreList":[]}
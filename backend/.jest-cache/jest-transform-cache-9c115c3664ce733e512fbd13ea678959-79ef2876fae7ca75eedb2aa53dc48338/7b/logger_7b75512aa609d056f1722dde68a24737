a144e94fe11e5f4d58d37f3c90e838fe
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.logSystem = exports.logDatabase = exports.logRequest = exports.logAuth = void 0;
const winston = __importStar(require("winston"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
// Criar diretório de logs se não existir
const logDir = process.env.LOG_FILE_PATH || './logs';
if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
}
// Configuração dos formatos de log
const logFormat = winston.format.combine(winston.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss',
}), winston.format.errors({ stack: true }), winston.format.json());
// Formato para console (desenvolvimento)
const consoleFormat = winston.format.combine(winston.format.colorize(), winston.format.timestamp({
    format: 'HH:mm:ss',
}), winston.format.printf(({ timestamp, level, message, ...meta }) => {
    let msg = `${timestamp} [${level}]: ${message}`;
    if (Object.keys(meta).length > 0) {
        msg += ` ${JSON.stringify(meta, null, 2)}`;
    }
    return msg;
}));
// Configuração dos transportes
const transports = [];
// Console transport (sempre ativo em desenvolvimento)
if (process.env.NODE_ENV !== 'production') {
    transports.push(new winston.transports.Console({
        format: consoleFormat,
        level: process.env.LOG_LEVEL || 'info',
    }));
}
// File transports
transports.push(
// Log de erros
new winston.transports.File({
    filename: path.join(logDir, 'error.log'),
    level: 'error',
    format: logFormat,
    maxsize: 5242880, // 5MB
    maxFiles: 5,
}), 
// Log combinado
new winston.transports.File({
    filename: path.join(logDir, 'combined.log'),
    format: logFormat,
    maxsize: 5242880, // 5MB
    maxFiles: 5,
}));
// Criar instância do logger
const logger = winston.createLogger({
    level: process.env.LOG_LEVEL || 'info',
    format: logFormat,
    transports,
    // Não sair em caso de erro
    exitOnError: false,
});
// Função para log de autenticação
const logAuth = (message, userId, metadata) => {
    logger.info(message, {
        category: 'auth',
        userId,
        ...metadata,
    });
};
exports.logAuth = logAuth;
// Função para log de requisições
const logRequest = (message, metadata) => {
    logger.info(message, {
        category: 'request',
        ...metadata,
    });
};
exports.logRequest = logRequest;
// Função para log de operações de banco
const logDatabase = (message, metadata) => {
    logger.info(message, {
        category: 'database',
        ...metadata,
    });
};
exports.logDatabase = logDatabase;
// Função para log de sistema
const logSystem = (message, metadata) => {
    logger.info(message, {
        category: 'system',
        ...metadata,
    });
};
exports.logSystem = logSystem;
exports.default = logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
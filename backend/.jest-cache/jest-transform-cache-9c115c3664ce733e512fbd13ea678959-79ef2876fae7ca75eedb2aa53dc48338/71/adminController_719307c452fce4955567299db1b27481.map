{"version":3,"names":["cov_1wljci3vzs","actualCoverage","client_1","s","require","logger_1","__importDefault","prisma","PrismaClient","AdminController","getDashboard","req","res","f","period","b","query","periodDays","Number","dateLimit","Date","setDate","getDate","userStats","articleStats","contactStats","categoryStats","Promise","all","user","count","where","isActive","createdAt","gte","role","article","status","aggregate","_sum","views","contact","in","category","popularArticles","findMany","select","id","title","slug","publishedAt","author","name","orderBy","take","activeAuthors","articles","some","email","_count","recentContacts","subject","dailyStats","$queryRaw","dashboard","days","from","to","statistics","users","total","active","newInPeriod","admins","published","totalViews","contacts","unread","pending","categories","json","success","message","data","error","default","getSystemStats","groupBy","growthStats","by","engagementStats","_avg","allArticles","include","tags","tag","tagCounts","forEach","articleTag","tagName","topTags","Object","entries","sort","a","slice","map","systemStats","growth","engagement","averageViews","totalArticles","getSystemLogs","level","dateFrom","dateTo","search","page","limit","skip","OR","contains","mode","meta","timestamp","endDate","setHours","lte","mockLogs","JSON","stringify","service","now","logs","length","totalPages","Math","ceil","pagination","hasNext","hasPrev","clearOldLogs","olderThanDays","body","currentUser","deletedCount","info","deletedBy","getSystemInfo","systemInfo","version","process","env","APP_VERSION","environment","NODE_ENV","nodeVersion","platform","uptime","memory","memoryUsage","database","features","authentication","fileUpload","emailService","backup","logging","lastBackup","maintenanceMode","createBackup","options","backupData","includeUsers","updatedAt","includeArticles","includeContacts","includeCategories","backupId","backupInfo","createdBy","size","recordCounts","getBackups","mockBackups","backups","getSettings","settings","siteName","siteDescription","contactEmail","contactPhone","address","socialMedia","facebook","instagram","linkedin","businessHours","monday","tuesday","wednesday","thursday","friday","saturday","sunday","newsletter","calculator","blog","testimonials","maintenance","enabled","updateSettings","updatedBy","keys","toggleMaintenanceMode","changedBy","downloadBackup","params","exists","startsWith","downloadedBy","setHeader","deleteBackup","clearCache","pattern","key","clearedBy","clearedAt","enableMaintenance","activatedBy","activatedAt","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\adminController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para filtros de logs\r\ninterface LogFilters {\r\n  level?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  search?: string;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\n// Interface para backup\r\ninterface BackupOptions {\r\n  includeUsers?: boolean;\r\n  includeArticles?: boolean;\r\n  includeContacts?: boolean;\r\n  includeCategories?: boolean;\r\n  includeComments?: boolean;\r\n}\r\n\r\n/**\r\n * Controller responsável pelas funcionalidades administrativas\r\n */\r\nexport class AdminController {\r\n  /**\r\n   * Dashboard com estatísticas gerais\r\n   */\r\n  static async getDashboard(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      // Estatísticas gerais\r\n      const [userStats, articleStats, contactStats, categoryStats] = await Promise.all([\r\n        // Usuários\r\n        Promise.all([\r\n          prisma.user.count(),\r\n          prisma.user.count({ where: { isActive: true } }),\r\n          prisma.user.count({ where: { createdAt: { gte: dateLimit } } }),\r\n          prisma.user.count({ where: { role: 'ADMIN' } })\r\n        ]),\r\n        // Artigos\r\n        Promise.all([\r\n          prisma.article.count(),\r\n          prisma.article.count({ where: { status: 'PUBLISHED' } }),\r\n          prisma.article.count({ where: { createdAt: { gte: dateLimit } } }),\r\n          prisma.article.aggregate({ _sum: { views: true } })\r\n        ]),\r\n        // Contatos\r\n        Promise.all([\r\n          prisma.contact.count(),\r\n          prisma.contact.count({ where: { status: 'PENDING' } }),\r\n          prisma.contact.count({ where: { status: { in: ['PENDING', 'IN_PROGRESS'] } } }),\r\n          prisma.contact.count({ where: { createdAt: { gte: dateLimit } } })\r\n        ]),\r\n        // Categorias\r\n        Promise.all([\r\n          prisma.category.count()\r\n        ])\r\n      ]);\r\n\r\n      // Artigos mais populares\r\n      const popularArticles = await prisma.article.findMany({\r\n        where: { status: 'PUBLISHED' },\r\n        select: {\r\n          id: true,\r\n          title: true,\r\n          slug: true,\r\n          views: true,\r\n          publishedAt: true,\r\n          author: {\r\n            select: {\r\n              name: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: { views: 'desc' },\r\n        take: 5\r\n      });\r\n\r\n      // Usuários mais ativos (por artigos publicados)\r\n      const activeAuthors = await prisma.user.findMany({\r\n        where: {\r\n          articles: {\r\n            some: {\r\n              status: 'PUBLISHED'\r\n            }\r\n          }\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          _count: {\r\n            select: {\r\n              articles: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: {\r\n          articles: {\r\n            _count: 'desc'\r\n          }\r\n        },\r\n        take: 5\r\n      });\r\n\r\n      // Contatos recentes pendentes\r\n      const recentContacts = await prisma.contact.findMany({\r\n        where: { status: 'PENDING' },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          subject: true,\r\n          createdAt: true\r\n        },\r\n        orderBy: { createdAt: 'desc' },\r\n        take: 5\r\n      });\r\n\r\n      // Estatísticas diárias dos últimos 7 dias\r\n      const dailyStats = await prisma.$queryRaw`\r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'users' as type,\r\n          COUNT(*) as count\r\n        FROM User \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        UNION ALL\r\n        \r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'articles' as type,\r\n          COUNT(*) as count\r\n        FROM Article \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        UNION ALL\r\n        \r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'contacts' as type,\r\n          COUNT(*) as count\r\n        FROM Contact \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        ORDER BY date DESC, type\r\n      `;\r\n\r\n      const dashboard = {\r\n        period: {\r\n          days: periodDays,\r\n          from: dateLimit,\r\n          to: new Date()\r\n        },\r\n        statistics: {\r\n          users: {\r\n            total: userStats[0],\r\n            active: userStats[1],\r\n            newInPeriod: userStats[2],\r\n            admins: userStats[3]\r\n          },\r\n          articles: {\r\n            total: articleStats[0],\r\n            published: articleStats[1],\r\n            newInPeriod: articleStats[2],\r\n            totalViews: articleStats[3]._sum.views || 0\r\n          },\r\n          contacts: {\r\n            total: contactStats[0],\r\n            unread: contactStats[1],\r\n            pending: contactStats[2],\r\n            newInPeriod: contactStats[3]\r\n          },\r\n          categories: {\r\n            total: categoryStats[0]\r\n          }\r\n        },\r\n        popularArticles,\r\n        activeAuthors,\r\n        recentContacts,\r\n        dailyStats\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Dashboard carregado com sucesso',\r\n        data: { dashboard }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao carregar dashboard', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estatísticas detalhadas do sistema\r\n   */\r\n  static async getSystemStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30', groupBy = 'day' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      // Estatísticas de crescimento\r\n      const growthStats = await Promise.all([\r\n        // Crescimento de usuários\r\n        prisma.user.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        }),\r\n        // Crescimento de artigos\r\n        prisma.article.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        }),\r\n        // Crescimento de contatos\r\n        prisma.contact.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        })\r\n      ]);\r\n\r\n      // Estatísticas por categoria\r\n      const categoryStats = await prisma.category.findMany({\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          slug: true,\r\n          _count: {\r\n            select: {\r\n              articles: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: {\r\n          articles: {\r\n            _count: 'desc'\r\n          }\r\n        }\r\n      });\r\n\r\n      // Estatísticas de engajamento\r\n      const engagementStats = await prisma.article.aggregate({\r\n        where: {\r\n          status: 'PUBLISHED',\r\n          publishedAt: { gte: dateLimit }\r\n        },\r\n        _avg: { views: true },\r\n        _sum: { views: true },\r\n        _count: true\r\n      });\r\n\r\n      // Top tags\r\n      const allArticles = await prisma.article.findMany({\r\n        where: { status: 'PUBLISHED' },\r\n        include: {\r\n          tags: {\r\n            include: {\r\n              tag: {\r\n                select: { name: true }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      const tagCounts: { [key: string]: number } = {};\r\n      allArticles.forEach(article => {\r\n        article.tags.forEach(articleTag => {\r\n          const tagName = articleTag.tag.name;\r\n          tagCounts[tagName] = (tagCounts[tagName] || 0) + 1;\r\n        });\r\n      });\r\n\r\n      const topTags = Object.entries(tagCounts)\r\n        .sort(([, a], [, b]) => b - a)\r\n        .slice(0, 10)\r\n        .map(([tag, count]) => ({ tag, count }));\r\n\r\n      const systemStats = {\r\n        period: {\r\n          days: periodDays,\r\n          from: dateLimit,\r\n          to: new Date()\r\n        },\r\n        growth: {\r\n          users: growthStats[0],\r\n          articles: growthStats[1],\r\n          contacts: growthStats[2]\r\n        },\r\n        categories: categoryStats,\r\n        engagement: {\r\n          averageViews: engagementStats._avg.views || 0,\r\n          totalViews: engagementStats._sum.views || 0,\r\n          totalArticles: engagementStats._count\r\n        },\r\n        topTags\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estatísticas do sistema obtidas com sucesso',\r\n        data: { systemStats }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estatísticas do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista logs do sistema\r\n   */\r\n  static async getSystemLogs(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        level,\r\n        dateFrom,\r\n        dateTo,\r\n        search,\r\n        page = 1,\r\n        limit = 50\r\n      }: LogFilters = req.query;\r\n\r\n      // Nota: Esta implementação assume que você tem uma tabela de logs\r\n      // Se estiver usando apenas arquivos de log, você precisará implementar\r\n      // uma lógica diferente para ler os arquivos\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      const where: any = {};\r\n\r\n      if (level) {\r\n        where.level = level;\r\n      }\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { message: { contains: search, mode: 'insensitive' } },\r\n          { meta: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.timestamp = {};\r\n        if (dateFrom) {\r\n          where.timestamp.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.timestamp.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Simulação de logs - substitua pela sua implementação real\r\n      const mockLogs = [\r\n        {\r\n          id: '1',\r\n          level: 'info',\r\n          message: 'Sistema iniciado',\r\n          timestamp: new Date(),\r\n          meta: JSON.stringify({ service: 'api' })\r\n        },\r\n        {\r\n          id: '2',\r\n          level: 'error',\r\n          message: 'Erro de conexão com banco de dados',\r\n          timestamp: new Date(Date.now() - 3600000),\r\n          meta: JSON.stringify({ error: 'Connection timeout' })\r\n        }\r\n      ];\r\n\r\n      const logs = mockLogs.slice(skip, skip + take);\r\n      const total = mockLogs.length;\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Logs obtidos com sucesso',\r\n        data: {\r\n          logs,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter logs do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpa logs antigos\r\n   */\r\n  static async clearOldLogs(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { olderThanDays = 30 } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (olderThanDays < 1 || olderThanDays > 365) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Período deve ser entre 1 e 365 dias'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - Number(olderThanDays));\r\n\r\n      // Implementar limpeza de logs aqui\r\n      // const deletedCount = await prisma.log.deleteMany({\r\n      //   where: {\r\n      //     timestamp: { lt: dateLimit }\r\n      //   }\r\n      // });\r\n\r\n      const deletedCount = { count: 0 }; // Mock\r\n\r\n      logger.info('Logs antigos removidos', {\r\n        olderThanDays,\r\n        deletedCount: deletedCount.count,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${deletedCount.count} logs removidos com sucesso`,\r\n        data: { deletedCount: deletedCount.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao limpar logs antigos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Informações do sistema\r\n   */\r\n  static async getSystemInfo(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const systemInfo = {\r\n        version: process.env.APP_VERSION || '1.0.0',\r\n        environment: process.env.NODE_ENV || 'development',\r\n        nodeVersion: process.version,\r\n        platform: process.platform,\r\n        uptime: process.uptime(),\r\n        memory: process.memoryUsage(),\r\n        database: {\r\n          status: 'connected', // Verificar conexão real\r\n          version: 'PostgreSQL 14+' // Obter versão real\r\n        },\r\n        features: {\r\n          authentication: true,\r\n          fileUpload: true,\r\n          emailService: false, // Configurar baseado na implementação\r\n          backup: true,\r\n          logging: true\r\n        },\r\n        lastBackup: null, // Implementar controle de backup\r\n        maintenanceMode: false\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Informações do sistema obtidas com sucesso',\r\n        data: { systemInfo }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter informações do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Backup do banco de dados\r\n   */\r\n  static async createBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const options: BackupOptions = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar lógica de backup aqui\r\n      // Esta é uma implementação simplificada\r\n      const backupData: any = {};\r\n\r\n      if (options.includeUsers !== false) {\r\n        backupData.users = await prisma.user.findMany({\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            role: true,\r\n            isActive: true,\r\n            createdAt: true,\r\n            updatedAt: true\r\n          }\r\n        });\r\n      }\r\n\r\n      if (options.includeArticles !== false) {\r\n        backupData.articles = await prisma.article.findMany({\r\n          include: {\r\n            author: {\r\n              select: { id: true, name: true, email: true }\r\n            },\r\n            categories: {\r\n              include: {\r\n                category: {\r\n                  select: { id: true, name: true, slug: true }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (options.includeContacts !== false) {\r\n        backupData.contacts = await prisma.contact.findMany();\r\n      }\r\n\r\n      if (options.includeCategories !== false) {\r\n        backupData.categories = await prisma.category.findMany();\r\n      }\r\n\r\n      const backupId = `backup_${Date.now()}`;\r\n      const backupInfo = {\r\n        id: backupId,\r\n        createdAt: new Date(),\r\n        createdBy: currentUser.id,\r\n        size: JSON.stringify(backupData).length,\r\n        options,\r\n        recordCounts: {\r\n          users: backupData.users?.length || 0,\r\n          articles: backupData.articles?.length || 0,\r\n          contacts: backupData.contacts?.length || 0,\r\n          categories: backupData.categories?.length || 0\r\n        }\r\n      };\r\n\r\n      // Salvar backup em arquivo ou storage\r\n      // await fs.writeFile(`backups/${backupId}.json`, JSON.stringify(backupData, null, 2));\r\n\r\n      logger.info('Backup criado', {\r\n        backupId,\r\n        createdBy: currentUser.id,\r\n        size: backupInfo.size,\r\n        recordCounts: backupInfo.recordCounts\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Backup criado com sucesso',\r\n        data: { backup: backupInfo }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista backups disponíveis\r\n   */\r\n  static async getBackups(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Implementar listagem de backups do storage/filesystem\r\n      const mockBackups = [\r\n        {\r\n          id: 'backup_1703123456789',\r\n          createdAt: new Date('2023-12-20T10:30:00Z'),\r\n          createdBy: 'admin-user-id',\r\n          size: 1024000,\r\n          recordCounts: {\r\n            users: 25,\r\n            articles: 150,\r\n            contacts: 75,\r\n            categories: 10\r\n          }\r\n        }\r\n      ];\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Backups listados com sucesso',\r\n        data: { backups: mockBackups }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar backups', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém configurações do sistema\r\n   */\r\n  static async getSettings(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Buscar configurações do sistema (simulado - em produção seria uma tabela de settings)\r\n      const settings = {\r\n        siteName: 'Contabilidade Igrejinha',\r\n        siteDescription: 'Serviços contábeis especializados',\r\n        contactEmail: 'contato@contabilidadeigrejinha.com.br',\r\n        contactPhone: '(51) 99999-9999',\r\n        address: 'Rua Principal, 123 - Igrejinha/RS',\r\n        socialMedia: {\r\n          facebook: 'https://facebook.com/contabilidadeigrejinha',\r\n          instagram: 'https://instagram.com/contabilidadeigrejinha',\r\n          linkedin: 'https://linkedin.com/company/contabilidadeigrejinha'\r\n        },\r\n        businessHours: {\r\n          monday: '08:00-18:00',\r\n          tuesday: '08:00-18:00',\r\n          wednesday: '08:00-18:00',\r\n          thursday: '08:00-18:00',\r\n          friday: '08:00-17:00',\r\n          saturday: 'Fechado',\r\n          sunday: 'Fechado'\r\n        },\r\n        features: {\r\n          newsletter: true,\r\n          calculator: true,\r\n          blog: true,\r\n          testimonials: true\r\n        },\r\n        maintenance: {\r\n          enabled: false,\r\n          message: 'Site em manutenção. Voltamos em breve!'\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Configurações obtidas com sucesso',\r\n        data: { settings }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao obter configurações:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza configurações do sistema\r\n   */\r\n  static async updateSettings(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const settings = req.body;\r\n\r\n      // Validações básicas\r\n      if (!settings || typeof settings !== 'object') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados de configuração inválidos'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Em produção, aqui salvaria as configurações no banco de dados\r\n      // Por enquanto, apenas simula a atualização\r\n      logger.info('Configurações atualizadas', {\r\n        updatedBy: req.user?.id || 'system',\r\n        settings: Object.keys(settings)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Configurações atualizadas com sucesso',\r\n        data: { settings }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar configurações:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ativa/desativa modo de manutenção\r\n   */\r\n  static async toggleMaintenanceMode(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { enabled, message } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar controle de modo de manutenção\r\n      // Pode ser através de variável de ambiente, arquivo ou banco de dados\r\n      \r\n      logger.info('Modo de manutenção alterado', {\r\n        enabled,\r\n        message,\r\n        changedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Modo de manutenção ${enabled ? 'ativado' : 'desativado'}`,\r\n        data: {\r\n          maintenanceMode: enabled,\r\n          message: message || null\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao alterar modo de manutenção', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Download de backup\r\n   */\r\n  static async downloadBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do backup é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o backup existe\r\n      // const backupPath = path.join('backups', `${id}.json`);\r\n      // const exists = await fs.access(backupPath).then(() => true).catch(() => false);\r\n      \r\n      // Simulação - em produção verificaria se o arquivo existe\r\n      const exists = id.startsWith('backup_');\r\n      \r\n      if (!exists) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Backup não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Simular dados do backup\r\n      const backupData = {\r\n        id,\r\n        createdAt: new Date(),\r\n        data: {\r\n          users: [],\r\n          articles: [],\r\n          contacts: [],\r\n          categories: []\r\n        }\r\n      };\r\n\r\n      logger.info('Backup baixado', {\r\n        backupId: id,\r\n        downloadedBy: currentUser.id\r\n      });\r\n\r\n      res.setHeader('Content-Type', 'application/json');\r\n      res.setHeader('Content-Disposition', `attachment; filename=\"${id}.json\"`);\r\n      res.status(200).json(backupData);\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao baixar backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove backup\r\n   */\r\n  static async deleteBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do backup é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o backup existe\r\n      const exists = id.startsWith('backup_');\r\n      \r\n      if (!exists) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Backup não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Implementar remoção do arquivo de backup\r\n      // await fs.unlink(path.join('backups', `${id}.json`));\r\n\r\n      logger.info('Backup removido', {\r\n        backupId: id,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Backup removido com sucesso'\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao remover backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpa cache do sistema\r\n   */\r\n  static async clearCache(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { pattern, key } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar limpeza de cache\r\n      // Se usando Redis:\r\n      // if (pattern) {\r\n      //   await redis.eval(`\r\n      //     local keys = redis.call('keys', ARGV[1])\r\n      //     for i=1,#keys,5000 do\r\n      //       redis.call('del', unpack(keys, i, math.min(i+4999, #keys)))\r\n      //     end\r\n      //     return #keys\r\n      //   `, 0, pattern);\r\n      // } else if (key) {\r\n      //   await redis.del(key);\r\n      // } else {\r\n      //   await redis.flushall();\r\n      // }\r\n\r\n      let message = 'Cache limpo com sucesso';\r\n      if (pattern) {\r\n        message = `Cache limpo para padrão: ${pattern}`;\r\n      } else if (key) {\r\n        message = `Cache limpo para chave: ${key}`;\r\n      } else {\r\n        message = 'Todo o cache foi limpo';\r\n      }\r\n\r\n      logger.info('Cache limpo', {\r\n        pattern,\r\n        key,\r\n        clearedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message,\r\n        data: {\r\n          pattern: pattern || null,\r\n          key: key || null,\r\n          clearedAt: new Date()\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao limpar cache', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ativa modo de manutenção\r\n   */\r\n  static async enableMaintenance(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { message = 'Site em manutenção. Voltamos em breve!' } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar ativação do modo de manutenção\r\n      // Pode ser através de variável de ambiente, arquivo ou banco de dados\r\n      // process.env.MAINTENANCE_MODE = 'true';\r\n      // process.env.MAINTENANCE_MESSAGE = message;\r\n      \r\n      logger.info('Modo de manutenção ativado', {\r\n        message,\r\n        activatedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Modo de manutenção ativado',\r\n        data: {\r\n          maintenanceMode: true,\r\n          message,\r\n          activatedAt: new Date()\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao ativar modo de manutenção', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default AdminController;"],"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","ignoreList":[]}
{"version":3,"names":["cov_19mkmeoyjl","actualCoverage","exports","cacheMiddleware","s","userCacheMiddleware","publicCacheMiddleware","articleCacheMiddleware","invalidateCacheMiddleware","invalidateUserCacheMiddleware","invalidatePublicCacheMiddleware","invalidateArticleCacheMiddleware","cacheService_1","require","logger_1","__importDefault","generateDefaultCacheKey","req","f","method","originalUrl","query","user","userId","b","id","queryString","Object","keys","length","JSON","stringify","options","ttl","keyGenerator","condition","skipCache","res","next","cacheKey","cachedData","cacheService","get","default","debug","json","originalJson","responseData","data","call","on","statusCode","set","error","slug","params","identifier","patterns","pattern","delPattern","getUserId","middleware"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\cache.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { cacheService } from '../services/cacheService';\r\nimport logger from '../utils/logger';\r\n\r\n/**\r\n * Interface para opções do middleware de cache\r\n */\r\ninterface CacheOptions {\r\n  ttl?: number; // Tempo de vida em segundos\r\n  keyGenerator?: (req: Request) => string; // Função para gerar chave personalizada\r\n  condition?: (req: Request, res: Response) => boolean; // Condição para cachear\r\n  skipCache?: (req: Request) => boolean; // Condição para pular o cache\r\n}\r\n\r\n/**\r\n * Gera uma chave de cache padrão baseada na requisição\r\n * @param req - Objeto de requisição Express\r\n * @returns Chave de cache\r\n */\r\nfunction generateDefaultCacheKey(req: Request): string {\r\n  const { method, originalUrl, query, user } = req;\r\n  const userId = (user as any)?.id || 'anonymous';\r\n  const queryString = Object.keys(query).length > 0 ? JSON.stringify(query) : '';\r\n  \r\n  return `cache:${method}:${originalUrl}:${userId}:${queryString}`;\r\n}\r\n\r\n/**\r\n * Middleware de cache para requisições HTTP\r\n * @param options - Opções de configuração do cache\r\n * @returns Middleware Express\r\n */\r\nexport function cacheMiddleware(options: CacheOptions = {}) {\r\n  const {\r\n    ttl = 300, // 5 minutos por padrão\r\n    keyGenerator = generateDefaultCacheKey,\r\n    condition = () => true,\r\n    skipCache = () => false\r\n  } = options;\r\n\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      // Pula o cache se a condição for verdadeira\r\n      if (skipCache(req)) {\r\n        return next();\r\n      }\r\n\r\n      // Só cacheia métodos GET\r\n      if (req.method !== 'GET') {\r\n        return next();\r\n      }\r\n\r\n      const cacheKey = keyGenerator(req);\r\n      \r\n      // Tenta obter do cache\r\n      const cachedData = await cacheService.get(cacheKey);\r\n      \r\n      if (cachedData) {\r\n        logger.debug(`Cache hit for key: ${cacheKey}`);\r\n        return res.json(cachedData);\r\n      }\r\n\r\n      // Se não encontrou no cache, intercepta a resposta\r\n      const originalJson = res.json;\r\n      let responseData: any;\r\n\r\n      res.json = function(data: any) {\r\n        responseData = data;\r\n        return originalJson.call(this, data);\r\n      };\r\n\r\n      // Intercepta o final da resposta\r\n      res.on('finish', async () => {\r\n        try {\r\n          // Só cacheia se a resposta foi bem-sucedida e a condição for verdadeira\r\n          if (res.statusCode >= 200 && res.statusCode < 300 && condition(req, res) && responseData) {\r\n            await cacheService.set(cacheKey, responseData, ttl);\r\n            logger.debug(`Cache set for key: ${cacheKey}`);\r\n          }\r\n        } catch (error) {\r\n          logger.error('Error setting cache:', error);\r\n        }\r\n      });\r\n\r\n      next();\r\n    } catch (error) {\r\n      logger.error('Cache middleware error:', error);\r\n      next();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware de cache específico para dados de usuário\r\n * @param ttl - Tempo de vida em segundos (padrão: 600 = 10 minutos)\r\n */\r\nexport function userCacheMiddleware(ttl: number = 600) {\r\n  return cacheMiddleware({\r\n    ttl,\r\n    keyGenerator: (req) => {\r\n      const userId = (req as any).user?.id || 'anonymous';\r\n      return `user:${userId}:${req.originalUrl}`;\r\n    },\r\n    condition: (req, res) => {\r\n      // Só cacheia se o usuário estiver autenticado\r\n      return !!(req as any).user;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Middleware de cache específico para dados públicos\r\n * @param ttl - Tempo de vida em segundos (padrão: 1800 = 30 minutos)\r\n */\r\nexport function publicCacheMiddleware(ttl: number = 1800) {\r\n  return cacheMiddleware({\r\n    ttl,\r\n    keyGenerator: (req) => {\r\n      return `public:${req.originalUrl}:${JSON.stringify(req.query)}`;\r\n    },\r\n    condition: () => true\r\n  });\r\n}\r\n\r\n/**\r\n * Middleware de cache específico para artigos/blog\r\n * @param ttl - Tempo de vida em segundos (padrão: 3600 = 1 hora)\r\n */\r\nexport function articleCacheMiddleware(ttl: number = 3600) {\r\n  return cacheMiddleware({\r\n    ttl,\r\n    keyGenerator: (req) => {\r\n      const { slug, id } = req.params;\r\n      const identifier = slug || id || req.originalUrl;\r\n      return `article:${identifier}:${JSON.stringify(req.query)}`;\r\n    },\r\n    condition: () => true\r\n  });\r\n}\r\n\r\n/**\r\n * Middleware para invalidar cache baseado em padrões\r\n * @param patterns - Padrões de chaves para invalidar\r\n */\r\nexport function invalidateCacheMiddleware(patterns: string[]) {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      // Executa a operação primeiro\r\n      next();\r\n\r\n      // Invalida o cache após a resposta ser enviada\r\n      res.on('finish', async () => {\r\n        if (res.statusCode >= 200 && res.statusCode < 300) {\r\n          for (const pattern of patterns) {\r\n            await cacheService.delPattern(pattern);\r\n            logger.debug(`Cache invalidated for pattern: ${pattern}`);\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Cache invalidation middleware error:', error);\r\n      next();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para invalidar cache de usuário específico\r\n * @param getUserId - Função para extrair o ID do usuário da requisição\r\n */\r\nexport function invalidateUserCacheMiddleware(getUserId?: (req: Request) => string) {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    const pattern = getUserId ? `user:${getUserId(req)}:*` : 'user:*';\r\n    const middleware = invalidateCacheMiddleware([pattern]);\r\n    return middleware(req, res, next);\r\n  };\r\n}\r\n\r\n/**\r\n * Middleware para invalidar cache público\r\n */\r\nexport function invalidatePublicCacheMiddleware() {\r\n  return invalidateCacheMiddleware(['public:*']);\r\n}\r\n\r\n/**\r\n * Middleware para invalidar cache de artigos\r\n */\r\nexport function invalidateArticleCacheMiddleware() {\r\n  return invalidateCacheMiddleware(['article:*']);\r\n}"],"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","ignoreList":[]}
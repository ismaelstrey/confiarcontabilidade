6bc37035ef64c1179e5dd61806acbd16
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMinimalTestServer = exports.createTestServer = void 0;
const express_1 = __importDefault(require("express"));
const swagger_1 = require("../../docs/swagger");
const requestLogger_1 = require("../../middlewares/requestLogger");
const errorHandler_1 = require("../../middlewares/errorHandler");
const security_1 = require("../../middlewares/security");
// Importar rotas individuais
const authRoutes_1 = __importDefault(require("../../routes/authRoutes"));
const userRoutes_1 = __importDefault(require("../../routes/userRoutes"));
const articleRoutes_1 = __importDefault(require("../../routes/articleRoutes"));
const contactRoutes_1 = __importDefault(require("../../routes/contactRoutes"));
const calculatorRoutes_1 = __importDefault(require("../../routes/calculatorRoutes"));
const newsletterRoutes_1 = __importDefault(require("../../routes/newsletterRoutes"));
const uploadRoutes_1 = __importDefault(require("../../routes/uploadRoutes"));
const adminRoutes_1 = __importDefault(require("../../routes/adminRoutes"));
const cacheRoutes_1 = __importDefault(require("../../routes/cacheRoutes"));
/**
 * Cria uma instância do aplicativo Express para testes
 * @returns Aplicativo Express configurado
 */
const createTestServer = () => {
    const app = (0, express_1.default)();
    // Middlewares de segurança
    app.use(security_1.customSecurityHeaders);
    app.use(security_1.helmetMiddleware);
    app.use(security_1.corsMiddleware);
    app.use(security_1.compressionMiddleware);
    app.use(security_1.generalRateLimit);
    app.use(security_1.securityLogger);
    // Parsing de JSON e URL encoded
    app.use(express_1.default.json({ limit: '10mb' }));
    app.use(express_1.default.urlencoded({ extended: true, limit: '10mb' }));
    // Middleware de logging (apenas para testes de integração)
    if (process.env.TEST_LOGGING === 'true') {
        app.use(requestLogger_1.requestLogger);
    }
    // Health check
    app.get('/health', (req, res) => {
        res.status(200).json({
            status: 'OK',
            timestamp: new Date().toISOString(),
            environment: process.env.NODE_ENV || 'development',
        });
    });
    // Documentação Swagger (apenas se não for teste unitário)
    if (process.env.JEST_WORKER_ID === undefined || process.env.TEST_SWAGGER === 'true') {
        (0, swagger_1.setupSwagger)(app);
    }
    // Configurar rotas da API com middlewares específicos
    const apiRouter = express_1.default.Router();
    apiRouter.use('/auth', security_1.authRateLimit, authRoutes_1.default);
    apiRouter.use('/users', security_1.apiRateLimit, userRoutes_1.default);
    apiRouter.use('/articles', security_1.apiRateLimit, articleRoutes_1.default);
    apiRouter.use('/contact', security_1.apiRateLimit, contactRoutes_1.default);
    apiRouter.use('/calculator', security_1.apiRateLimit, calculatorRoutes_1.default);
    apiRouter.use('/newsletter', security_1.apiRateLimit, newsletterRoutes_1.default);
    apiRouter.use('/upload', security_1.uploadRateLimit, uploadRoutes_1.default);
    apiRouter.use('/admin', security_1.apiRateLimit, adminRoutes_1.default);
    apiRouter.use('/cache', security_1.apiRateLimit, cacheRoutes_1.default);
    app.use('/api', apiRouter);
    // Middleware de tratamento de erros
    app.use(errorHandler_1.errorHandler);
    // Rota 404
    app.use('*', (req, res) => {
        res.status(404).json({
            success: false,
            message: 'Rota não encontrada',
            path: req.originalUrl,
        });
    });
    return app;
};
exports.createTestServer = createTestServer;
/**
 * Cria um servidor de teste simplificado para testes unitários
 * @returns Aplicativo Express mínimo
 */
const createMinimalTestServer = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    return app;
};
exports.createMinimalTestServer = createMinimalTestServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\adminController.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\adminController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para filtros de logs\r\ninterface LogFilters {\r\n  level?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  search?: string;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\n// Interface para backup\r\ninterface BackupOptions {\r\n  includeUsers?: boolean;\r\n  includeArticles?: boolean;\r\n  includeContacts?: boolean;\r\n  includeCategories?: boolean;\r\n  includeComments?: boolean;\r\n}\r\n\r\n/**\r\n * Controller responsável pelas funcionalidades administrativas\r\n */\r\nexport class AdminController {\r\n  /**\r\n   * Dashboard com estatísticas gerais\r\n   */\r\n  static async getDashboard(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      // Estatísticas gerais\r\n      const [userStats, articleStats, contactStats, categoryStats] = await Promise.all([\r\n        // Usuários\r\n        Promise.all([\r\n          prisma.user.count(),\r\n          prisma.user.count({ where: { isActive: true } }),\r\n          prisma.user.count({ where: { createdAt: { gte: dateLimit } } }),\r\n          prisma.user.count({ where: { role: 'ADMIN' } })\r\n        ]),\r\n        // Artigos\r\n        Promise.all([\r\n          prisma.article.count(),\r\n          prisma.article.count({ where: { status: 'PUBLISHED' } }),\r\n          prisma.article.count({ where: { createdAt: { gte: dateLimit } } }),\r\n          prisma.article.aggregate({ _sum: { views: true } })\r\n        ]),\r\n        // Contatos\r\n        Promise.all([\r\n          prisma.contact.count(),\r\n          prisma.contact.count({ where: { status: 'PENDING' } }),\r\n          prisma.contact.count({ where: { status: { in: ['PENDING', 'IN_PROGRESS'] } } }),\r\n          prisma.contact.count({ where: { createdAt: { gte: dateLimit } } })\r\n        ]),\r\n        // Categorias\r\n        Promise.all([\r\n          prisma.category.count()\r\n        ])\r\n      ]);\r\n\r\n      // Artigos mais populares\r\n      const popularArticles = await prisma.article.findMany({\r\n        where: { status: 'PUBLISHED' },\r\n        select: {\r\n          id: true,\r\n          title: true,\r\n          slug: true,\r\n          views: true,\r\n          publishedAt: true,\r\n          author: {\r\n            select: {\r\n              name: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: { views: 'desc' },\r\n        take: 5\r\n      });\r\n\r\n      // Usuários mais ativos (por artigos publicados)\r\n      const activeAuthors = await prisma.user.findMany({\r\n        where: {\r\n          articles: {\r\n            some: {\r\n              status: 'PUBLISHED'\r\n            }\r\n          }\r\n        },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          _count: {\r\n            select: {\r\n              articles: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: {\r\n          articles: {\r\n            _count: 'desc'\r\n          }\r\n        },\r\n        take: 5\r\n      });\r\n\r\n      // Contatos recentes pendentes\r\n      const recentContacts = await prisma.contact.findMany({\r\n        where: { status: 'PENDING' },\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          email: true,\r\n          subject: true,\r\n          createdAt: true\r\n        },\r\n        orderBy: { createdAt: 'desc' },\r\n        take: 5\r\n      });\r\n\r\n      // Estatísticas diárias dos últimos 7 dias\r\n      const dailyStats = await prisma.$queryRaw`\r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'users' as type,\r\n          COUNT(*) as count\r\n        FROM User \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        UNION ALL\r\n        \r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'articles' as type,\r\n          COUNT(*) as count\r\n        FROM Article \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        UNION ALL\r\n        \r\n        SELECT \r\n          DATE(createdAt) as date,\r\n          'contacts' as type,\r\n          COUNT(*) as count\r\n        FROM Contact \r\n        WHERE createdAt >= DATE_SUB(NOW(), INTERVAL 7 DAY)\r\n        GROUP BY DATE(createdAt)\r\n        \r\n        ORDER BY date DESC, type\r\n      `;\r\n\r\n      const dashboard = {\r\n        period: {\r\n          days: periodDays,\r\n          from: dateLimit,\r\n          to: new Date()\r\n        },\r\n        statistics: {\r\n          users: {\r\n            total: userStats[0],\r\n            active: userStats[1],\r\n            newInPeriod: userStats[2],\r\n            admins: userStats[3]\r\n          },\r\n          articles: {\r\n            total: articleStats[0],\r\n            published: articleStats[1],\r\n            newInPeriod: articleStats[2],\r\n            totalViews: articleStats[3]._sum.views || 0\r\n          },\r\n          contacts: {\r\n            total: contactStats[0],\r\n            unread: contactStats[1],\r\n            pending: contactStats[2],\r\n            newInPeriod: contactStats[3]\r\n          },\r\n          categories: {\r\n            total: categoryStats[0]\r\n          }\r\n        },\r\n        popularArticles,\r\n        activeAuthors,\r\n        recentContacts,\r\n        dailyStats\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Dashboard carregado com sucesso',\r\n        data: { dashboard }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao carregar dashboard', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Estatísticas detalhadas do sistema\r\n   */\r\n  static async getSystemStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30', groupBy = 'day' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      // Estatísticas de crescimento\r\n      const growthStats = await Promise.all([\r\n        // Crescimento de usuários\r\n        prisma.user.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        }),\r\n        // Crescimento de artigos\r\n        prisma.article.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        }),\r\n        // Crescimento de contatos\r\n        prisma.contact.groupBy({\r\n          by: ['createdAt'],\r\n          where: { createdAt: { gte: dateLimit } },\r\n          _count: true,\r\n          orderBy: { createdAt: 'asc' }\r\n        })\r\n      ]);\r\n\r\n      // Estatísticas por categoria\r\n      const categoryStats = await prisma.category.findMany({\r\n        select: {\r\n          id: true,\r\n          name: true,\r\n          slug: true,\r\n          _count: {\r\n            select: {\r\n              articles: true\r\n            }\r\n          }\r\n        },\r\n        orderBy: {\r\n          articles: {\r\n            _count: 'desc'\r\n          }\r\n        }\r\n      });\r\n\r\n      // Estatísticas de engajamento\r\n      const engagementStats = await prisma.article.aggregate({\r\n        where: {\r\n          status: 'PUBLISHED',\r\n          publishedAt: { gte: dateLimit }\r\n        },\r\n        _avg: { views: true },\r\n        _sum: { views: true },\r\n        _count: true\r\n      });\r\n\r\n      // Top tags\r\n      const allArticles = await prisma.article.findMany({\r\n        where: { status: 'PUBLISHED' },\r\n        include: {\r\n          tags: {\r\n            include: {\r\n              tag: {\r\n                select: { name: true }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      const tagCounts: { [key: string]: number } = {};\r\n      allArticles.forEach(article => {\r\n        article.tags.forEach(articleTag => {\r\n          const tagName = articleTag.tag.name;\r\n          tagCounts[tagName] = (tagCounts[tagName] || 0) + 1;\r\n        });\r\n      });\r\n\r\n      const topTags = Object.entries(tagCounts)\r\n        .sort(([, a], [, b]) => b - a)\r\n        .slice(0, 10)\r\n        .map(([tag, count]) => ({ tag, count }));\r\n\r\n      const systemStats = {\r\n        period: {\r\n          days: periodDays,\r\n          from: dateLimit,\r\n          to: new Date()\r\n        },\r\n        growth: {\r\n          users: growthStats[0],\r\n          articles: growthStats[1],\r\n          contacts: growthStats[2]\r\n        },\r\n        categories: categoryStats,\r\n        engagement: {\r\n          averageViews: engagementStats._avg.views || 0,\r\n          totalViews: engagementStats._sum.views || 0,\r\n          totalArticles: engagementStats._count\r\n        },\r\n        topTags\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estatísticas do sistema obtidas com sucesso',\r\n        data: { systemStats }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estatísticas do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista logs do sistema\r\n   */\r\n  static async getSystemLogs(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        level,\r\n        dateFrom,\r\n        dateTo,\r\n        search,\r\n        page = 1,\r\n        limit = 50\r\n      }: LogFilters = req.query;\r\n\r\n      // Nota: Esta implementação assume que você tem uma tabela de logs\r\n      // Se estiver usando apenas arquivos de log, você precisará implementar\r\n      // uma lógica diferente para ler os arquivos\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      const where: any = {};\r\n\r\n      if (level) {\r\n        where.level = level;\r\n      }\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { message: { contains: search, mode: 'insensitive' } },\r\n          { meta: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.timestamp = {};\r\n        if (dateFrom) {\r\n          where.timestamp.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.timestamp.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Simulação de logs - substitua pela sua implementação real\r\n      const mockLogs = [\r\n        {\r\n          id: '1',\r\n          level: 'info',\r\n          message: 'Sistema iniciado',\r\n          timestamp: new Date(),\r\n          meta: JSON.stringify({ service: 'api' })\r\n        },\r\n        {\r\n          id: '2',\r\n          level: 'error',\r\n          message: 'Erro de conexão com banco de dados',\r\n          timestamp: new Date(Date.now() - 3600000),\r\n          meta: JSON.stringify({ error: 'Connection timeout' })\r\n        }\r\n      ];\r\n\r\n      const logs = mockLogs.slice(skip, skip + take);\r\n      const total = mockLogs.length;\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Logs obtidos com sucesso',\r\n        data: {\r\n          logs,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter logs do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpa logs antigos\r\n   */\r\n  static async clearOldLogs(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { olderThanDays = 30 } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (olderThanDays < 1 || olderThanDays > 365) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Período deve ser entre 1 e 365 dias'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - Number(olderThanDays));\r\n\r\n      // Implementar limpeza de logs aqui\r\n      // const deletedCount = await prisma.log.deleteMany({\r\n      //   where: {\r\n      //     timestamp: { lt: dateLimit }\r\n      //   }\r\n      // });\r\n\r\n      const deletedCount = { count: 0 }; // Mock\r\n\r\n      logger.info('Logs antigos removidos', {\r\n        olderThanDays,\r\n        deletedCount: deletedCount.count,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `${deletedCount.count} logs removidos com sucesso`,\r\n        data: { deletedCount: deletedCount.count }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao limpar logs antigos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Informações do sistema\r\n   */\r\n  static async getSystemInfo(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const systemInfo = {\r\n        version: process.env.APP_VERSION || '1.0.0',\r\n        environment: process.env.NODE_ENV || 'development',\r\n        nodeVersion: process.version,\r\n        platform: process.platform,\r\n        uptime: process.uptime(),\r\n        memory: process.memoryUsage(),\r\n        database: {\r\n          status: 'connected', // Verificar conexão real\r\n          version: 'PostgreSQL 14+' // Obter versão real\r\n        },\r\n        features: {\r\n          authentication: true,\r\n          fileUpload: true,\r\n          emailService: false, // Configurar baseado na implementação\r\n          backup: true,\r\n          logging: true\r\n        },\r\n        lastBackup: null, // Implementar controle de backup\r\n        maintenanceMode: false\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Informações do sistema obtidas com sucesso',\r\n        data: { systemInfo }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter informações do sistema', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Backup do banco de dados\r\n   */\r\n  static async createBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const options: BackupOptions = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar lógica de backup aqui\r\n      // Esta é uma implementação simplificada\r\n      const backupData: any = {};\r\n\r\n      if (options.includeUsers !== false) {\r\n        backupData.users = await prisma.user.findMany({\r\n          select: {\r\n            id: true,\r\n            name: true,\r\n            email: true,\r\n            role: true,\r\n            isActive: true,\r\n            createdAt: true,\r\n            updatedAt: true\r\n          }\r\n        });\r\n      }\r\n\r\n      if (options.includeArticles !== false) {\r\n        backupData.articles = await prisma.article.findMany({\r\n          include: {\r\n            author: {\r\n              select: { id: true, name: true, email: true }\r\n            },\r\n            categories: {\r\n              include: {\r\n                category: {\r\n                  select: { id: true, name: true, slug: true }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (options.includeContacts !== false) {\r\n        backupData.contacts = await prisma.contact.findMany();\r\n      }\r\n\r\n      if (options.includeCategories !== false) {\r\n        backupData.categories = await prisma.category.findMany();\r\n      }\r\n\r\n      const backupId = `backup_${Date.now()}`;\r\n      const backupInfo = {\r\n        id: backupId,\r\n        createdAt: new Date(),\r\n        createdBy: currentUser.id,\r\n        size: JSON.stringify(backupData).length,\r\n        options,\r\n        recordCounts: {\r\n          users: backupData.users?.length || 0,\r\n          articles: backupData.articles?.length || 0,\r\n          contacts: backupData.contacts?.length || 0,\r\n          categories: backupData.categories?.length || 0\r\n        }\r\n      };\r\n\r\n      // Salvar backup em arquivo ou storage\r\n      // await fs.writeFile(`backups/${backupId}.json`, JSON.stringify(backupData, null, 2));\r\n\r\n      logger.info('Backup criado', {\r\n        backupId,\r\n        createdBy: currentUser.id,\r\n        size: backupInfo.size,\r\n        recordCounts: backupInfo.recordCounts\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Backup criado com sucesso',\r\n        data: { backup: backupInfo }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista backups disponíveis\r\n   */\r\n  static async getBackups(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Implementar listagem de backups do storage/filesystem\r\n      const mockBackups = [\r\n        {\r\n          id: 'backup_1703123456789',\r\n          createdAt: new Date('2023-12-20T10:30:00Z'),\r\n          createdBy: 'admin-user-id',\r\n          size: 1024000,\r\n          recordCounts: {\r\n            users: 25,\r\n            articles: 150,\r\n            contacts: 75,\r\n            categories: 10\r\n          }\r\n        }\r\n      ];\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Backups listados com sucesso',\r\n        data: { backups: mockBackups }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar backups', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém configurações do sistema\r\n   */\r\n  static async getSettings(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Buscar configurações do sistema (simulado - em produção seria uma tabela de settings)\r\n      const settings = {\r\n        siteName: 'Contabilidade Igrejinha',\r\n        siteDescription: 'Serviços contábeis especializados',\r\n        contactEmail: 'contato@contabilidadeigrejinha.com.br',\r\n        contactPhone: '(51) 99999-9999',\r\n        address: 'Rua Principal, 123 - Igrejinha/RS',\r\n        socialMedia: {\r\n          facebook: 'https://facebook.com/contabilidadeigrejinha',\r\n          instagram: 'https://instagram.com/contabilidadeigrejinha',\r\n          linkedin: 'https://linkedin.com/company/contabilidadeigrejinha'\r\n        },\r\n        businessHours: {\r\n          monday: '08:00-18:00',\r\n          tuesday: '08:00-18:00',\r\n          wednesday: '08:00-18:00',\r\n          thursday: '08:00-18:00',\r\n          friday: '08:00-17:00',\r\n          saturday: 'Fechado',\r\n          sunday: 'Fechado'\r\n        },\r\n        features: {\r\n          newsletter: true,\r\n          calculator: true,\r\n          blog: true,\r\n          testimonials: true\r\n        },\r\n        maintenance: {\r\n          enabled: false,\r\n          message: 'Site em manutenção. Voltamos em breve!'\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Configurações obtidas com sucesso',\r\n        data: { settings }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao obter configurações:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza configurações do sistema\r\n   */\r\n  static async updateSettings(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const settings = req.body;\r\n\r\n      // Validações básicas\r\n      if (!settings || typeof settings !== 'object') {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados de configuração inválidos'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Em produção, aqui salvaria as configurações no banco de dados\r\n      // Por enquanto, apenas simula a atualização\r\n      logger.info('Configurações atualizadas', {\r\n        updatedBy: req.user?.id || 'system',\r\n        settings: Object.keys(settings)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Configurações atualizadas com sucesso',\r\n        data: { settings }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar configurações:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ativa/desativa modo de manutenção\r\n   */\r\n  static async toggleMaintenanceMode(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { enabled, message } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar controle de modo de manutenção\r\n      // Pode ser através de variável de ambiente, arquivo ou banco de dados\r\n      \r\n      logger.info('Modo de manutenção alterado', {\r\n        enabled,\r\n        message,\r\n        changedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Modo de manutenção ${enabled ? 'ativado' : 'desativado'}`,\r\n        data: {\r\n          maintenanceMode: enabled,\r\n          message: message || null\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao alterar modo de manutenção', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Download de backup\r\n   */\r\n  static async downloadBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do backup é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o backup existe\r\n      // const backupPath = path.join('backups', `${id}.json`);\r\n      // const exists = await fs.access(backupPath).then(() => true).catch(() => false);\r\n      \r\n      // Simulação - em produção verificaria se o arquivo existe\r\n      const exists = id.startsWith('backup_');\r\n      \r\n      if (!exists) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Backup não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Simular dados do backup\r\n      const backupData = {\r\n        id,\r\n        createdAt: new Date(),\r\n        data: {\r\n          users: [],\r\n          articles: [],\r\n          contacts: [],\r\n          categories: []\r\n        }\r\n      };\r\n\r\n      logger.info('Backup baixado', {\r\n        backupId: id,\r\n        downloadedBy: currentUser.id\r\n      });\r\n\r\n      res.setHeader('Content-Type', 'application/json');\r\n      res.setHeader('Content-Disposition', `attachment; filename=\"${id}.json\"`);\r\n      res.status(200).json(backupData);\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao baixar backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove backup\r\n   */\r\n  static async deleteBackup(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do backup é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o backup existe\r\n      const exists = id.startsWith('backup_');\r\n      \r\n      if (!exists) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Backup não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Implementar remoção do arquivo de backup\r\n      // await fs.unlink(path.join('backups', `${id}.json`));\r\n\r\n      logger.info('Backup removido', {\r\n        backupId: id,\r\n        deletedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Backup removido com sucesso'\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao remover backup', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limpa cache do sistema\r\n   */\r\n  static async clearCache(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { pattern, key } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar limpeza de cache\r\n      // Se usando Redis:\r\n      // if (pattern) {\r\n      //   await redis.eval(`\r\n      //     local keys = redis.call('keys', ARGV[1])\r\n      //     for i=1,#keys,5000 do\r\n      //       redis.call('del', unpack(keys, i, math.min(i+4999, #keys)))\r\n      //     end\r\n      //     return #keys\r\n      //   `, 0, pattern);\r\n      // } else if (key) {\r\n      //   await redis.del(key);\r\n      // } else {\r\n      //   await redis.flushall();\r\n      // }\r\n\r\n      let message = 'Cache limpo com sucesso';\r\n      if (pattern) {\r\n        message = `Cache limpo para padrão: ${pattern}`;\r\n      } else if (key) {\r\n        message = `Cache limpo para chave: ${key}`;\r\n      } else {\r\n        message = 'Todo o cache foi limpo';\r\n      }\r\n\r\n      logger.info('Cache limpo', {\r\n        pattern,\r\n        key,\r\n        clearedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message,\r\n        data: {\r\n          pattern: pattern || null,\r\n          key: key || null,\r\n          clearedAt: new Date()\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao limpar cache', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ativa modo de manutenção\r\n   */\r\n  static async enableMaintenance(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { message = 'Site em manutenção. Voltamos em breve!' } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Implementar ativação do modo de manutenção\r\n      // Pode ser através de variável de ambiente, arquivo ou banco de dados\r\n      // process.env.MAINTENANCE_MODE = 'true';\r\n      // process.env.MAINTENANCE_MESSAGE = message;\r\n      \r\n      logger.info('Modo de manutenção ativado', {\r\n        message,\r\n        activatedBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Modo de manutenção ativado',\r\n        data: {\r\n          maintenanceMode: true,\r\n          message,\r\n          activatedAt: new Date()\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao ativar modo de manutenção', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default AdminController;"],"version":3}
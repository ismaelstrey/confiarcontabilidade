8bc4ed0e6a34c9e445d8a498a842b6f4
"use strict";

/* istanbul ignore next */
function cov_2asxumotdg() {
  var path = "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\adminRoutes.ts";
  var hash = "9fb368cfbea670a4f365c57ae54158bcb50f7052";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\adminRoutes.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 45
        }
      },
      "5": {
        start: {
          line: 8,
          column: 26
        },
        end: {
          line: 8,
          column: 84
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "7": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 234,
          column: 142
        }
      },
      "8": {
        start: {
          line: 234,
          column: 92
        },
        end: {
          line: 234,
          column: 140
        }
      },
      "9": {
        start: {
          line: 260,
          column: 0
        },
        end: {
          line: 260,
          column: 145
        }
      },
      "10": {
        start: {
          line: 260,
          column: 94
        },
        end: {
          line: 260,
          column: 143
        }
      },
      "11": {
        start: {
          line: 359,
          column: 0
        },
        end: {
          line: 359,
          column: 147
        }
      },
      "12": {
        start: {
          line: 359,
          column: 96
        },
        end: {
          line: 359,
          column: 145
        }
      },
      "13": {
        start: {
          line: 429,
          column: 0
        },
        end: {
          line: 429,
          column: 138
        }
      },
      "14": {
        start: {
          line: 429,
          column: 90
        },
        end: {
          line: 429,
          column: 136
        }
      },
      "15": {
        start: {
          line: 481,
          column: 0
        },
        end: {
          line: 481,
          column: 141
        }
      },
      "16": {
        start: {
          line: 481,
          column: 91
        },
        end: {
          line: 481,
          column: 139
        }
      },
      "17": {
        start: {
          line: 512,
          column: 0
        },
        end: {
          line: 512,
          column: 155
        }
      },
      "18": {
        start: {
          line: 512,
          column: 103
        },
        end: {
          line: 512,
          column: 153
        }
      },
      "19": {
        start: {
          line: 547,
          column: 0
        },
        end: {
          line: 547,
          column: 147
        }
      },
      "20": {
        start: {
          line: 547,
          column: 97
        },
        end: {
          line: 547,
          column: 145
        }
      },
      "21": {
        start: {
          line: 586,
          column: 0
        },
        end: {
          line: 586,
          column: 140
        }
      },
      "22": {
        start: {
          line: 586,
          column: 91
        },
        end: {
          line: 586,
          column: 138
        }
      },
      "23": {
        start: {
          line: 649,
          column: 0
        },
        end: {
          line: 649,
          column: 143
        }
      },
      "24": {
        start: {
          line: 649,
          column: 91
        },
        end: {
          line: 649,
          column: 141
        }
      },
      "25": {
        start: {
          line: 699,
          column: 0
        },
        end: {
          line: 699,
          column: 143
        }
      },
      "26": {
        start: {
          line: 699,
          column: 95
        },
        end: {
          line: 699,
          column: 141
        }
      },
      "27": {
        start: {
          line: 754,
          column: 0
        },
        end: {
          line: 754,
          column: 150
        }
      },
      "28": {
        start: {
          line: 754,
          column: 95
        },
        end: {
          line: 754,
          column: 148
        }
      },
      "29": {
        start: {
          line: 755,
          column: 0
        },
        end: {
          line: 755,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 234,
            column: 78
          },
          end: {
            line: 234,
            column: 79
          }
        },
        loc: {
          start: {
            line: 234,
            column: 92
          },
          end: {
            line: 234,
            column: 140
          }
        },
        line: 234
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 260,
            column: 80
          },
          end: {
            line: 260,
            column: 81
          }
        },
        loc: {
          start: {
            line: 260,
            column: 94
          },
          end: {
            line: 260,
            column: 143
          }
        },
        line: 260
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 359,
            column: 82
          },
          end: {
            line: 359,
            column: 83
          }
        },
        loc: {
          start: {
            line: 359,
            column: 96
          },
          end: {
            line: 359,
            column: 145
          }
        },
        line: 359
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 429,
            column: 76
          },
          end: {
            line: 429,
            column: 77
          }
        },
        loc: {
          start: {
            line: 429,
            column: 90
          },
          end: {
            line: 429,
            column: 136
          }
        },
        line: 429
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 481,
            column: 77
          },
          end: {
            line: 481,
            column: 78
          }
        },
        loc: {
          start: {
            line: 481,
            column: 91
          },
          end: {
            line: 481,
            column: 139
          }
        },
        line: 481
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 512,
            column: 89
          },
          end: {
            line: 512,
            column: 90
          }
        },
        loc: {
          start: {
            line: 512,
            column: 103
          },
          end: {
            line: 512,
            column: 153
          }
        },
        line: 512
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 547,
            column: 83
          },
          end: {
            line: 547,
            column: 84
          }
        },
        loc: {
          start: {
            line: 547,
            column: 97
          },
          end: {
            line: 547,
            column: 145
          }
        },
        line: 547
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 586,
            column: 77
          },
          end: {
            line: 586,
            column: 78
          }
        },
        loc: {
          start: {
            line: 586,
            column: 91
          },
          end: {
            line: 586,
            column: 138
          }
        },
        line: 586
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 649,
            column: 77
          },
          end: {
            line: 649,
            column: 78
          }
        },
        loc: {
          start: {
            line: 649,
            column: 91
          },
          end: {
            line: 649,
            column: 141
          }
        },
        line: 649
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 699,
            column: 81
          },
          end: {
            line: 699,
            column: 82
          }
        },
        loc: {
          start: {
            line: 699,
            column: 95
          },
          end: {
            line: 699,
            column: 141
          }
        },
        line: 699
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 754,
            column: 81
          },
          end: {
            line: 754,
            column: 82
          }
        },
        loc: {
          start: {
            line: 754,
            column: 95
          },
          end: {
            line: 754,
            column: 148
          }
        },
        line: 754
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\adminRoutes.ts",
      mappings: "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",
      names: [],
      sources: ["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\adminRoutes.ts"],
      sourcesContent: ["import { Router } from 'express';\r\nimport { authenticate, authorize } from '../middlewares/auth';\r\nimport AdminController from '../controllers/adminController';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     DashboardStats:\r\n *       type: object\r\n *       properties:\r\n *         users:\r\n *           type: object\r\n *           properties:\r\n *             total:\r\n *               type: integer\r\n *             active:\r\n *               type: integer\r\n *             newThisMonth:\r\n *               type: integer\r\n *             byRole:\r\n *               type: object\r\n *               properties:\r\n *                 admin:\r\n *                   type: integer\r\n *                 editor:\r\n *                   type: integer\r\n *                 user:\r\n *                   type: integer\r\n *         articles:\r\n *           type: object\r\n *           properties:\r\n *             total:\r\n *               type: integer\r\n *             published:\r\n *               type: integer\r\n *             draft:\r\n *               type: integer\r\n *             thisMonth:\r\n *               type: integer\r\n *             totalViews:\r\n *               type: integer\r\n *             totalLikes:\r\n *               type: integer\r\n *         contacts:\r\n *           type: object\r\n *           properties:\r\n *             total:\r\n *               type: integer\r\n *             pending:\r\n *               type: integer\r\n *             replied:\r\n *               type: integer\r\n *             thisMonth:\r\n *               type: integer\r\n *         newsletter:\r\n *           type: object\r\n *           properties:\r\n *             subscribers:\r\n *               type: integer\r\n *             activeSubscribers:\r\n *               type: integer\r\n *             campaigns:\r\n *               type: integer\r\n *             thisMonth:\r\n *               type: integer\r\n *         uploads:\r\n *           type: object\r\n *           properties:\r\n *             total:\r\n *               type: integer\r\n *             totalSize:\r\n *               type: string\r\n *             thisMonth:\r\n *               type: integer\r\n *             byType:\r\n *               type: object\r\n *         system:\r\n *           type: object\r\n *           properties:\r\n *             uptime:\r\n *               type: string\r\n *             version:\r\n *               type: string\r\n *             environment:\r\n *               type: string\r\n *             lastBackup:\r\n *               type: string\r\n *               format: date-time\r\n *     SystemInfo:\r\n *       type: object\r\n *       properties:\r\n *         server:\r\n *           type: object\r\n *           properties:\r\n *             platform:\r\n *               type: string\r\n *             nodeVersion:\r\n *               type: string\r\n *             memory:\r\n *               type: object\r\n *               properties:\r\n *                 used:\r\n *                   type: string\r\n *                 total:\r\n *                   type: string\r\n *                 percentage:\r\n *                   type: number\r\n *             cpu:\r\n *               type: object\r\n *               properties:\r\n *                 usage:\r\n *                   type: number\r\n *                 cores:\r\n *                   type: integer\r\n *             uptime:\r\n *               type: string\r\n *         database:\r\n *           type: object\r\n *           properties:\r\n *             status:\r\n *               type: string\r\n *             version:\r\n *               type: string\r\n *             size:\r\n *               type: string\r\n *             connections:\r\n *               type: integer\r\n *         cache:\r\n *           type: object\r\n *           properties:\r\n *             status:\r\n *               type: string\r\n *             memory:\r\n *               type: string\r\n *             keys:\r\n *               type: integer\r\n *             hitRate:\r\n *               type: number\r\n *     ActivityLog:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         userId:\r\n *           type: string\r\n *         userName:\r\n *           type: string\r\n *         action:\r\n *           type: string\r\n *         resource:\r\n *           type: string\r\n *         resourceId:\r\n *           type: string\r\n *         details:\r\n *           type: object\r\n *         ipAddress:\r\n *           type: string\r\n *         userAgent:\r\n *           type: string\r\n *         timestamp:\r\n *           type: string\r\n *           format: date-time\r\n *     BackupInfo:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         filename:\r\n *           type: string\r\n *         size:\r\n *           type: string\r\n *         type:\r\n *           type: string\r\n *           enum: [full, incremental]\r\n *         status:\r\n *           type: string\r\n *           enum: [completed, failed, in_progress]\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *         duration:\r\n *           type: string\r\n *     SettingItem:\r\n *       type: object\r\n *       properties:\r\n *         key:\r\n *           type: string\r\n *         value:\r\n *           type: string\r\n *         type:\r\n *           type: string\r\n *           enum: [string, number, boolean, json]\r\n *         category:\r\n *           type: string\r\n *         description:\r\n *           type: string\r\n *         isPublic:\r\n *           type: boolean\r\n *         updatedAt:\r\n *           type: string\r\n *           format: date-time\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/dashboard:\r\n *   get:\r\n *     summary: Obter estat\xEDsticas do dashboard administrativo\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Estat\xEDsticas do dashboard\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/DashboardStats'\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n */\r\nrouter.get('/dashboard', authenticate, authorize('ADMIN'), (req, res) => AdminController.getDashboard(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/system-info:\r\n *   get:\r\n *     summary: Obter informa\xE7\xF5es do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Informa\xE7\xF5es do sistema\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/SystemInfo'\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n */\r\nrouter.get('/system-info', authenticate, authorize('ADMIN'), (req, res) => AdminController.getSystemInfo(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/activity-logs:\r\n *   get:\r\n *     summary: Listar logs de atividade\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: N\xFAmero da p\xE1gina\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 100\r\n *           default: 50\r\n *         description: Itens por p\xE1gina\r\n *       - in: query\r\n *         name: userId\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por usu\xE1rio\r\n *       - in: query\r\n *         name: action\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por a\xE7\xE3o\r\n *       - in: query\r\n *         name: resource\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por recurso\r\n *       - in: query\r\n *         name: dateFrom\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Data inicial (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: dateTo\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Data final (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: sortBy\r\n *         schema:\r\n *           type: string\r\n *           enum: [timestamp, action, resource]\r\n *           default: timestamp\r\n *         description: Campo para ordena\xE7\xE3o\r\n *       - in: query\r\n *         name: sortOrder\r\n *         schema:\r\n *           type: string\r\n *           enum: [asc, desc]\r\n *           default: desc\r\n *         description: Ordem da classifica\xE7\xE3o\r\n *     responses:\r\n *       200:\r\n *         description: Lista de logs de atividade\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     logs:\r\n *                       type: array\r\n *                       items:\r\n *                         $ref: '#/components/schemas/ActivityLog'\r\n *                     pagination:\r\n *                       type: object\r\n *                       properties:\r\n *                         page:\r\n *                           type: integer\r\n *                         limit:\r\n *                           type: integer\r\n *                         total:\r\n *                           type: integer\r\n *                         pages:\r\n *                           type: integer\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n */\r\nrouter.get('/activity-logs', authenticate, authorize('ADMIN'), (req, res) => AdminController.getSystemLogs(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/backups:\r\n *   get:\r\n *     summary: Listar backups do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: N\xFAmero da p\xE1gina\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 50\r\n *           default: 20\r\n *         description: Itens por p\xE1gina\r\n *       - in: query\r\n *         name: type\r\n *         schema:\r\n *           type: string\r\n *           enum: [full, incremental]\r\n *         description: Filtrar por tipo de backup\r\n *       - in: query\r\n *         name: status\r\n *         schema:\r\n *           type: string\r\n *           enum: [completed, failed, in_progress]\r\n *         description: Filtrar por status\r\n *     responses:\r\n *       200:\r\n *         description: Lista de backups\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     backups:\r\n *                       type: array\r\n *                       items:\r\n *                         $ref: '#/components/schemas/BackupInfo'\r\n *                     pagination:\r\n *                       type: object\r\n *                       properties:\r\n *                         page:\r\n *                           type: integer\r\n *                         limit:\r\n *                           type: integer\r\n *                         total:\r\n *                           type: integer\r\n *                         pages:\r\n *                           type: integer\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n */\r\nrouter.get('/backups', authenticate, authorize('ADMIN'), (req, res) => AdminController.getBackups(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/backups:\r\n *   post:\r\n *     summary: Criar novo backup\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               type:\r\n *                 type: string\r\n *                 enum: [full, incremental]\r\n *                 default: full\r\n *                 description: Tipo de backup\r\n *               description:\r\n *                 type: string\r\n *                 description: Descri\xE7\xE3o do backup (opcional)\r\n *     responses:\r\n *       202:\r\n *         description: Backup iniciado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     backupId:\r\n *                       type: string\r\n *                     status:\r\n *                       type: string\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inv\xE1lidos\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n *       409:\r\n *         description: Backup j\xE1 em andamento\r\n */\r\nrouter.post('/backups', authenticate, authorize('ADMIN'), (req, res) => AdminController.createBackup(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/backups/{id}/download:\r\n *   get:\r\n *     summary: Download de backup\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do backup\r\n *     responses:\r\n *       200:\r\n *         description: Arquivo de backup\r\n *         content:\r\n *           application/octet-stream:\r\n *             schema:\r\n *               type: string\r\n *               format: binary\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n *       404:\r\n *         description: Backup n\xE3o encontrado\r\n */\r\nrouter.get('/backups/:id/download', authenticate, authorize('ADMIN'), (req, res) => AdminController.downloadBackup(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/backups/{id}:\r\n *   delete:\r\n *     summary: Excluir backup\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do backup\r\n *     responses:\r\n *       200:\r\n *         description: Backup exclu\xEDdo com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n *       404:\r\n *         description: Backup n\xE3o encontrado\r\n */\r\nrouter.delete('/backups/:id', authenticate, authorize('ADMIN'), (req, res) => AdminController.deleteBackup(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/settings:\r\n *   get:\r\n *     summary: Listar configura\xE7\xF5es do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: category\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por categoria\r\n *       - in: query\r\n *         name: search\r\n *         schema:\r\n *           type: string\r\n *         description: Buscar por chave ou descri\xE7\xE3o\r\n *     responses:\r\n *       200:\r\n *         description: Lista de configura\xE7\xF5es\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: array\r\n *                   items:\r\n *                     $ref: '#/components/schemas/SettingItem'\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n */\r\nrouter.get('/settings', authenticate, authorize('ADMIN'), (req, res) => AdminController.getSettings(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/settings:\r\n *   put:\r\n *     summary: Atualizar configura\xE7\xF5es do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               settings:\r\n *                 type: array\r\n *                 items:\r\n *                   type: object\r\n *                   required:\r\n *                     - key\r\n *                     - value\r\n *                   properties:\r\n *                     key:\r\n *                       type: string\r\n *                       description: Chave da configura\xE7\xE3o\r\n *                     value:\r\n *                       type: string\r\n *                       description: Valor da configura\xE7\xE3o\r\n *     responses:\r\n *       200:\r\n *         description: Configura\xE7\xF5es atualizadas com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     updated:\r\n *                       type: integer\r\n *                     failed:\r\n *                       type: array\r\n *                       items:\r\n *                         type: object\r\n *                         properties:\r\n *                           key:\r\n *                             type: string\r\n *                           error:\r\n *                             type: string\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inv\xE1lidos\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n */\r\nrouter.put('/settings', authenticate, authorize('ADMIN'), (req, res) => AdminController.updateSettings(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/cache/clear:\r\n *   post:\r\n *     summary: Limpar cache do sistema\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: false\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               pattern:\r\n *                 type: string\r\n *                 description: Padr\xE3o de chaves para limpar (opcional)\r\n *               category:\r\n *                 type: string\r\n *                 enum: [all, articles, users, settings, uploads]\r\n *                 default: all\r\n *                 description: Categoria de cache para limpar\r\n *     responses:\r\n *       200:\r\n *         description: Cache limpo com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     keysCleared:\r\n *                       type: integer\r\n *                     category:\r\n *                       type: string\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n *       500:\r\n *         description: Erro interno do servidor\r\n */\r\nrouter.post('/cache/clear', authenticate, authorize('ADMIN'), (req, res) => AdminController.clearCache(req, res));\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/admin/maintenance:\r\n *   post:\r\n *     summary: Ativar/desativar modo de manuten\xE7\xE3o\r\n *     tags: [Admin]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - enabled\r\n *             properties:\r\n *               enabled:\r\n *                 type: boolean\r\n *                 description: Ativar ou desativar modo de manuten\xE7\xE3o\r\n *               message:\r\n *                 type: string\r\n *                 description: Mensagem personalizada (opcional)\r\n *               estimatedDuration:\r\n *                 type: string\r\n *                 description: Dura\xE7\xE3o estimada (opcional)\r\n *     responses:\r\n *       200:\r\n *         description: Modo de manuten\xE7\xE3o alterado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     maintenanceMode:\r\n *                       type: boolean\r\n *                     message:\r\n *                       type: string\r\n *                     estimatedDuration:\r\n *                       type: string\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inv\xE1lidos\r\n *       401:\r\n *         description: Token inv\xE1lido\r\n *       403:\r\n *         description: Sem permiss\xE3o de administrador\r\n */\r\nrouter.post('/maintenance', authenticate, authorize('ADMIN'), (req, res) => AdminController.enableMaintenance(req, res));\r\n\r\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9fb368cfbea670a4f365c57ae54158bcb50f7052"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2asxumotdg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2asxumotdg();
var __importDefault =
/* istanbul ignore next */
(cov_2asxumotdg().s[0]++,
/* istanbul ignore next */
(cov_2asxumotdg().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2asxumotdg().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2asxumotdg().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2asxumotdg().f[0]++;
  cov_2asxumotdg().s[1]++;
  return /* istanbul ignore next */(cov_2asxumotdg().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2asxumotdg().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2asxumotdg().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2asxumotdg().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2asxumotdg().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_2asxumotdg().s[3]++, require("express"));
const auth_1 =
/* istanbul ignore next */
(cov_2asxumotdg().s[4]++, require("../middlewares/auth"));
const adminController_1 =
/* istanbul ignore next */
(cov_2asxumotdg().s[5]++, __importDefault(require("../controllers/adminController")));
const router =
/* istanbul ignore next */
(cov_2asxumotdg().s[6]++, (0, express_1.Router)());
/**
 * @swagger
 * components:
 *   schemas:
 *     DashboardStats:
 *       type: object
 *       properties:
 *         users:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *             active:
 *               type: integer
 *             newThisMonth:
 *               type: integer
 *             byRole:
 *               type: object
 *               properties:
 *                 admin:
 *                   type: integer
 *                 editor:
 *                   type: integer
 *                 user:
 *                   type: integer
 *         articles:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *             published:
 *               type: integer
 *             draft:
 *               type: integer
 *             thisMonth:
 *               type: integer
 *             totalViews:
 *               type: integer
 *             totalLikes:
 *               type: integer
 *         contacts:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *             pending:
 *               type: integer
 *             replied:
 *               type: integer
 *             thisMonth:
 *               type: integer
 *         newsletter:
 *           type: object
 *           properties:
 *             subscribers:
 *               type: integer
 *             activeSubscribers:
 *               type: integer
 *             campaigns:
 *               type: integer
 *             thisMonth:
 *               type: integer
 *         uploads:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *             totalSize:
 *               type: string
 *             thisMonth:
 *               type: integer
 *             byType:
 *               type: object
 *         system:
 *           type: object
 *           properties:
 *             uptime:
 *               type: string
 *             version:
 *               type: string
 *             environment:
 *               type: string
 *             lastBackup:
 *               type: string
 *               format: date-time
 *     SystemInfo:
 *       type: object
 *       properties:
 *         server:
 *           type: object
 *           properties:
 *             platform:
 *               type: string
 *             nodeVersion:
 *               type: string
 *             memory:
 *               type: object
 *               properties:
 *                 used:
 *                   type: string
 *                 total:
 *                   type: string
 *                 percentage:
 *                   type: number
 *             cpu:
 *               type: object
 *               properties:
 *                 usage:
 *                   type: number
 *                 cores:
 *                   type: integer
 *             uptime:
 *               type: string
 *         database:
 *           type: object
 *           properties:
 *             status:
 *               type: string
 *             version:
 *               type: string
 *             size:
 *               type: string
 *             connections:
 *               type: integer
 *         cache:
 *           type: object
 *           properties:
 *             status:
 *               type: string
 *             memory:
 *               type: string
 *             keys:
 *               type: integer
 *             hitRate:
 *               type: number
 *     ActivityLog:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         userId:
 *           type: string
 *         userName:
 *           type: string
 *         action:
 *           type: string
 *         resource:
 *           type: string
 *         resourceId:
 *           type: string
 *         details:
 *           type: object
 *         ipAddress:
 *           type: string
 *         userAgent:
 *           type: string
 *         timestamp:
 *           type: string
 *           format: date-time
 *     BackupInfo:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         filename:
 *           type: string
 *         size:
 *           type: string
 *         type:
 *           type: string
 *           enum: [full, incremental]
 *         status:
 *           type: string
 *           enum: [completed, failed, in_progress]
 *         createdAt:
 *           type: string
 *           format: date-time
 *         duration:
 *           type: string
 *     SettingItem:
 *       type: object
 *       properties:
 *         key:
 *           type: string
 *         value:
 *           type: string
 *         type:
 *           type: string
 *           enum: [string, number, boolean, json]
 *         category:
 *           type: string
 *         description:
 *           type: string
 *         isPublic:
 *           type: boolean
 *         updatedAt:
 *           type: string
 *           format: date-time
 */
/**
 * @swagger
 * /api/v1/admin/dashboard:
 *   get:
 *     summary: Obter estatísticas do dashboard administrativo
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estatísticas do dashboard
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/DashboardStats'
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
/* istanbul ignore next */
cov_2asxumotdg().s[7]++;
router.get('/dashboard', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[1]++;
  cov_2asxumotdg().s[8]++;
  return adminController_1.default.getDashboard(req, res);
});
/**
 * @swagger
 * /api/v1/admin/system-info:
 *   get:
 *     summary: Obter informações do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Informações do sistema
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/SystemInfo'
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
/* istanbul ignore next */
cov_2asxumotdg().s[9]++;
router.get('/system-info', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[2]++;
  cov_2asxumotdg().s[10]++;
  return adminController_1.default.getSystemInfo(req, res);
});
/**
 * @swagger
 * /api/v1/admin/activity-logs:
 *   get:
 *     summary: Listar logs de atividade
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Número da página
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 50
 *         description: Itens por página
 *       - in: query
 *         name: userId
 *         schema:
 *           type: string
 *         description: Filtrar por usuário
 *       - in: query
 *         name: action
 *         schema:
 *           type: string
 *         description: Filtrar por ação
 *       - in: query
 *         name: resource
 *         schema:
 *           type: string
 *         description: Filtrar por recurso
 *       - in: query
 *         name: dateFrom
 *         schema:
 *           type: string
 *           format: date
 *         description: Data inicial (YYYY-MM-DD)
 *       - in: query
 *         name: dateTo
 *         schema:
 *           type: string
 *           format: date
 *         description: Data final (YYYY-MM-DD)
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *           enum: [timestamp, action, resource]
 *           default: timestamp
 *         description: Campo para ordenação
 *       - in: query
 *         name: sortOrder
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *           default: desc
 *         description: Ordem da classificação
 *     responses:
 *       200:
 *         description: Lista de logs de atividade
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     logs:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/ActivityLog'
 *                     pagination:
 *                       type: object
 *                       properties:
 *                         page:
 *                           type: integer
 *                         limit:
 *                           type: integer
 *                         total:
 *                           type: integer
 *                         pages:
 *                           type: integer
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
/* istanbul ignore next */
cov_2asxumotdg().s[11]++;
router.get('/activity-logs', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[3]++;
  cov_2asxumotdg().s[12]++;
  return adminController_1.default.getSystemLogs(req, res);
});
/**
 * @swagger
 * /api/v1/admin/backups:
 *   get:
 *     summary: Listar backups do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Número da página
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 50
 *           default: 20
 *         description: Itens por página
 *       - in: query
 *         name: type
 *         schema:
 *           type: string
 *           enum: [full, incremental]
 *         description: Filtrar por tipo de backup
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [completed, failed, in_progress]
 *         description: Filtrar por status
 *     responses:
 *       200:
 *         description: Lista de backups
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     backups:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/BackupInfo'
 *                     pagination:
 *                       type: object
 *                       properties:
 *                         page:
 *                           type: integer
 *                         limit:
 *                           type: integer
 *                         total:
 *                           type: integer
 *                         pages:
 *                           type: integer
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
/* istanbul ignore next */
cov_2asxumotdg().s[13]++;
router.get('/backups', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[4]++;
  cov_2asxumotdg().s[14]++;
  return adminController_1.default.getBackups(req, res);
});
/**
 * @swagger
 * /api/v1/admin/backups:
 *   post:
 *     summary: Criar novo backup
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               type:
 *                 type: string
 *                 enum: [full, incremental]
 *                 default: full
 *                 description: Tipo de backup
 *               description:
 *                 type: string
 *                 description: Descrição do backup (opcional)
 *     responses:
 *       202:
 *         description: Backup iniciado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     backupId:
 *                       type: string
 *                     status:
 *                       type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 *       409:
 *         description: Backup já em andamento
 */
/* istanbul ignore next */
cov_2asxumotdg().s[15]++;
router.post('/backups', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[5]++;
  cov_2asxumotdg().s[16]++;
  return adminController_1.default.createBackup(req, res);
});
/**
 * @swagger
 * /api/v1/admin/backups/{id}/download:
 *   get:
 *     summary: Download de backup
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do backup
 *     responses:
 *       200:
 *         description: Arquivo de backup
 *         content:
 *           application/octet-stream:
 *             schema:
 *               type: string
 *               format: binary
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 *       404:
 *         description: Backup não encontrado
 */
/* istanbul ignore next */
cov_2asxumotdg().s[17]++;
router.get('/backups/:id/download', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[6]++;
  cov_2asxumotdg().s[18]++;
  return adminController_1.default.downloadBackup(req, res);
});
/**
 * @swagger
 * /api/v1/admin/backups/{id}:
 *   delete:
 *     summary: Excluir backup
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do backup
 *     responses:
 *       200:
 *         description: Backup excluído com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 *       404:
 *         description: Backup não encontrado
 */
/* istanbul ignore next */
cov_2asxumotdg().s[19]++;
router.delete('/backups/:id', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[7]++;
  cov_2asxumotdg().s[20]++;
  return adminController_1.default.deleteBackup(req, res);
});
/**
 * @swagger
 * /api/v1/admin/settings:
 *   get:
 *     summary: Listar configurações do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *         description: Filtrar por categoria
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Buscar por chave ou descrição
 *     responses:
 *       200:
 *         description: Lista de configurações
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/SettingItem'
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
/* istanbul ignore next */
cov_2asxumotdg().s[21]++;
router.get('/settings', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[8]++;
  cov_2asxumotdg().s[22]++;
  return adminController_1.default.getSettings(req, res);
});
/**
 * @swagger
 * /api/v1/admin/settings:
 *   put:
 *     summary: Atualizar configurações do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               settings:
 *                 type: array
 *                 items:
 *                   type: object
 *                   required:
 *                     - key
 *                     - value
 *                   properties:
 *                     key:
 *                       type: string
 *                       description: Chave da configuração
 *                     value:
 *                       type: string
 *                       description: Valor da configuração
 *     responses:
 *       200:
 *         description: Configurações atualizadas com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     updated:
 *                       type: integer
 *                     failed:
 *                       type: array
 *                       items:
 *                         type: object
 *                         properties:
 *                           key:
 *                             type: string
 *                           error:
 *                             type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
/* istanbul ignore next */
cov_2asxumotdg().s[23]++;
router.put('/settings', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[9]++;
  cov_2asxumotdg().s[24]++;
  return adminController_1.default.updateSettings(req, res);
});
/**
 * @swagger
 * /api/v1/admin/cache/clear:
 *   post:
 *     summary: Limpar cache do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: false
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               pattern:
 *                 type: string
 *                 description: Padrão de chaves para limpar (opcional)
 *               category:
 *                 type: string
 *                 enum: [all, articles, users, settings, uploads]
 *                 default: all
 *                 description: Categoria de cache para limpar
 *     responses:
 *       200:
 *         description: Cache limpo com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     keysCleared:
 *                       type: integer
 *                     category:
 *                       type: string
 *                 message:
 *                   type: string
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 *       500:
 *         description: Erro interno do servidor
 */
/* istanbul ignore next */
cov_2asxumotdg().s[25]++;
router.post('/cache/clear', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[10]++;
  cov_2asxumotdg().s[26]++;
  return adminController_1.default.clearCache(req, res);
});
/**
 * @swagger
 * /api/v1/admin/maintenance:
 *   post:
 *     summary: Ativar/desativar modo de manutenção
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - enabled
 *             properties:
 *               enabled:
 *                 type: boolean
 *                 description: Ativar ou desativar modo de manutenção
 *               message:
 *                 type: string
 *                 description: Mensagem personalizada (opcional)
 *               estimatedDuration:
 *                 type: string
 *                 description: Duração estimada (opcional)
 *     responses:
 *       200:
 *         description: Modo de manutenção alterado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     maintenanceMode:
 *                       type: boolean
 *                     message:
 *                       type: string
 *                     estimatedDuration:
 *                       type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
/* istanbul ignore next */
cov_2asxumotdg().s[27]++;
router.post('/maintenance', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => {
  /* istanbul ignore next */
  cov_2asxumotdg().f[11]++;
  cov_2asxumotdg().s[28]++;
  return adminController_1.default.enableMaintenance(req, res);
});
/* istanbul ignore next */
cov_2asxumotdg().s[29]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\uploadRoutes.ts","mappings":";;;;;AAAA,qCAAiC;AACjC,8CAA8D;AAC9D,uFAA+D;AAE/D,MAAM,MAAM,GAAG,IAAA,gBAAM,GAAE,CAAC;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiEG;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwDG;AACH,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,mBAAY,EAAE,0BAAgB,CAAC,YAAY,EAAE,0BAAgB,CAAC,UAAU,CAAC,CAAC;AAEhG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4CG;AACH,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAY,EAAE,0BAAgB,CAAC,YAAY,EAAE,0BAAgB,CAAC,UAAU,CAAC,CAAC;AAEnG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAY,EAAE,0BAAgB,CAAC,cAAc,EAAE,0BAAgB,CAAC,mBAAmB,CAAC,CAAC;AAE9G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmHG;AACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAY,EAAE,0BAAgB,CAAC,QAAQ,CAAC,CAAC;AAEzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAY,EAAE,0BAAgB,CAAC,WAAW,CAAC,CAAC;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,0BAAgB,CAAC,WAAW,CAAC,CAAC;AAE1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2DG;AACH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAY,EAAE,0BAAgB,CAAC,WAAW,CAAC,CAAC;AAE/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,mBAAY,EAAE,0BAAgB,CAAC,UAAU,CAAC,CAAC;AAEjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,MAAM,CAAC,MAAM,CAAC,mBAAmB,EAAE,mBAAY,EAAE,IAAA,gBAAS,EAAC,OAAO,CAAC,EAAE,0BAAgB,CAAC,YAAY,CAAC,CAAC;AAEpG,kBAAe,MAAM,CAAC","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\uploadRoutes.ts"],"sourcesContent":["import { Router } from 'express';\r\nimport { authenticate, authorize } from '../middlewares/auth';\r\nimport UploadController from '../controllers/uploadController';\r\n\r\nconst router = Router();\r\n\r\n/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     Upload:\r\n *       type: object\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *         filename:\r\n *           type: string\r\n *         originalName:\r\n *           type: string\r\n *         mimetype:\r\n *           type: string\r\n *         size:\r\n *           type: integer\r\n *         path:\r\n *           type: string\r\n *         url:\r\n *           type: string\r\n *         type:\r\n *           type: string\r\n *           enum: [IMAGE, DOCUMENT, VIDEO, AUDIO, OTHER]\r\n *         category:\r\n *           type: string\r\n *         description:\r\n *           type: string\r\n *         alt:\r\n *           type: string\r\n *         metadata:\r\n *           type: object\r\n *           properties:\r\n *             width:\r\n *               type: integer\r\n *             height:\r\n *               type: integer\r\n *             duration:\r\n *               type: number\r\n *             pages:\r\n *               type: integer\r\n *         isPublic:\r\n *           type: boolean\r\n *         uploadedBy:\r\n *           type: string\r\n *         createdAt:\r\n *           type: string\r\n *           format: date-time\r\n *         updatedAt:\r\n *           type: string\r\n *           format: date-time\r\n *     UploadResponse:\r\n *       type: object\r\n *       properties:\r\n *         success:\r\n *           type: boolean\r\n *         data:\r\n *           type: object\r\n *           properties:\r\n *             files:\r\n *               type: array\r\n *               items:\r\n *                 $ref: '#/components/schemas/Upload'\r\n *         message:\r\n *           type: string\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload/image:\r\n *   post:\r\n *     summary: Upload de imagem\r\n *     tags: [Upload]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               file:\r\n *                 type: string\r\n *                 format: binary\r\n *                 description: Arquivo de imagem (JPG, PNG, GIF, WebP)\r\n *               category:\r\n *                 type: string\r\n *                 description: Categoria da imagem (opcional)\r\n *               description:\r\n *                 type: string\r\n *                 description: Descrição da imagem (opcional)\r\n *               alt:\r\n *                 type: string\r\n *                 description: Texto alternativo (opcional)\r\n *               isPublic:\r\n *                 type: boolean\r\n *                 default: true\r\n *                 description: Se a imagem é pública\r\n *               resize:\r\n *                 type: string\r\n *                 description: Redimensionar - exemplo 800x600 ou 50%\r\n *               quality:\r\n *                 type: integer\r\n *                 minimum: 1\r\n *                 maximum: 100\r\n *                 default: 85\r\n *                 description: Qualidade da compressão (1-100)\r\n *     responses:\r\n *       201:\r\n *         description: Imagem enviada com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/UploadResponse'\r\n *       400:\r\n *         description: Arquivo inválido ou muito grande\r\n *       401:\r\n *         description: Token inválido\r\n *       413:\r\n *         description: Arquivo muito grande\r\n *       415:\r\n *         description: Tipo de arquivo não suportado\r\n */\r\nrouter.post('/image', authenticate, UploadController.uploadSingle, UploadController.uploadFile);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload/document:\r\n *   post:\r\n *     summary: Upload de documento\r\n *     tags: [Upload]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               file:\r\n *                 type: string\r\n *                 format: binary\r\n *                 description: Arquivo de documento (PDF, DOC, DOCX, XLS, XLSX, TXT)\r\n *               category:\r\n *                 type: string\r\n *                 description: Categoria do documento (opcional)\r\n *               description:\r\n *                 type: string\r\n *                 description: Descrição do documento (opcional)\r\n *               isPublic:\r\n *                 type: boolean\r\n *                 default: false\r\n *                 description: Se o documento é público\r\n *     responses:\r\n *       201:\r\n *         description: Documento enviado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/UploadResponse'\r\n *       400:\r\n *         description: Arquivo inválido ou muito grande\r\n *       401:\r\n *         description: Token inválido\r\n *       413:\r\n *         description: Arquivo muito grande\r\n *       415:\r\n *         description: Tipo de arquivo não suportado\r\n */\r\nrouter.post('/document', authenticate, UploadController.uploadSingle, UploadController.uploadFile);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload/multiple:\r\n *   post:\r\n *     summary: Upload múltiplo de arquivos\r\n *     tags: [Upload]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               files:\r\n *                 type: array\r\n *                 items:\r\n *                   type: string\r\n *                   format: binary\r\n *                 description: Múltiplos arquivos (máximo 10)\r\n *               category:\r\n *                 type: string\r\n *                 description: Categoria dos arquivos (opcional)\r\n *               isPublic:\r\n *                 type: boolean\r\n *                 default: true\r\n *                 description: Se os arquivos são públicos\r\n *     responses:\r\n *       201:\r\n *         description: Arquivos enviados com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               $ref: '#/components/schemas/UploadResponse'\r\n *       400:\r\n *         description: Arquivos inválidos ou muitos arquivos\r\n *       401:\r\n *         description: Token inválido\r\n *       413:\r\n *         description: Arquivos muito grandes\r\n *       415:\r\n *         description: Tipos de arquivo não suportados\r\n */\r\nrouter.post('/multiple', authenticate, UploadController.uploadMultiple, UploadController.uploadMultipleFiles);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload:\r\n *   get:\r\n *     summary: Listar arquivos enviados\r\n *     tags: [Upload]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: query\r\n *         name: page\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           default: 1\r\n *         description: Número da página\r\n *       - in: query\r\n *         name: limit\r\n *         schema:\r\n *           type: integer\r\n *           minimum: 1\r\n *           maximum: 100\r\n *           default: 20\r\n *         description: Itens por página\r\n *       - in: query\r\n *         name: type\r\n *         schema:\r\n *           type: string\r\n *           enum: [IMAGE, DOCUMENT, VIDEO, AUDIO, OTHER]\r\n *         description: Filtrar por tipo\r\n *       - in: query\r\n *         name: category\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por categoria\r\n *       - in: query\r\n *         name: search\r\n *         schema:\r\n *           type: string\r\n *         description: Buscar por nome ou descrição\r\n *       - in: query\r\n *         name: isPublic\r\n *         schema:\r\n *           type: boolean\r\n *         description: Filtrar por visibilidade\r\n *       - in: query\r\n *         name: uploadedBy\r\n *         schema:\r\n *           type: string\r\n *         description: Filtrar por usuário (apenas admin)\r\n *       - in: query\r\n *         name: dateFrom\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Data inicial (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: dateTo\r\n *         schema:\r\n *           type: string\r\n *           format: date\r\n *         description: Data final (YYYY-MM-DD)\r\n *       - in: query\r\n *         name: sortBy\r\n *         schema:\r\n *           type: string\r\n *           enum: [createdAt, filename, size, type]\r\n *           default: createdAt\r\n *         description: Campo para ordenação\r\n *       - in: query\r\n *         name: sortOrder\r\n *         schema:\r\n *           type: string\r\n *           enum: [asc, desc]\r\n *           default: desc\r\n *         description: Ordem da classificação\r\n *     responses:\r\n *       200:\r\n *         description: Lista de arquivos\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     files:\r\n *                       type: array\r\n *                       items:\r\n *                         $ref: '#/components/schemas/Upload'\r\n *                     pagination:\r\n *                       type: object\r\n *                       properties:\r\n *                         page:\r\n *                           type: integer\r\n *                         limit:\r\n *                           type: integer\r\n *                         total:\r\n *                           type: integer\r\n *                         pages:\r\n *                           type: integer\r\n *                     stats:\r\n *                       type: object\r\n *                       properties:\r\n *                         totalFiles:\r\n *                           type: integer\r\n *                         totalSize:\r\n *                           type: integer\r\n *                         byType:\r\n *                           type: object\r\n *       401:\r\n *         description: Token inválido\r\n */\r\nrouter.get('/', authenticate, UploadController.getFiles);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload/{id}:\r\n *   get:\r\n *     summary: Obter informações do arquivo\r\n *     tags: [Upload]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do arquivo\r\n *     responses:\r\n *       200:\r\n *         description: Informações do arquivo\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/Upload'\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão para acessar o arquivo\r\n *       404:\r\n *         description: Arquivo não encontrado\r\n */\r\nrouter.get('/:id', authenticate, UploadController.getFileById);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload/{id}/download:\r\n *   get:\r\n *     summary: Download do arquivo\r\n *     tags: [Upload]\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do arquivo\r\n *       - in: query\r\n *         name: token\r\n *         schema:\r\n *           type: string\r\n *         description: Token de acesso (para arquivos privados)\r\n *     responses:\r\n *       200:\r\n *         description: Arquivo para download\r\n *         content:\r\n *           application/octet-stream:\r\n *             schema:\r\n *               type: string\r\n *               format: binary\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão para acessar o arquivo\r\n *       404:\r\n *         description: Arquivo não encontrado\r\n */\r\nrouter.get('/:id/download', UploadController.getFileById);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload/{id}:\r\n *   put:\r\n *     summary: Atualizar informações do arquivo\r\n *     tags: [Upload]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do arquivo\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               filename:\r\n *                 type: string\r\n *                 description: Novo nome do arquivo\r\n *               category:\r\n *                 type: string\r\n *                 description: Nova categoria\r\n *               description:\r\n *                 type: string\r\n *                 description: Nova descrição\r\n *               alt:\r\n *                 type: string\r\n *                 description: Novo texto alternativo\r\n *               isPublic:\r\n *                 type: boolean\r\n *                 description: Nova visibilidade\r\n *     responses:\r\n *       200:\r\n *         description: Arquivo atualizado com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   $ref: '#/components/schemas/Upload'\r\n *                 message:\r\n *                   type: string\r\n *       400:\r\n *         description: Dados inválidos\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão para editar o arquivo\r\n *       404:\r\n *         description: Arquivo não encontrado\r\n */\r\nrouter.put('/:id', authenticate, UploadController.getFileById);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload/{id}:\r\n *   delete:\r\n *     summary: Excluir arquivo\r\n *     tags: [Upload]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *         description: ID do arquivo\r\n *     responses:\r\n *       200:\r\n *         description: Arquivo excluído com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão para excluir o arquivo\r\n *       404:\r\n *         description: Arquivo não encontrado\r\n */\r\nrouter.delete('/:id', authenticate, UploadController.deleteFile);\r\n\r\n/**\r\n * @swagger\r\n * /api/v1/upload/cleanup/orphaned:\r\n *   delete:\r\n *     summary: Limpar arquivos órfãos (Admin)\r\n *     tags: [Upload]\r\n *     security:\r\n *       - bearerAuth: []\r\n *     responses:\r\n *       200:\r\n *         description: Limpeza realizada com sucesso\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 success:\r\n *                   type: boolean\r\n *                 data:\r\n *                   type: object\r\n *                   properties:\r\n *                     deletedFiles:\r\n *                       type: integer\r\n *                     freedSpace:\r\n *                       type: integer\r\n *                 message:\r\n *                   type: string\r\n *       401:\r\n *         description: Token inválido\r\n *       403:\r\n *         description: Sem permissão\r\n */\r\nrouter.delete('/cleanup/orphaned', authenticate, authorize('ADMIN'), UploadController.getFileStats);\r\n\r\nexport default router;"],"version":3}
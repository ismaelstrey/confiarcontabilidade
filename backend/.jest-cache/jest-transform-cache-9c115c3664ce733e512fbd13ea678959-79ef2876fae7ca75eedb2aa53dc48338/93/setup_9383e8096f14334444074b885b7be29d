719e3f8452a7ed07cf06019cd81bff7e
"use strict";
/**
 * Configura칞칚o global para testes unit치rios
 * Contabilidade Igrejinha Backend
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.testUtils = void 0;
const globals_1 = require("@jest/globals");
// Configurar mocks globais para m칩dulos externos
// jest.mock('nodemailer', () => ({
//   createTransport: jest.fn(() => ({
//     sendMail: jest.fn().mockResolvedValue("Teste" ),
//     verify: jest.fn().mockResolvedValue(true),
//   })),
// }));
globals_1.jest.mock('ioredis', () => {
    const mockRedis = {
        get: globals_1.jest.fn(),
        set: globals_1.jest.fn(),
        del: globals_1.jest.fn(),
        exists: globals_1.jest.fn(),
        expire: globals_1.jest.fn(),
        flushall: globals_1.jest.fn(),
        quit: globals_1.jest.fn(),
        // ping: jest.fn().mockResolvedValue('PONG'),
        on: globals_1.jest.fn(),
        connect: globals_1.jest.fn(),
        disconnect: globals_1.jest.fn(),
    };
    return globals_1.jest.fn(() => mockRedis);
});
// Mock do winston para evitar problemas de logging em testes
globals_1.jest.mock('winston', () => ({
    createLogger: globals_1.jest.fn(() => ({
        info: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        debug: globals_1.jest.fn(),
    })),
    format: {
        combine: globals_1.jest.fn(() => globals_1.jest.fn()),
        timestamp: globals_1.jest.fn(() => globals_1.jest.fn()),
        errors: globals_1.jest.fn(() => globals_1.jest.fn()),
        json: globals_1.jest.fn(() => globals_1.jest.fn()),
        colorize: globals_1.jest.fn(() => globals_1.jest.fn()),
        simple: globals_1.jest.fn(() => globals_1.jest.fn()),
        printf: globals_1.jest.fn(() => globals_1.jest.fn()),
    },
    transports: {
        Console: globals_1.jest.fn(),
        File: globals_1.jest.fn(),
    },
}));
// Mock do logger middleware
globals_1.jest.mock('../src/middlewares/logger', () => ({
    logger: {
        info: globals_1.jest.fn(),
        error: globals_1.jest.fn(),
        warn: globals_1.jest.fn(),
        debug: globals_1.jest.fn(),
    },
    logStream: {
        write: globals_1.jest.fn(),
    },
    logPerformance: globals_1.jest.fn(),
    logDatabaseQuery: globals_1.jest.fn(),
    logAuth: globals_1.jest.fn(),
    logFileUpload: globals_1.jest.fn(),
    logEmail: globals_1.jest.fn(),
    logCache: globals_1.jest.fn(),
}));
// Mock do multer para upload de arquivos
globals_1.jest.mock('multer', () => {
    const multer = () => ({
        single: () => (req, res, next) => {
            req.file = {
                fieldname: 'file',
                originalname: 'test.jpg',
                encoding: '7bit',
                mimetype: 'image/jpeg',
                size: 1024,
                filename: 'test-123.jpg',
                path: '/tmp/test-123.jpg',
            };
            next();
        },
        array: () => (req, res, next) => {
            req.files = [
                {
                    fieldname: 'files',
                    originalname: 'test1.jpg',
                    encoding: '7bit',
                    mimetype: 'image/jpeg',
                    size: 1024,
                    filename: 'test1-123.jpg',
                    path: '/tmp/test1-123.jpg',
                },
            ];
            next();
        },
    });
    multer.memoryStorage = globals_1.jest.fn();
    multer.diskStorage = globals_1.jest.fn();
    return multer;
});
// Configurar timezone para testes consistentes
process.env.TZ = 'UTC';
// Configurar vari치veis de ambiente para testes
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-jwt-secret';
process.env.JWT_EXPIRES_IN = '1h';
process.env.JWT_REFRESH_SECRET = 'test-refresh-secret';
process.env.JWT_REFRESH_EXPIRES_IN = '7d';
process.env.DATABASE_URL = 'file:./test.db';
process.env.REDIS_URL = 'redis://localhost:6379/1';
process.env.LOG_LEVEL = 'error';
process.env.UPLOAD_PATH = './test-uploads';
// Mock de console para testes mais limpos
global.console = {
    ...console,
    // Manter apenas erros importantes
    log: globals_1.jest.fn(),
    debug: globals_1.jest.fn(),
    info: globals_1.jest.fn(),
    warn: globals_1.jest.fn(),
    error: console.error, // Manter erros vis칤veis
};
// Mock de setTimeout e setInterval para testes mais r치pidos
globals_1.jest.useFakeTimers();
// Configura칞칫es globais de timeout
globals_1.jest.setTimeout(30000);
// Limpar todos os mocks ap칩s cada teste
afterEach(() => {
    globals_1.jest.clearAllMocks();
    globals_1.jest.clearAllTimers();
});
// Restaurar timers reais ap칩s todos os testes
afterAll(() => {
    globals_1.jest.useRealTimers();
});
// Configurar matchers customizados (se necess치rio)
expect.extend({
    toBeValidDate(received) {
        const pass = received instanceof Date && !isNaN(received.getTime());
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid date`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid date`,
                pass: false,
            };
        }
    },
    toBeValidUUID(received) {
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        const pass = typeof received === 'string' && uuidRegex.test(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid UUID`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid UUID`,
                pass: false,
            };
        }
    },
});
// Utilit치rios para testes
exports.testUtils = {
    // Criar um usu치rio de teste
    createTestUser: () => ({
        id: '123e4567-e89b-12d3-a456-426614174000',
        email: 'test@example.com',
        name: 'Test User',
        role: 'USER',
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
    }),
    // Criar um token JWT de teste
    createTestToken: () => 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token',
    // Criar dados de requisi칞칚o de teste
    createTestRequest: (overrides = {}) => ({
        body: {},
        params: {},
        query: {},
        headers: {},
        user: exports.testUtils.createTestUser(),
        ...overrides,
    }),
    // Criar dados de resposta de teste
    createTestResponse: () => {
        const res = {};
        res.status = globals_1.jest.fn().mockReturnValue(res);
        res.json = globals_1.jest.fn().mockReturnValue(res);
        res.send = globals_1.jest.fn().mockReturnValue(res);
        res.cookie = globals_1.jest.fn().mockReturnValue(res);
        res.clearCookie = globals_1.jest.fn().mockReturnValue(res);
        return res;
    },
    // Aguardar um tempo espec칤fico (para testes com timers)
    waitFor: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
};
console.log('游빍 Configura칞칚o de testes carregada');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRDpcXGRldlxcY29udGFiaWxcXGNvbnRhYmlsLXNpdGVcXGJhY2tlbmRcXHRlc3RzXFxzZXR1cC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCwyQ0FBcUM7QUF5RnJDLGlEQUFpRDtBQUNqRCxtQ0FBbUM7QUFDbkMsc0NBQXNDO0FBQ3RDLHVEQUF1RDtBQUN2RCxpREFBaUQ7QUFDakQsU0FBUztBQUNULE9BQU87QUFFUCxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7SUFDeEIsTUFBTSxTQUFTLEdBQUc7UUFDaEIsR0FBRyxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZCxHQUFHLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtRQUNkLEdBQUcsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2QsTUFBTSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7UUFDakIsTUFBTSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7UUFDakIsUUFBUSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7UUFDbkIsSUFBSSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZiw2Q0FBNkM7UUFDN0MsRUFBRSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7UUFDYixPQUFPLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixVQUFVLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtLQUN0QixDQUFDO0lBRUYsT0FBTyxjQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsNkRBQTZEO0FBQzdELGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDMUIsWUFBWSxFQUFFLGNBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMzQixJQUFJLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssRUFBRSxjQUFJ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UUFDaEMsR0FBRyxTQUFTO0tBQ2IsQ0FBQztJQUVGLG1DQUFtQztJQUNuQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDdkIsTUFBTSxHQUFHLEdBQVEsRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QyxHQUFHLENBQUMsSUFBSSxHQUFHLGNBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsR0FBRyxDQUFDLElBQUksR0FBRyxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QyxHQUFHLENBQUMsV0FBVyxHQUFHLGNBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsd0RBQXdEO0lBQ3hELE9BQU8sRUFBRSxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0NBQ3pFLENBQUM7QUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRDpcXGRldlxcY29udGFiaWxcXGNvbnRhYmlsLXNpdGVcXGJhY2tlbmRcXHRlc3RzXFxzZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbmZpZ3VyYcOnw6NvIGdsb2JhbCBwYXJhIHRlc3RlcyB1bml0w6FyaW9zXG4gKiBDb250YWJpbGlkYWRlIElncmVqaW5oYSBCYWNrZW5kXG4gKi9cblxuaW1wb3J0IHsgamVzdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuXG4vLyBDb25maWd1cmFyIHRpbWV6b25lIHBhcmEgdGVzdGVzIGNvbnNpc3RlbnRlc1xucHJvY2Vzcy5lbnYuVFogPSAnVVRDJztcblxuLy8gQ29uZmlndXJhciB2YXJpw6F2ZWlzIGRlIGFtYmllbnRlIHBhcmEgdGVzdGVzXG5wcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbnByb2Nlc3MuZW52LkpXVF9TRUNSRVQgPSAndGVzdC1qd3Qtc2VjcmV0JztcbnByb2Nlc3MuZW52LkpXVF9FWFBJUkVTX0lOID0gJzFoJztcbnByb2Nlc3MuZW52LkpXVF9SRUZSRVNIX1NFQ1JFVCA9ICd0ZXN0LXJlZnJlc2gtc2VjcmV0JztcbnByb2Nlc3MuZW52LkpXVF9SRUZSRVNIX0VYUElSRVNfSU4gPSAnN2QnO1xucHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID0gJ2ZpbGU6Li90ZXN0LmRiJztcbnByb2Nlc3MuZW52LlJFRElTX1VSTCA9ICdyZWRpczovL2xvY2FsaG9zdDo2Mzc5LzEnO1xucHJvY2Vzcy5lbnYuTE9HX0xFVkVMID0gJ2Vycm9yJztcbnByb2Nlc3MuZW52LlVQTE9BRF9QQVRIID0gJy4vdGVzdC11cGxvYWRzJztcblxuLy8gTW9jayBkZSBjb25zb2xlIHBhcmEgdGVzdGVzIG1haXMgbGltcG9zXG5nbG9iYWwuY29uc29sZSA9IHtcbiAgLi4uY29uc29sZSxcbiAgLy8gTWFudGVyIGFwZW5hcyBlcnJvcyBpbXBvcnRhbnRlc1xuICBsb2c6IGplc3QuZm4oKSxcbiAgZGVidWc6IGplc3QuZm4oKSxcbiAgaW5mbzogamVzdC5mbigpLFxuICB3YXJuOiBqZXN0LmZuKCksXG4gIGVycm9yOiBjb25zb2xlLmVycm9yLCAvLyBNYW50ZXIgZXJyb3Mgdmlzw612ZWlzXG59O1xuXG4vLyBNb2NrIGRlIHNldFRpbWVvdXQgZSBzZXRJbnRlcnZhbCBwYXJhIHRlc3RlcyBtYWlzIHLDoXBpZG9zXG5qZXN0LnVzZUZha2VUaW1lcnMoKTtcblxuLy8gQ29uZmlndXJhw6fDtWVzIGdsb2JhaXMgZGUgdGltZW91dFxuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcblxuLy8gTGltcGFyIHRvZG9zIG9zIG1vY2tzIGFww7NzIGNhZGEgdGVzdGVcbmFmdGVyRWFjaCgoKSA9PiB7XG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICBqZXN0LmNsZWFyQWxsVGltZXJzKCk7XG59KTtcblxuLy8gUmVzdGF1cmFyIHRpbWVycyByZWFpcyBhcMOzcyB0b2RvcyBvcyB0ZXN0ZXNcbmFmdGVyQWxsKCgpID0+IHtcbiAgamVzdC51c2VSZWFsVGltZXJzKCk7XG59KTtcblxuLy8gQ29uZmlndXJhciBtYXRjaGVycyBjdXN0b21pemFkb3MgKHNlIG5lY2Vzc8OhcmlvKVxuZXhwZWN0LmV4dGVuZCh7XG4gIHRvQmVWYWxpZERhdGUocmVjZWl2ZWQ6IGFueSkge1xuICAgIGNvbnN0IHBhc3MgPSByZWNlaXZlZCBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHJlY2VpdmVkLmdldFRpbWUoKSk7XG4gICAgaWYgKHBhc3MpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSBub3QgdG8gYmUgYSB2YWxpZCBkYXRlYCxcbiAgICAgICAgcGFzczogdHJ1ZSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byBiZSBhIHZhbGlkIGRhdGVgLFxuICAgICAgICBwYXNzOiBmYWxzZSxcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICBcbiAgdG9CZVZhbGlkVVVJRChyZWNlaXZlZDogc3RyaW5nKSB7XG4gICAgY29uc3QgdXVpZFJlZ2V4ID0gL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfSQvaTtcbiAgICBjb25zdCBwYXNzID0gdHlwZW9mIHJlY2VpdmVkID09PSAnc3RyaW5nJyAmJiB1dWlkUmVnZXgudGVzdChyZWNlaXZlZCk7XG4gICAgXG4gICAgaWYgKHBhc3MpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSBub3QgdG8gYmUgYSB2YWxpZCBVVUlEYCxcbiAgICAgICAgcGFzczogdHJ1ZSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byBiZSBhIHZhbGlkIFVVSURgLFxuICAgICAgICBwYXNzOiBmYWxzZSxcbiAgICAgIH07XG4gICAgfVxuICB9LFxufSk7XG5cbi8vIERlY2xhcmFyIHRpcG9zIHBhcmEgb3MgbWF0Y2hlcnMgY3VzdG9taXphZG9zXG5kZWNsYXJlIGdsb2JhbCB7XG4gIG5hbWVzcGFjZSBqZXN0IHtcbiAgICBpbnRlcmZhY2UgTWF0Y2hlcnM8Uj4ge1xuICAgICAgdG9CZVZhbGlkRGF0ZSgpOiBSO1xuICAgICAgdG9CZVZhbGlkVVVJRCgpOiBSO1xuICAgIH1cbiAgfVxufVxuXG4vLyBDb25maWd1cmFyIG1vY2tzIGdsb2JhaXMgcGFyYSBtw7NkdWxvcyBleHRlcm5vc1xuLy8gamVzdC5tb2NrKCdub2RlbWFpbGVyJywgKCkgPT4gKHtcbi8vICAgY3JlYXRlVHJhbnNwb3J0OiBqZXN0LmZuKCgpID0+ICh7XG4vLyAgICAgc2VuZE1haWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShcIlRlc3RlXCIgKSxcbi8vICAgICB2ZXJpZnk6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbi8vICAgfSkpLFxuLy8gfSkpO1xuXG5qZXN0Lm1vY2soJ2lvcmVkaXMnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tSZWRpcyA9IHtcbiAgICBnZXQ6IGplc3QuZm4oKSxcbiAgICBzZXQ6IGplc3QuZm4oKSxcbiAgICBkZWw6IGplc3QuZm4oKSxcbiAgICBleGlzdHM6IGplc3QuZm4oKSxcbiAgICBleHBpcmU6IGplc3QuZm4oKSxcbiAgICBmbHVzaGFsbDogamVzdC5mbigpLFxuICAgIHF1aXQ6IGplc3QuZm4oKSxcbiAgICAvLyBwaW5nOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoJ1BPTkcnKSxcbiAgICBvbjogamVzdC5mbigpLFxuICAgIGNvbm5lY3Q6IGplc3QuZm4oKSxcbiAgICBkaXNjb25uZWN0OiBqZXN0LmZuKCksXG4gIH07XG4gIFxuICByZXR1cm4gamVzdC5mbigoKSA9PiBtb2NrUmVkaXMpO1xufSk7XG5cbi8vIE1vY2sgZG8gd2luc3RvbiBwYXJhIGV2aXRhciBwcm9ibGVtYXMgZGUgbG9nZ2luZyBlbSB0ZXN0ZXNcbmplc3QubW9jaygnd2luc3RvbicsICgpID0+ICh7XG4gIGNyZWF0ZUxvZ2dlcjogamVzdC5mbigoKSA9PiAoe1xuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICBlcnJvcjogamVzdC5mbigpLFxuICAgIHdhcm46IGplc3QuZm4oKSxcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICB9KSksXG4gIGZvcm1hdDoge1xuICAgIGNvbWJpbmU6IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKSxcbiAgICB0aW1lc3RhbXA6IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKSxcbiAgICBlcnJvcnM6IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKSxcbiAgICBqc29uOiBqZXN0LmZuKCgpID0+IGplc3QuZm4oKSksXG4gICAgY29sb3JpemU6IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKSxcbiAgICBzaW1wbGU6IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKSxcbiAgICBwcmludGY6IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKSxcbiAgfSxcbiAgdHJhbnNwb3J0czoge1xuICAgIENvbnNvbGU6IGplc3QuZm4oKSxcbiAgICBGaWxlOiBqZXN0LmZuKCksXG4gIH0sXG59KSk7XG5cbi8vIE1vY2sgZG8gbG9nZ2VyIG1pZGRsZXdhcmVcbmplc3QubW9jaygnLi4vc3JjL21pZGRsZXdhcmVzL2xvZ2dlcicsICgpID0+ICh7XG4gIGxvZ2dlcjoge1xuICAgIGluZm86IGplc3QuZm4oKSxcbiAgICBlcnJvcjogamVzdC5mbigpLFxuICAgIHdhcm46IGplc3QuZm4oKSxcbiAgICBkZWJ1ZzogamVzdC5mbigpLFxuICB9LFxuICBsb2dTdHJlYW06IHtcbiAgICB3cml0ZTogamVzdC5mbigpLFxuICB9LFxuICBsb2dQZXJmb3JtYW5jZTogamVzdC5mbigpLFxuICBsb2dEYXRhYmFzZVF1ZXJ5OiBqZXN0LmZuKCksXG4gIGxvZ0F1dGg6IGplc3QuZm4oKSxcbiAgbG9nRmlsZVVwbG9hZDogamVzdC5mbigpLFxuICBsb2dFbWFpbDogamVzdC5mbigpLFxuICBsb2dDYWNoZTogamVzdC5mbigpLFxufSkpO1xuXG4vLyBNb2NrIGRvIG11bHRlciBwYXJhIHVwbG9hZCBkZSBhcnF1aXZvc1xuamVzdC5tb2NrKCdtdWx0ZXInLCAoKSA9PiB7XG4gIGNvbnN0IG11bHRlciA9ICgpID0+ICh7XG4gICAgc2luZ2xlOiAoKSA9PiAocmVxOiBhbnksIHJlczogYW55LCBuZXh0OiBhbnkpID0+IHtcbiAgICAgIHJlcS5maWxlID0ge1xuICAgICAgICBmaWVsZG5hbWU6ICdmaWxlJyxcbiAgICAgICAgb3JpZ2luYWxuYW1lOiAndGVzdC5qcGcnLFxuICAgICAgICBlbmNvZGluZzogJzdiaXQnLFxuICAgICAgICBtaW1ldHlwZTogJ2ltYWdlL2pwZWcnLFxuICAgICAgICBzaXplOiAxMDI0LFxuICAgICAgICBmaWxlbmFtZTogJ3Rlc3QtMTIzLmpwZycsXG4gICAgICAgIHBhdGg6ICcvdG1wL3Rlc3QtMTIzLmpwZycsXG4gICAgICB9O1xuICAgICAgbmV4dCgpO1xuICAgIH0sXG4gICAgYXJyYXk6ICgpID0+IChyZXE6IGFueSwgcmVzOiBhbnksIG5leHQ6IGFueSkgPT4ge1xuICAgICAgcmVxLmZpbGVzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZmllbGRuYW1lOiAnZmlsZXMnLFxuICAgICAgICAgIG9yaWdpbmFsbmFtZTogJ3Rlc3QxLmpwZycsXG4gICAgICAgICAgZW5jb2Rpbmc6ICc3Yml0JyxcbiAgICAgICAgICBtaW1ldHlwZTogJ2ltYWdlL2pwZWcnLFxuICAgICAgICAgIHNpemU6IDEwMjQsXG4gICAgICAgICAgZmlsZW5hbWU6ICd0ZXN0MS0xMjMuanBnJyxcbiAgICAgICAgICBwYXRoOiAnL3RtcC90ZXN0MS0xMjMuanBnJyxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgICBuZXh0KCk7XG4gICAgfSxcbiAgfSk7XG4gIFxuICBtdWx0ZXIubWVtb3J5U3RvcmFnZSA9IGplc3QuZm4oKTtcbiAgbXVsdGVyLmRpc2tTdG9yYWdlID0gamVzdC5mbigpO1xuICBcbiAgcmV0dXJuIG11bHRlcjtcbn0pO1xuXG4vLyBVdGlsaXTDoXJpb3MgcGFyYSB0ZXN0ZXNcbmV4cG9ydCBjb25zdCB0ZXN0VXRpbHMgPSB7XG4gIC8vIENyaWFyIHVtIHVzdcOhcmlvIGRlIHRlc3RlXG4gIGNyZWF0ZVRlc3RVc2VyOiAoKSA9PiAoe1xuICAgIGlkOiAnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwJyxcbiAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgIHJvbGU6ICdVU0VSJyxcbiAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICB9KSxcbiAgXG4gIC8vIENyaWFyIHVtIHRva2VuIEpXVCBkZSB0ZXN0ZVxuICBjcmVhdGVUZXN0VG9rZW46ICgpID0+ICdleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkudGVzdC50b2tlbicsXG4gIFxuICAvLyBDcmlhciBkYWRvcyBkZSByZXF1aXNpw6fDo28gZGUgdGVzdGVcbiAgY3JlYXRlVGVzdFJlcXVlc3Q6IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcbiAgICBib2R5OiB7fSxcbiAgICBwYXJhbXM6IHt9LFxuICAgIHF1ZXJ5OiB7fSxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICB1c2VyOiB0ZXN0VXRpbHMuY3JlYXRlVGVzdFVzZXIoKSxcbiAgICAuLi5vdmVycmlkZXMsXG4gIH0pLFxuICBcbiAgLy8gQ3JpYXIgZGFkb3MgZGUgcmVzcG9zdGEgZGUgdGVzdGVcbiAgY3JlYXRlVGVzdFJlc3BvbnNlOiAoKSA9PiB7XG4gICAgY29uc3QgcmVzOiBhbnkgPSB7fTtcbiAgICByZXMuc3RhdHVzID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShyZXMpO1xuICAgIHJlcy5qc29uID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShyZXMpO1xuICAgIHJlcy5zZW5kID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShyZXMpO1xuICAgIHJlcy5jb29raWUgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHJlcyk7XG4gICAgcmVzLmNsZWFyQ29va2llID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShyZXMpO1xuICAgIHJldHVybiByZXM7XG4gIH0sXG4gIFxuICAvLyBBZ3VhcmRhciB1bSB0ZW1wbyBlc3BlY8OtZmljbyAocGFyYSB0ZXN0ZXMgY29tIHRpbWVycylcbiAgd2FpdEZvcjogKG1zOiBudW1iZXIpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpLFxufTtcblxuY29uc29sZS5sb2coJ/Cfp6ogQ29uZmlndXJhw6fDo28gZGUgdGVzdGVzIGNhcnJlZ2FkYScpOyJdLCJ2ZXJzaW9uIjozfQ==
2558ce5ac6b36da97cfb79460e61971b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorizeOwnerOrAdmin = exports.authorize = exports.authenticate = exports.requireAdminOrModerator = exports.requireAdmin = exports.requireRole = exports.authenticateToken = void 0;
const authService_1 = require("../services/authService");
const logger_1 = __importDefault(require("../utils/logger"));
/**
 * Middleware de autenticação JWT
 */
const authenticateToken = async (req, res, next) => {
    try {
        const authHeader = req.headers.authorization;
        const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
        if (!token) {
            res.status(401).json({
                success: false,
                message: 'Token de acesso requerido'
            });
            return;
        }
        // Verificar token usando authService
        const decoded = await authService_1.authService.verifyAccessToken(token);
        if (!decoded) {
            res.status(401).json({
                success: false,
                message: 'Token inválido ou expirado'
            });
            return;
        }
        // Buscar usuário no banco de dados
        const user = await authService_1.authService.getUserById(decoded.userId);
        if (!user) {
            res.status(401).json({
                success: false,
                message: 'Usuário não encontrado'
            });
            return;
        }
        // Adicionar usuário ao request
        req.user = {
            id: user.id,
            email: user.email,
            role: user.role
        };
        next();
    }
    catch (error) {
        logger_1.default.error('Erro na autenticação', { error: error.message });
        res.status(401).json({
            success: false,
            message: 'Token inválido'
        });
    }
};
exports.authenticateToken = authenticateToken;
/**
 * Middleware para verificar roles específicas
 */
const requireRole = (roles) => {
    return (req, res, next) => {
        const user = req.user;
        if (!user) {
            res.status(401).json({
                success: false,
                message: 'Usuário não autenticado'
            });
            return;
        }
        if (!roles.includes(user.role)) {
            res.status(403).json({
                success: false,
                message: 'Acesso negado. Permissão insuficiente'
            });
            return;
        }
        next();
    };
};
exports.requireRole = requireRole;
/**
 * Middleware para verificar se é admin
 */
exports.requireAdmin = (0, exports.requireRole)(['ADMIN']);
/**
 * Middleware para verificar se é admin ou moderador
 */
exports.requireAdminOrModerator = (0, exports.requireRole)(['ADMIN', 'MODERATOR']);
/**
 * Alias para compatibilidade com código existente
 */
exports.authenticate = exports.authenticateToken;
const authorize = (...roles) => {
    return (0, exports.requireRole)(roles);
};
exports.authorize = authorize;
const authorizeOwnerOrAdmin = (req, res, next) => {
    const user = req.user;
    const resourceUserId = req.params.id || req.params.userId;
    if (!user) {
        res.status(401).json({
            success: false,
            message: 'Usuário não autenticado'
        });
        return;
    }
    // Permite se for admin ou se for o próprio usuário
    if (user.role === 'ADMIN' || user.id === resourceUserId) {
        next();
        return;
    }
    res.status(403).json({
        success: false,
        message: 'Acesso negado. Você só pode acessar seus próprios recursos'
    });
};
exports.authorizeOwnerOrAdmin = authorizeOwnerOrAdmin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
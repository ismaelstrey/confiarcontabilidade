f36862aef7dc49748a788c1d1966e3fa
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middlewares/auth");
const adminController_1 = __importDefault(require("../controllers/adminController"));
const router = (0, express_1.Router)();
/**
 * @swagger
 * components:
 *   schemas:
 *     DashboardStats:
 *       type: object
 *       properties:
 *         users:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *             active:
 *               type: integer
 *             newThisMonth:
 *               type: integer
 *             byRole:
 *               type: object
 *               properties:
 *                 admin:
 *                   type: integer
 *                 editor:
 *                   type: integer
 *                 user:
 *                   type: integer
 *         articles:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *             published:
 *               type: integer
 *             draft:
 *               type: integer
 *             thisMonth:
 *               type: integer
 *             totalViews:
 *               type: integer
 *             totalLikes:
 *               type: integer
 *         contacts:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *             pending:
 *               type: integer
 *             replied:
 *               type: integer
 *             thisMonth:
 *               type: integer
 *         newsletter:
 *           type: object
 *           properties:
 *             subscribers:
 *               type: integer
 *             activeSubscribers:
 *               type: integer
 *             campaigns:
 *               type: integer
 *             thisMonth:
 *               type: integer
 *         uploads:
 *           type: object
 *           properties:
 *             total:
 *               type: integer
 *             totalSize:
 *               type: string
 *             thisMonth:
 *               type: integer
 *             byType:
 *               type: object
 *         system:
 *           type: object
 *           properties:
 *             uptime:
 *               type: string
 *             version:
 *               type: string
 *             environment:
 *               type: string
 *             lastBackup:
 *               type: string
 *               format: date-time
 *     SystemInfo:
 *       type: object
 *       properties:
 *         server:
 *           type: object
 *           properties:
 *             platform:
 *               type: string
 *             nodeVersion:
 *               type: string
 *             memory:
 *               type: object
 *               properties:
 *                 used:
 *                   type: string
 *                 total:
 *                   type: string
 *                 percentage:
 *                   type: number
 *             cpu:
 *               type: object
 *               properties:
 *                 usage:
 *                   type: number
 *                 cores:
 *                   type: integer
 *             uptime:
 *               type: string
 *         database:
 *           type: object
 *           properties:
 *             status:
 *               type: string
 *             version:
 *               type: string
 *             size:
 *               type: string
 *             connections:
 *               type: integer
 *         cache:
 *           type: object
 *           properties:
 *             status:
 *               type: string
 *             memory:
 *               type: string
 *             keys:
 *               type: integer
 *             hitRate:
 *               type: number
 *     ActivityLog:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         userId:
 *           type: string
 *         userName:
 *           type: string
 *         action:
 *           type: string
 *         resource:
 *           type: string
 *         resourceId:
 *           type: string
 *         details:
 *           type: object
 *         ipAddress:
 *           type: string
 *         userAgent:
 *           type: string
 *         timestamp:
 *           type: string
 *           format: date-time
 *     BackupInfo:
 *       type: object
 *       properties:
 *         id:
 *           type: string
 *         filename:
 *           type: string
 *         size:
 *           type: string
 *         type:
 *           type: string
 *           enum: [full, incremental]
 *         status:
 *           type: string
 *           enum: [completed, failed, in_progress]
 *         createdAt:
 *           type: string
 *           format: date-time
 *         duration:
 *           type: string
 *     SettingItem:
 *       type: object
 *       properties:
 *         key:
 *           type: string
 *         value:
 *           type: string
 *         type:
 *           type: string
 *           enum: [string, number, boolean, json]
 *         category:
 *           type: string
 *         description:
 *           type: string
 *         isPublic:
 *           type: boolean
 *         updatedAt:
 *           type: string
 *           format: date-time
 */
/**
 * @swagger
 * /api/v1/admin/dashboard:
 *   get:
 *     summary: Obter estatísticas do dashboard administrativo
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Estatísticas do dashboard
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/DashboardStats'
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
router.get('/dashboard', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.getDashboard(req, res));
/**
 * @swagger
 * /api/v1/admin/system-info:
 *   get:
 *     summary: Obter informações do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Informações do sistema
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/SystemInfo'
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
router.get('/system-info', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.getSystemInfo(req, res));
/**
 * @swagger
 * /api/v1/admin/activity-logs:
 *   get:
 *     summary: Listar logs de atividade
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Número da página
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 50
 *         description: Itens por página
 *       - in: query
 *         name: userId
 *         schema:
 *           type: string
 *         description: Filtrar por usuário
 *       - in: query
 *         name: action
 *         schema:
 *           type: string
 *         description: Filtrar por ação
 *       - in: query
 *         name: resource
 *         schema:
 *           type: string
 *         description: Filtrar por recurso
 *       - in: query
 *         name: dateFrom
 *         schema:
 *           type: string
 *           format: date
 *         description: Data inicial (YYYY-MM-DD)
 *       - in: query
 *         name: dateTo
 *         schema:
 *           type: string
 *           format: date
 *         description: Data final (YYYY-MM-DD)
 *       - in: query
 *         name: sortBy
 *         schema:
 *           type: string
 *           enum: [timestamp, action, resource]
 *           default: timestamp
 *         description: Campo para ordenação
 *       - in: query
 *         name: sortOrder
 *         schema:
 *           type: string
 *           enum: [asc, desc]
 *           default: desc
 *         description: Ordem da classificação
 *     responses:
 *       200:
 *         description: Lista de logs de atividade
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     logs:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/ActivityLog'
 *                     pagination:
 *                       type: object
 *                       properties:
 *                         page:
 *                           type: integer
 *                         limit:
 *                           type: integer
 *                         total:
 *                           type: integer
 *                         pages:
 *                           type: integer
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
router.get('/activity-logs', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.getSystemLogs(req, res));
/**
 * @swagger
 * /api/v1/admin/backups:
 *   get:
 *     summary: Listar backups do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Número da página
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 50
 *           default: 20
 *         description: Itens por página
 *       - in: query
 *         name: type
 *         schema:
 *           type: string
 *           enum: [full, incremental]
 *         description: Filtrar por tipo de backup
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [completed, failed, in_progress]
 *         description: Filtrar por status
 *     responses:
 *       200:
 *         description: Lista de backups
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     backups:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/BackupInfo'
 *                     pagination:
 *                       type: object
 *                       properties:
 *                         page:
 *                           type: integer
 *                         limit:
 *                           type: integer
 *                         total:
 *                           type: integer
 *                         pages:
 *                           type: integer
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
router.get('/backups', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.getBackups(req, res));
/**
 * @swagger
 * /api/v1/admin/backups:
 *   post:
 *     summary: Criar novo backup
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               type:
 *                 type: string
 *                 enum: [full, incremental]
 *                 default: full
 *                 description: Tipo de backup
 *               description:
 *                 type: string
 *                 description: Descrição do backup (opcional)
 *     responses:
 *       202:
 *         description: Backup iniciado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     backupId:
 *                       type: string
 *                     status:
 *                       type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 *       409:
 *         description: Backup já em andamento
 */
router.post('/backups', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.createBackup(req, res));
/**
 * @swagger
 * /api/v1/admin/backups/{id}/download:
 *   get:
 *     summary: Download de backup
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do backup
 *     responses:
 *       200:
 *         description: Arquivo de backup
 *         content:
 *           application/octet-stream:
 *             schema:
 *               type: string
 *               format: binary
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 *       404:
 *         description: Backup não encontrado
 */
router.get('/backups/:id/download', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.downloadBackup(req, res));
/**
 * @swagger
 * /api/v1/admin/backups/{id}:
 *   delete:
 *     summary: Excluir backup
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID do backup
 *     responses:
 *       200:
 *         description: Backup excluído com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 *       404:
 *         description: Backup não encontrado
 */
router.delete('/backups/:id', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.deleteBackup(req, res));
/**
 * @swagger
 * /api/v1/admin/settings:
 *   get:
 *     summary: Listar configurações do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: category
 *         schema:
 *           type: string
 *         description: Filtrar por categoria
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Buscar por chave ou descrição
 *     responses:
 *       200:
 *         description: Lista de configurações
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/SettingItem'
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
router.get('/settings', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.getSettings(req, res));
/**
 * @swagger
 * /api/v1/admin/settings:
 *   put:
 *     summary: Atualizar configurações do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               settings:
 *                 type: array
 *                 items:
 *                   type: object
 *                   required:
 *                     - key
 *                     - value
 *                   properties:
 *                     key:
 *                       type: string
 *                       description: Chave da configuração
 *                     value:
 *                       type: string
 *                       description: Valor da configuração
 *     responses:
 *       200:
 *         description: Configurações atualizadas com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     updated:
 *                       type: integer
 *                     failed:
 *                       type: array
 *                       items:
 *                         type: object
 *                         properties:
 *                           key:
 *                             type: string
 *                           error:
 *                             type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
router.put('/settings', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.updateSettings(req, res));
/**
 * @swagger
 * /api/v1/admin/cache/clear:
 *   post:
 *     summary: Limpar cache do sistema
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: false
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               pattern:
 *                 type: string
 *                 description: Padrão de chaves para limpar (opcional)
 *               category:
 *                 type: string
 *                 enum: [all, articles, users, settings, uploads]
 *                 default: all
 *                 description: Categoria de cache para limpar
 *     responses:
 *       200:
 *         description: Cache limpo com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     keysCleared:
 *                       type: integer
 *                     category:
 *                       type: string
 *                 message:
 *                   type: string
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 *       500:
 *         description: Erro interno do servidor
 */
router.post('/cache/clear', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.clearCache(req, res));
/**
 * @swagger
 * /api/v1/admin/maintenance:
 *   post:
 *     summary: Ativar/desativar modo de manutenção
 *     tags: [Admin]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - enabled
 *             properties:
 *               enabled:
 *                 type: boolean
 *                 description: Ativar ou desativar modo de manutenção
 *               message:
 *                 type: string
 *                 description: Mensagem personalizada (opcional)
 *               estimatedDuration:
 *                 type: string
 *                 description: Duração estimada (opcional)
 *     responses:
 *       200:
 *         description: Modo de manutenção alterado com sucesso
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     maintenanceMode:
 *                       type: boolean
 *                     message:
 *                       type: string
 *                     estimatedDuration:
 *                       type: string
 *                 message:
 *                   type: string
 *       400:
 *         description: Dados inválidos
 *       401:
 *         description: Token inválido
 *       403:
 *         description: Sem permissão de administrador
 */
router.post('/maintenance', auth_1.authenticate, (0, auth_1.authorize)('ADMIN'), (req, res) => adminController_1.default.enableMaintenance(req, res));
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
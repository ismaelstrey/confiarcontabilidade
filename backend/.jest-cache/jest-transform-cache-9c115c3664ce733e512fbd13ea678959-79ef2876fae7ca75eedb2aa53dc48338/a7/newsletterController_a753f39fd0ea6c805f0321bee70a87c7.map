{"version":3,"names":["client_1","cov_9nlidh6a4","s","require","body","validationResult","crypto","__importStar","logger_1","__importDefault","prisma","PrismaClient","NewsletterController","subscribeValidation","isEmail","withMessage","normalizeEmail","optional","isLength","min","max","trim","isIn","isArray","campaignValidation","notEmpty","isISO8601","custom","value","f","Date","b","Error","subscribe","req","res","errors","isEmpty","status","json","success","message","array","email","name","preferences","existingSubscriber","newsletter","findUnique","where","isActive","updatedSubscriber","update","data","updatedAt","default","info","subscriberId","id","subscriber","subscribedAt","createdAt","confirmationToken","randomBytes","toString","create","JSON","stringify","frequency","categories","topics","error","getPreferences","token","params","findFirst","contains","parse","updatePreferences","confirmSubscription","confirmedSubscriber","unsubscribe","unsubscribeToken","unsubscribedSubscriber","method","getSubscribers","search","dateFrom","dateTo","page","limit","sortBy","sortOrder","query","skip","Number","take","OR","mode","gte","endDate","setHours","lte","orderBy","subscribers","total","Promise","all","findMany","count","totalPages","Math","ceil","activeCount","inactiveCount","statistics","byStatus","active","inactive","pagination","hasNext","hasPrev","createCampaign","currentUser","user","subject","content","htmlContent","scheduledFor","targetAudience","campaign","campaignId","createdBy","getCampaigns","campaigns","map","sendCampaign","select","length","recipientCount","sentBy","getNewsletterStats","period","periodDays","dateLimit","setDate","getDate","subscriberStats","campaignStats","recentActivity","then","_count","resolve","reduce","acc","stat","totalRecipients","newSubscribers","sendCampaignToSubscribers","activeSubscribers","campaignData","recipients","sentAt","exports"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\newsletterController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nconst { body, validationResult } = require('express-validator');\r\nimport * as crypto from 'crypto';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de newsletter\r\ninterface NewsletterData {\r\n  email: string;\r\n  name?: string;\r\n  preferences?: {\r\n    frequency: 'daily' | 'weekly' | 'monthly';\r\n    categories: string[];\r\n  };\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface NewsletterFilters {\r\n  status?: 'ACTIVE' | 'UNSUBSCRIBED' | 'PENDING';\r\n  search?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'email' | 'name';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n// Interface para dados de campanha\r\ninterface CampaignData {\r\n  subject: string;\r\n  content: string;\r\n  htmlContent?: string;\r\n  scheduledFor?: Date;\r\n  targetAudience?: {\r\n    status?: string[];\r\n    categories?: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de newsletter\r\n */\r\nexport class NewsletterController {\r\n  /**\r\n   * Validações para inscrição na newsletter\r\n   */\r\n  static subscribeValidation = [\r\n    body('email')\r\n      .isEmail()\r\n      .withMessage('Email deve ser válido')\r\n      .normalizeEmail(),\r\n    body('name')\r\n      .optional()\r\n      .isLength({ min: 2, max: 100 })\r\n      .withMessage('Nome deve ter entre 2 e 100 caracteres')\r\n      .trim(),\r\n    body('preferences.frequency')\r\n      .optional()\r\n      .isIn(['daily', 'weekly', 'monthly'])\r\n      .withMessage('Frequência deve ser daily, weekly ou monthly'),\r\n    body('preferences.categories')\r\n      .optional()\r\n      .isArray()\r\n      .withMessage('Categorias devem ser um array')\r\n  ];\r\n\r\n  /**\r\n   * Validações para campanha\r\n   */\r\n  static campaignValidation = [\r\n    body('subject')\r\n      .notEmpty()\r\n      .withMessage('Assunto é obrigatório')\r\n      .isLength({ min: 5, max: 200 })\r\n      .withMessage('Assunto deve ter entre 5 e 200 caracteres')\r\n      .trim(),\r\n    body('content')\r\n      .notEmpty()\r\n      .withMessage('Conteúdo é obrigatório')\r\n      .isLength({ min: 10 })\r\n      .withMessage('Conteúdo deve ter pelo menos 10 caracteres')\r\n      .trim(),\r\n    body('htmlContent')\r\n      .optional()\r\n      .isLength({ min: 10 })\r\n      .withMessage('Conteúdo HTML deve ter pelo menos 10 caracteres'),\r\n    body('scheduledFor')\r\n      .optional()\r\n      .isISO8601()\r\n      .withMessage('Data de agendamento deve ser válida')\r\n      .custom((value: string) => {\r\n        if (new Date(value) <= new Date()) {\r\n          throw new Error('Data de agendamento deve ser no futuro');\r\n        }\r\n        return true;\r\n      })\r\n  ];\r\n\r\n  /**\r\n   * Inscreve um email na newsletter\r\n   */\r\n  static async subscribe(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Verificar validações\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados inválidos',\r\n          errors: errors.array()\r\n        });\r\n        return;\r\n      }\r\n\r\n      const { email, name, preferences }: NewsletterData = req.body;\r\n\r\n      // Verificar se já existe\r\n      const existingSubscriber = await prisma.newsletter.findUnique({\r\n        where: { email }\r\n      });\r\n\r\n      if (existingSubscriber) {\r\n        if (existingSubscriber.isActive === true) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Email já está inscrito na newsletter'\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Reativar se estava inativo\r\n        const updatedSubscriber = await prisma.newsletter.update({\r\n          where: { email },\r\n          data: {\r\n            isActive: true,\r\n            name: name || existingSubscriber.name,\r\n            updatedAt: new Date()\r\n          }\r\n        });\r\n\r\n        // Log da ação\r\n        logger.info('Newsletter reativada', {\r\n          email,\r\n          subscriberId: updatedSubscriber.id\r\n        });\r\n\r\n        res.status(200).json({\r\n          success: true,\r\n          message: 'Inscrição reativada com sucesso',\r\n          data: {\r\n            subscriber: {\r\n              id: updatedSubscriber.id,\r\n              email: updatedSubscriber.email,\r\n              name: updatedSubscriber.name,\r\n              isActive: updatedSubscriber.isActive,\r\n              subscribedAt: updatedSubscriber.createdAt\r\n            }\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar token de confirmação\r\n      const confirmationToken = crypto.randomBytes(32).toString('hex');\r\n\r\n      // Criar nova inscrição\r\n      const subscriber = await prisma.newsletter.create({\r\n        data: {\r\n          email,\r\n          name: name || null,\r\n          preferences: preferences ? JSON.stringify(preferences) : JSON.stringify({ frequency: 'weekly', categories: [], topics: [] }),\r\n          isActive: false // TODO: Implementar sistema de confirmação adequado\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Nova inscrição na newsletter', {\r\n        email,\r\n        subscriberId: subscriber.id,\r\n        name: name || 'Não informado'\r\n      });\r\n\r\n      // TODO: Enviar email de confirmação\r\n      // await emailService.sendConfirmationEmail(email, confirmationToken);\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Inscrição realizada com sucesso. Verifique seu email para confirmar.',\r\n        data: {\r\n          subscriber: {\r\n            id: subscriber.id,\r\n            email: subscriber.email,\r\n            name: subscriber.name,\r\n            isActive: subscriber.isActive,\r\n            subscribedAt: subscriber.createdAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao inscrever na newsletter', { error, email: req.body.email });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirma inscrição na newsletter\r\n   */\r\n  // static async confirmSubscription(req: Request, res: Response): Promise<void> {\r\n  //   try {\r\n  //     const { token } = req.params;\r\n\r\n  //     if (!token) {\r\n  //       res.status(400).json({\r\n  //         success: false,\r\n  //         message: 'Token é obrigatório'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Buscar assinante pelo token (simulando - em produção seria um token real)\r\n  //     const subscriber = await prisma.newsletter.findFirst({\r\n  //       where: {\r\n  //         email: { contains: token }, // Simplificado para demo\r\n  //         isActive: false\r\n  //       }\r\n  //     });\r\n\r\n  //     if (!subscriber) {\r\n  //       res.status(404).json({\r\n  //         success: false,\r\n  //         message: 'Token inválido ou inscrição já confirmada'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Confirmar inscrição\r\n  //     const confirmedSubscriber = await prisma.newsletter.update({\r\n  //       where: { id: subscriber.id },\r\n  //       data: {\r\n  //         isActive: true,\r\n  //         updatedAt: new Date()\r\n  //       }\r\n  //     });\r\n\r\n  //     logger.info('Inscrição confirmada', {\r\n  //       subscriberId: subscriber.id,\r\n  //       email: subscriber.email\r\n  //     });\r\n\r\n  //     res.status(200).json({\r\n  //       success: true,\r\n  //       message: 'Inscrição confirmada com sucesso',\r\n  //       data: {\r\n  //         subscriber: {\r\n  //           id: confirmedSubscriber.id,\r\n  //           email: confirmedSubscriber.email,\r\n  //           name: confirmedSubscriber.name,\r\n  //           isActive: confirmedSubscriber.isActive,\r\n  //           updatedAt: confirmedSubscriber.updatedAt\r\n  //         }\r\n  //       }\r\n  //     });\r\n  //   } catch (error) {\r\n  //     logger.error('Erro ao confirmar inscrição', { error, token: req.params.token });\r\n  //     res.status(500).json({\r\n  //       success: false,\r\n  //       message: 'Erro interno do servidor'\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Obtém preferências do assinante\r\n   */\r\n  static async getPreferences(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinante pelo token (simulando - em produção seria um token real)\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: { contains: token } // Simplificado para demo\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Assinante não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Preferências obtidas com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: subscriber.id,\r\n            email: subscriber.email,\r\n            name: subscriber.name,\r\n            preferences: subscriber.preferences ? JSON.parse(subscriber.preferences) : {\r\n              frequency: 'weekly',\r\n              categories: [],\r\n              topics: []\r\n            },\r\n            isActive: subscriber.isActive\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter preferências', { error, token: req.params.token });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza preferências do assinante\r\n   */\r\n  static async updatePreferences(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n      const { frequency, categories, topics } = req.body;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinante pelo token (simulando - em produção seria um token real)\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: { contains: token } // Simplificado para demo\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Assinante não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Atualizar preferências\r\n      const updatedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          preferences: JSON.stringify({\r\n            frequency: frequency || 'weekly',\r\n            categories: categories || [],\r\n            topics: topics || []\r\n          }),\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      logger.info('Preferências atualizadas', {\r\n        subscriberId: subscriber.id,\r\n        email: subscriber.email\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Preferências atualizadas com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: updatedSubscriber.id,\r\n            email: updatedSubscriber.email,\r\n            preferences: updatedSubscriber.preferences ? JSON.parse(updatedSubscriber.preferences) : null\r\n          }\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar preferências:', error);\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirma inscrição na newsletter\r\n   */\r\n  static async confirmSubscription(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n\r\n      if (!token) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Token de confirmação é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar confirmationToken no schema\r\n      const subscriber = await prisma.newsletter.findFirst({\r\n        where: {\r\n          email: token, // Usando token como email temporariamente\r\n          isActive: false\r\n        }\r\n      });\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Token inválido ou inscrição já confirmada'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Confirmar inscrição\r\n      const confirmedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          isActive: true,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Inscrição confirmada', {\r\n        email: subscriber.email,\r\n        subscriberId: subscriber.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscrição confirmada com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: confirmedSubscriber.id,\r\n            email: confirmedSubscriber.email,\r\n            name: confirmedSubscriber.name,\r\n            isActive: confirmedSubscriber.isActive,\r\n            updatedAt: confirmedSubscriber.updatedAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao confirmar inscrição', { error, token: req.params.token });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancela inscrição na newsletter\r\n   */\r\n  static async unsubscribe(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { token } = req.params;\r\n      const { email } = req.body;\r\n\r\n      let subscriber;\r\n\r\n      if (token) {\r\n        // Cancelamento via token (link no email)\r\n        // TODO: Implementar tokens de confirmação e cancelamento no schema\r\n        subscriber = await prisma.newsletter.findFirst({\r\n          where: {\r\n            email: token, // Usando token como email temporariamente\r\n            isActive: true\r\n          }\r\n        });\r\n      } else if (email) {\r\n        // Cancelamento via email\r\n        subscriber = await prisma.newsletter.findFirst({\r\n          where: { email, isActive: true }\r\n        });\r\n      }\r\n\r\n      if (!subscriber) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Inscrição não encontrada ou já cancelada'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar token de cancelamento\r\n      const unsubscribeToken = crypto.randomBytes(32).toString('hex');\r\n\r\n      // Cancelar inscrição\r\n      const unsubscribedSubscriber = await prisma.newsletter.update({\r\n        where: { id: subscriber.id },\r\n        data: {\r\n          isActive: false,\r\n          updatedAt: new Date()\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Inscrição cancelada', {\r\n        email: subscriber.email,\r\n        subscriberId: subscriber.id,\r\n        method: token ? 'token' : 'email'\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscrição cancelada com sucesso',\r\n        data: {\r\n          subscriber: {\r\n            id: unsubscribedSubscriber.id,\r\n            email: unsubscribedSubscriber.email,\r\n            isActive: unsubscribedSubscriber.isActive,\r\n            updatedAt: unsubscribedSubscriber.updatedAt\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao cancelar inscrição', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista inscritos com paginação e filtros (Admin)\r\n   */\r\n  static async getSubscribers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        status,\r\n        search,\r\n        dateFrom,\r\n        dateTo,\r\n        page = 1,\r\n        limit = 20,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: NewsletterFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (status) {\r\n        where.status = status;\r\n      }\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { email: { contains: search, mode: 'insensitive' } },\r\n          { name: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (dateFrom || dateTo) {\r\n        where.createdAt = {};\r\n        if (dateFrom) {\r\n          where.createdAt.gte = new Date(dateFrom);\r\n        }\r\n        if (dateTo) {\r\n          const endDate = new Date(dateTo);\r\n          endDate.setHours(23, 59, 59, 999);\r\n          where.createdAt.lte = endDate;\r\n        }\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar inscritos\r\n      const [subscribers, total] = await Promise.all([\r\n        prisma.newsletter.findMany({\r\n          where,\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.newsletter.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      // Estatísticas por status ativo/inativo\r\n      const activeCount = await prisma.newsletter.count({ where: { isActive: true } });\r\n      const inactiveCount = await prisma.newsletter.count({ where: { isActive: false } });\r\n\r\n      const statistics = {\r\n        total,\r\n        byStatus: {\r\n          active: activeCount,\r\n          inactive: inactiveCount\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Inscritos listados com sucesso',\r\n        data: {\r\n          subscribers: subscribers,\r\n          statistics,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar inscritos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria uma nova campanha de newsletter (Admin)\r\n   */\r\n  static async createCampaign(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      // Verificar validações\r\n      const errors = validationResult(req);\r\n      if (!errors.isEmpty()) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Dados inválidos',\r\n          errors: errors.array()\r\n        });\r\n        return;\r\n      }\r\n\r\n      const currentUser = (req as any).user;\r\n      const { subject, content, htmlContent, scheduledFor, targetAudience }: CampaignData = req.body;\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const campaign = await prisma.newsletterCampaign.create({\r\n      //   data: {\r\n      //     subject,\r\n      //     content,\r\n      //     htmlContent: htmlContent || null,\r\n      //     status: scheduledFor ? 'SCHEDULED' : 'DRAFT',\r\n      //     scheduledFor: scheduledFor ? new Date(scheduledFor) : null,\r\n      //     targetAudience: targetAudience ? JSON.stringify(targetAudience) : null,\r\n      //     createdById: currentUser.id\r\n      //   }\r\n      // });\r\n      \r\n      const campaign = { id: 'temp-id', subject, content };\r\n\r\n      // Log da ação\r\n      logger.info('Campanha de newsletter criada', {\r\n        campaignId: campaign.id,\r\n        subject: campaign.subject,\r\n        createdBy: currentUser.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Campanha criada com sucesso',\r\n        data: {\r\n          campaign: campaign\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar campanha', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lista campanhas (Admin)\r\n   */\r\n  static async getCampaigns(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        status,\r\n        page = 1,\r\n        limit = 20,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      } = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n      if (status) {\r\n        where.status = status;\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy as string] = sortOrder;\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const [campaigns, total] = await Promise.all([\r\n      //   prisma.newsletterCampaign.findMany({\r\n      //     where,\r\n      //     include: {\r\n      //       createdBy: {\r\n      //         select: {\r\n      //           id: true,\r\n      //           name: true,\r\n      //           email: true\r\n      //         }\r\n      //       }\r\n      //     },\r\n      //     skip,\r\n      //     take,\r\n      //     orderBy\r\n      //   }),\r\n      //   prisma.newsletterCampaign.count({ where })\r\n      // ]);\r\n      \r\n      const campaigns: any[] = [];\r\n      const total = 0;\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Campanhas listadas com sucesso',\r\n        data: {\r\n          campaigns: campaigns.map(campaign => ({\r\n            ...campaign,\r\n            targetAudience: campaign.targetAudience ? JSON.parse(campaign.targetAudience) : null\r\n          })),\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar campanhas', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envia uma campanha (Admin)\r\n   */\r\n  static async sendCampaign(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID da campanha é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar modelo de campanha no schema.prisma\r\n      // const campaign = await prisma.newsletterCampaign.findUnique({\r\n      //   where: { id }\r\n      // });\r\n\r\n      // if (!campaign) {\r\n      //   res.status(404).json({\r\n      //     success: false,\r\n      //     message: 'Campanha não encontrada'\r\n      //   });\r\n      //   return;\r\n      // }\r\n\r\n      // Buscar destinatários ativos\r\n      const subscribers = await prisma.newsletter.findMany({\r\n        where: { isActive: true },\r\n        select: { id: true, email: true, name: true }\r\n      });\r\n\r\n      if (subscribers.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum destinatário encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // TODO: Implementar envio real de emails\r\n      // await emailService.sendCampaign(campaign, subscribers);\r\n\r\n      // TODO: Implementar envio real de emails e atualização de campanha\r\n      // await prisma.newsletterCampaign.update({\r\n      //   where: { id },\r\n      //   data: {\r\n      //     status: 'SENT',\r\n      //     updatedAt: new Date()\r\n      //   }\r\n      // });\r\n\r\n      // Log da ação\r\n      logger.info('Newsletter enviada', {\r\n        campaignId: id,\r\n        recipientCount: subscribers.length,\r\n        sentBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Newsletter enviada com sucesso para ${subscribers.length} destinatários`,\r\n        data: {\r\n          recipientCount: subscribers.length\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao enviar campanha', { error, campaignId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtém estatísticas da newsletter (Admin)\r\n   */\r\n  static async getNewsletterStats(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { period = '30' } = req.query;\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const [subscriberStats, campaignStats, recentActivity] = await Promise.all([\r\n        // Estatísticas de inscritos por status ativo/inativo\r\n        Promise.all([\r\n          prisma.newsletter.count({ where: { isActive: true } }),\r\n          prisma.newsletter.count({ where: { isActive: false } })\r\n        ]).then(([active, inactive]) => [\r\n          { isActive: true, _count: active },\r\n          { isActive: false, _count: inactive }\r\n        ]),\r\n        // TODO: Implementar estatísticas de campanhas quando modelo for criado\r\n        // prisma.newsletterCampaign.groupBy({\r\n        //   by: ['status'],\r\n        //   _count: true,\r\n        //   _sum: { recipientCount: true }\r\n        // }),\r\n        Promise.resolve([]),\r\n        // Atividade recente\r\n        prisma.newsletter.findMany({\r\n          where: {\r\n            createdAt: { gte: dateLimit }\r\n          },\r\n          select: {\r\n            id: true,\r\n            email: true,\r\n            isActive: true,\r\n            createdAt: true\r\n          },\r\n          orderBy: { createdAt: 'desc' },\r\n          take: 10\r\n        })\r\n      ]);\r\n\r\n      const statistics = {\r\n        subscribers: {\r\n          total: subscriberStats.reduce((acc, stat) => acc + stat._count, 0),\r\n          byStatus: subscriberStats.reduce((acc, stat) => {\r\n            acc[stat.isActive ? 'active' : 'inactive'] = stat._count;\r\n            return acc;\r\n          }, {} as any)\r\n        },\r\n        // TODO: Implementar estatísticas de campanhas quando modelo for criado\r\n        campaigns: {\r\n          total: 0,\r\n          totalRecipients: 0,\r\n          byStatus: {}\r\n        },\r\n        recentActivity: {\r\n          period: periodDays,\r\n          newSubscribers: recentActivity.length,\r\n          subscribers: recentActivity\r\n        }\r\n      };\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Estatísticas obtidas com sucesso',\r\n        data: { statistics }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao obter estatísticas da newsletter', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Envia uma campanha para os assinantes (Admin)\r\n   */\r\n  static async sendCampaignToSubscribers(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID da campanha é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar assinantes ativos\r\n      const activeSubscribers = await prisma.newsletter.findMany({\r\n        where: {\r\n          isActive: true\r\n        },\r\n        select: {\r\n          id: true,\r\n          email: true,\r\n          name: true\r\n        }\r\n      });\r\n\r\n      if (activeSubscribers.length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Nenhum assinante ativo encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Simular envio da campanha\r\n      const campaignData = {\r\n        id,\r\n        subject: `Campanha ${id}`,\r\n        content: 'Conteúdo da campanha...',\r\n        recipients: activeSubscribers.length,\r\n        sentAt: new Date()\r\n      };\r\n\r\n      // Log da ação\r\n      logger.info('Campanha enviada', {\r\n        campaignId: id,\r\n        recipients: activeSubscribers.length,\r\n        sentBy: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: `Campanha enviada com sucesso para ${activeSubscribers.length} assinantes`,\r\n        data: {\r\n          campaign: campaignData,\r\n          recipients: activeSubscribers.length\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao enviar campanha', { error, campaignId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default NewsletterController;"],"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","ignoreList":[]}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de usuários
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  avatar    String?
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  articles     Article[]
  contacts     Contact[]
  newsletters  Newsletter[]
  testimonials Testimonial[]
  uploads      Upload[]
  sessions     UserSession[]

  @@map("users")
}

// Modelo de sessões de usuário (para controle de JWT)
model UserSession {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Modelo de artigos/blog
model Article {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String
  excerpt     String?
  featuredImage String?
  status      ArticleStatus @default(DRAFT)
  publishedAt DateTime?
  authorId    String
  views       Int           @default(0)
  likes       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relacionamentos
  author     User              @relation(fields: [authorId], references: [id])
  categories ArticleCategory[]
  tags       ArticleTag[]
  comments   ArticleComment[]

  @@map("articles")
}

// Modelo de categorias de artigos
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  articles ArticleCategory[]

  @@map("categories")
}

// Modelo de tags de artigos
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  articles ArticleTag[]

  @@map("tags")
}

// Tabela de relacionamento entre artigos e categorias
model ArticleCategory {
  articleId  String
  categoryId String
  createdAt  DateTime @default(now())

  // Relacionamentos
  article  Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([articleId, categoryId])
  @@map("article_categories")
}

// Tabela de relacionamento entre artigos e tags
model ArticleTag {
  articleId String
  tagId     String
  createdAt DateTime @default(now())

  // Relacionamentos
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@map("article_tags")
}

// Modelo de comentários de artigos
model ArticleComment {
  id        String   @id @default(cuid())
  content   String
  authorName String
  authorEmail String
  articleId String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_comments")
}

// Modelo de contatos
model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  userId    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relacionamentos
  user User? @relation(fields: [userId], references: [id])

  @@map("contacts")
}

// Modelo de newsletter
model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  user User? @relation(fields: [userId], references: [id])

  @@map("newsletters")
}

// Modelo de serviços
model Service {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal?
  duration    String?
  features    String[] // Array de características
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}

// Modelo de membros da equipe
model TeamMember {
  id          String   @id @default(cuid())
  name        String
  position    String
  bio         String?
  avatar      String?
  email       String?
  phone       String?
  linkedin    String?
  instagram   String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("team_members")
}

// Modelo de depoimentos
model Testimonial {
  id         String   @id @default(cuid())
  name       String
  position   String?
  company    String?
  content    String
  rating     Int      @default(5)
  avatar     String?
  isApproved Boolean  @default(false)
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  user User? @relation(fields: [userId], references: [id])

  @@map("testimonials")
}

// Modelo de FAQ
model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

// Modelo de uploads/arquivos
model Upload {
  id        String     @id @default(cuid())
  filename  String
  originalName String
  mimetype  String
  size      Int
  path      String
  url       String
  type      UploadType
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relacionamentos
  user User? @relation(fields: [userId], references: [id])

  @@map("uploads")
}

// Modelo de configurações do sistema
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  category  String   @default("general")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// Enums
enum UserRole {
  ADMIN
  EDITOR
  USER
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum UploadType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
  OTHER
}
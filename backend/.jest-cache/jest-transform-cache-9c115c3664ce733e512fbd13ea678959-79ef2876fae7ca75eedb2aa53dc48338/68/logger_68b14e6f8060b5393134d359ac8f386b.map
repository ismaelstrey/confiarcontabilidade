{"version":3,"names":["winston","cov_pg4226fhz","s","__importStar","require","path","fs","logDir","b","process","env","LOG_FILE_PATH","existsSync","mkdirSync","recursive","logFormat","format","combine","timestamp","errors","stack","json","consoleFormat","colorize","printf","level","message","meta","f","msg","Object","keys","length","JSON","stringify","transports","NODE_ENV","push","Console","LOG_LEVEL","File","filename","join","maxsize","maxFiles","logger","createLogger","exitOnError","logAuth","userId","metadata","info","category","exports","logRequest","logDatabase","logSystem","default"],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\utils\\logger.ts"],"sourcesContent":["import * as winston from 'winston';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\n\r\n// Criar diretório de logs se não existir\r\nconst logDir = process.env.LOG_FILE_PATH || './logs';\r\nif (!fs.existsSync(logDir)) {\r\n  fs.mkdirSync(logDir, { recursive: true });\r\n}\r\n\r\n// Configuração dos formatos de log\r\nconst logFormat = winston.format.combine(\r\n  winston.format.timestamp({\r\n    format: 'YYYY-MM-DD HH:mm:ss',\r\n  }),\r\n  winston.format.errors({ stack: true }),\r\n  winston.format.json(),\r\n);\r\n\r\n// Formato para console (desenvolvimento)\r\nconst consoleFormat = winston.format.combine(\r\n  winston.format.colorize(),\r\n  winston.format.timestamp({\r\n    format: 'HH:mm:ss',\r\n  }),\r\n  winston.format.printf(({ timestamp, level, message, ...meta }) => {\r\n    let msg = `${timestamp} [${level}]: ${message}`;\r\n    if (Object.keys(meta).length > 0) {\r\n      msg += ` ${JSON.stringify(meta, null, 2)}`;\r\n    }\r\n    return msg;\r\n  }),\r\n);\r\n\r\n// Configuração dos transportes\r\nconst transports: winston.transport[] = [];\r\n\r\n// Console transport (sempre ativo em desenvolvimento)\r\nif (process.env.NODE_ENV !== 'production') {\r\n  transports.push(\r\n    new winston.transports.Console({\r\n      format: consoleFormat,\r\n      level: process.env.LOG_LEVEL || 'info',\r\n    }),\r\n  );\r\n}\r\n\r\n// File transports\r\ntransports.push(\r\n  // Log de erros\r\n  new winston.transports.File({\r\n    filename: path.join(logDir, 'error.log'),\r\n    level: 'error',\r\n    format: logFormat,\r\n    maxsize: 5242880, // 5MB\r\n    maxFiles: 5,\r\n  }),\r\n  // Log combinado\r\n  new winston.transports.File({\r\n    filename: path.join(logDir, 'combined.log'),\r\n    format: logFormat,\r\n    maxsize: 5242880, // 5MB\r\n    maxFiles: 5,\r\n  }),\r\n);\r\n\r\n// Criar instância do logger\r\nconst logger = winston.createLogger({\r\n  level: process.env.LOG_LEVEL || 'info',\r\n  format: logFormat,\r\n  transports,\r\n  // Não sair em caso de erro\r\n  exitOnError: false,\r\n});\r\n\r\n// Função para log de autenticação\r\nexport const logAuth = (\r\n  message: string,\r\n  userId?: string,\r\n  metadata?: Record<string, any>\r\n) => {\r\n  logger.info(message, {\r\n    category: 'auth',\r\n    userId,\r\n    ...metadata,\r\n  });\r\n};\r\n\r\n// Função para log de requisições\r\nexport const logRequest = (\r\n  message: string,\r\n  metadata?: Record<string, any>\r\n) => {\r\n  logger.info(message, {\r\n    category: 'request',\r\n    ...metadata,\r\n  });\r\n};\r\n\r\n// Função para log de operações de banco\r\nexport const logDatabase = (\r\n  message: string,\r\n  metadata?: Record<string, any>\r\n) => {\r\n  logger.info(message, {\r\n    category: 'database',\r\n    ...metadata,\r\n  });\r\n};\r\n\r\n// Função para log de sistema\r\nexport const logSystem = (\r\n  message: string,\r\n  metadata?: Record<string, any>\r\n) => {\r\n  logger.info(message, {\r\n    category: 'system',\r\n    ...metadata,\r\n  });\r\n};\r\n\r\nexport default logger;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,OAAA;AAAA;AAAA,CAAAC,aAAA,GAAAC,CAAA,QAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,IAAA;AAAA;AAAA,CAAAJ,aAAA,GAAAC,CAAA,QAAAC,YAAA,CAAAC,OAAA;AACA,MAAAE,EAAA;AAAA;AAAA,CAAAL,aAAA,GAAAC,CAAA,QAAAC,YAAA,CAAAC,OAAA;AAEA;AACA,MAAMG,MAAM;AAAA;AAAA,CAAAN,aAAA,GAAAC,CAAA;AAAG;AAAA,CAAAD,aAAA,GAAAO,CAAA,WAAAC,OAAO,CAACC,GAAG,CAACC,aAAa;AAAA;AAAA,CAAAV,aAAA,GAAAO,CAAA,WAAI,QAAQ;AAAC;AAAAP,aAAA,GAAAC,CAAA;AACrD,IAAI,CAACI,EAAE,CAACM,UAAU,CAACL,MAAM,CAAC,EAAE;EAAA;EAAAN,aAAA,GAAAO,CAAA;EAAAP,aAAA,GAAAC,CAAA;EAC1BI,EAAE,CAACO,SAAS,CAACN,MAAM,EAAE;IAAEO,SAAS,EAAE;EAAI,CAAE,CAAC;AAC3C,CAAC;AAAA;AAAA;EAAAb,aAAA,GAAAO,CAAA;AAAA;AAED;AACA,MAAMO,SAAS;AAAA;AAAA,CAAAd,aAAA,GAAAC,CAAA,QAAGF,OAAO,CAACgB,MAAM,CAACC,OAAO,CACtCjB,OAAO,CAACgB,MAAM,CAACE,SAAS,CAAC;EACvBF,MAAM,EAAE;CACT,CAAC,EACFhB,OAAO,CAACgB,MAAM,CAACG,MAAM,CAAC;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC,EACtCpB,OAAO,CAACgB,MAAM,CAACK,IAAI,EAAE,CACtB;AAED;AACA,MAAMC,aAAa;AAAA;AAAA,CAAArB,aAAA,GAAAC,CAAA,QAAGF,OAAO,CAACgB,MAAM,CAACC,OAAO,CAC1CjB,OAAO,CAACgB,MAAM,CAACO,QAAQ,EAAE,EACzBvB,OAAO,CAACgB,MAAM,CAACE,SAAS,CAAC;EACvBF,MAAM,EAAE;CACT,CAAC,EACFhB,OAAO,CAACgB,MAAM,CAACQ,MAAM,CAAC,CAAC;EAAEN,SAAS;EAAEO,KAAK;EAAEC,OAAO;EAAE,GAAGC;AAAI,CAAE,KAAI;EAAA;EAAA1B,aAAA,GAAA2B,CAAA;EAC/D,IAAIC,GAAG;EAAA;EAAA,CAAA5B,aAAA,GAAAC,CAAA,QAAG,GAAGgB,SAAS,KAAKO,KAAK,MAAMC,OAAO,EAAE;EAAC;EAAAzB,aAAA,GAAAC,CAAA;EAChD,IAAI4B,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAACK,MAAM,GAAG,CAAC,EAAE;IAAA;IAAA/B,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAC,CAAA;IAChC2B,GAAG,IAAI,IAAII,IAAI,CAACC,SAAS,CAACP,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE;EAC5C,CAAC;EAAA;EAAA;IAAA1B,aAAA,GAAAO,CAAA;EAAA;EAAAP,aAAA,GAAAC,CAAA;EACD,OAAO2B,GAAG;AACZ,CAAC,CAAC,CACH;AAED;AACA,MAAMM,UAAU;AAAA;AAAA,CAAAlC,aAAA,GAAAC,CAAA,QAAwB,EAAE;AAE1C;AAAA;AAAAD,aAAA,GAAAC,CAAA;AACA,IAAIO,OAAO,CAACC,GAAG,CAAC0B,QAAQ,KAAK,YAAY,EAAE;EAAA;EAAAnC,aAAA,GAAAO,CAAA;EAAAP,aAAA,GAAAC,CAAA;EACzCiC,UAAU,CAACE,IAAI,CACb,IAAIrC,OAAO,CAACmC,UAAU,CAACG,OAAO,CAAC;IAC7BtB,MAAM,EAAEM,aAAa;IACrBG,KAAK;IAAE;IAAA,CAAAxB,aAAA,GAAAO,CAAA,WAAAC,OAAO,CAACC,GAAG,CAAC6B,SAAS;IAAA;IAAA,CAAAtC,aAAA,GAAAO,CAAA,WAAI,MAAM;GACvC,CAAC,CACH;AACH,CAAC;AAAA;AAAA;EAAAP,aAAA,GAAAO,CAAA;AAAA;AAED;AAAAP,aAAA,GAAAC,CAAA;AACAiC,UAAU,CAACE,IAAI;AACb;AACA,IAAIrC,OAAO,CAACmC,UAAU,CAACK,IAAI,CAAC;EAC1BC,QAAQ,EAAEpC,IAAI,CAACqC,IAAI,CAACnC,MAAM,EAAE,WAAW,CAAC;EACxCkB,KAAK,EAAE,OAAO;EACdT,MAAM,EAAED,SAAS;EACjB4B,OAAO,EAAE,OAAO;EAAE;EAClBC,QAAQ,EAAE;CACX,CAAC;AACF;AACA,IAAI5C,OAAO,CAACmC,UAAU,CAACK,IAAI,CAAC;EAC1BC,QAAQ,EAAEpC,IAAI,CAACqC,IAAI,CAACnC,MAAM,EAAE,cAAc,CAAC;EAC3CS,MAAM,EAAED,SAAS;EACjB4B,OAAO,EAAE,OAAO;EAAE;EAClBC,QAAQ,EAAE;CACX,CAAC,CACH;AAED;AACA,MAAMC,MAAM;AAAA;AAAA,CAAA5C,aAAA,GAAAC,CAAA,QAAGF,OAAO,CAAC8C,YAAY,CAAC;EAClCrB,KAAK;EAAE;EAAA,CAAAxB,aAAA,GAAAO,CAAA,WAAAC,OAAO,CAACC,GAAG,CAAC6B,SAAS;EAAA;EAAA,CAAAtC,aAAA,GAAAO,CAAA,WAAI,MAAM;EACtCQ,MAAM,EAAED,SAAS;EACjBoB,UAAU;EACV;EACAY,WAAW,EAAE;CACd,CAAC;AAEF;AAAA;AAAA9C,aAAA,GAAAC,CAAA;AACO,MAAM8C,OAAO,GAAGA,CACrBtB,OAAe,EACfuB,MAAe,EACfC,QAA8B,KAC5B;EAAA;EAAAjD,aAAA,GAAA2B,CAAA;EAAA3B,aAAA,GAAAC,CAAA;EACF2C,MAAM,CAACM,IAAI,CAACzB,OAAO,EAAE;IACnB0B,QAAQ,EAAE,MAAM;IAChBH,MAAM;IACN,GAAGC;GACJ,CAAC;AACJ,CAAC;AAAC;AAAAjD,aAAA,GAAAC,CAAA;AAVWmD,OAAA,CAAAL,OAAO,GAAAA,OAAA;AAYpB;AAAA;AAAA/C,aAAA,GAAAC,CAAA;AACO,MAAMoD,UAAU,GAAGA,CACxB5B,OAAe,EACfwB,QAA8B,KAC5B;EAAA;EAAAjD,aAAA,GAAA2B,CAAA;EAAA3B,aAAA,GAAAC,CAAA;EACF2C,MAAM,CAACM,IAAI,CAACzB,OAAO,EAAE;IACnB0B,QAAQ,EAAE,SAAS;IACnB,GAAGF;GACJ,CAAC;AACJ,CAAC;AAAC;AAAAjD,aAAA,GAAAC,CAAA;AARWmD,OAAA,CAAAC,UAAU,GAAAA,UAAA;AAUvB;AAAA;AAAArD,aAAA,GAAAC,CAAA;AACO,MAAMqD,WAAW,GAAGA,CACzB7B,OAAe,EACfwB,QAA8B,KAC5B;EAAA;EAAAjD,aAAA,GAAA2B,CAAA;EAAA3B,aAAA,GAAAC,CAAA;EACF2C,MAAM,CAACM,IAAI,CAACzB,OAAO,EAAE;IACnB0B,QAAQ,EAAE,UAAU;IACpB,GAAGF;GACJ,CAAC;AACJ,CAAC;AAAC;AAAAjD,aAAA,GAAAC,CAAA;AARWmD,OAAA,CAAAE,WAAW,GAAAA,WAAA;AAUxB;AAAA;AAAAtD,aAAA,GAAAC,CAAA;AACO,MAAMsD,SAAS,GAAGA,CACvB9B,OAAe,EACfwB,QAA8B,KAC5B;EAAA;EAAAjD,aAAA,GAAA2B,CAAA;EAAA3B,aAAA,GAAAC,CAAA;EACF2C,MAAM,CAACM,IAAI,CAACzB,OAAO,EAAE;IACnB0B,QAAQ,EAAE,QAAQ;IAClB,GAAGF;GACJ,CAAC;AACJ,CAAC;AAAC;AAAAjD,aAAA,GAAAC,CAAA;AARWmD,OAAA,CAAAG,SAAS,GAAAA,SAAA;AAQpB;AAAAvD,aAAA,GAAAC,CAAA;AAEFmD,OAAA,CAAAI,OAAA,GAAeZ,MAAM","ignoreList":[]}
{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\logger.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\middlewares\\logger.ts"],"sourcesContent":["import winston from 'winston';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\n// Criar diretório de logs se não existir\r\nconst logDir = process.env.LOG_FILE_PATH || './logs';\r\nif (!fs.existsSync(logDir)) {\r\n  fs.mkdirSync(logDir, { recursive: true });\r\n}\r\n\r\n// Configuração dos formatos de log\r\nconst logFormat = winston.format.combine(\r\n  winston.format.timestamp({\r\n    format: 'YYYY-MM-DD HH:mm:ss',\r\n  }),\r\n  winston.format.errors({ stack: true }),\r\n  winston.format.json(),\r\n);\r\n\r\n// Formato para console (desenvolvimento)\r\nconst consoleFormat = winston.format.combine(\r\n  winston.format.colorize(),\r\n  winston.format.timestamp({\r\n    format: 'HH:mm:ss',\r\n  }),\r\n  winston.format.printf(({ timestamp, level, message, ...meta }) => {\r\n    let msg = `${timestamp} [${level}]: ${message}`;\r\n    if (Object.keys(meta).length > 0) {\r\n      msg += ` ${JSON.stringify(meta, null, 2)}`;\r\n    }\r\n    return msg;\r\n  }),\r\n);\r\n\r\n// Configuração dos transportes\r\nconst transports: winston.transport[] = [];\r\n\r\n// Console transport (sempre ativo em desenvolvimento)\r\nif (process.env.NODE_ENV !== 'production') {\r\n  transports.push(\r\n    new winston.transports.Console({\r\n      format: consoleFormat,\r\n      level: process.env.LOG_LEVEL || 'info',\r\n    }),\r\n  );\r\n}\r\n\r\n// File transports\r\ntransports.push(\r\n  // Log de erros\r\n  new winston.transports.File({\r\n    filename: path.join(logDir, 'error.log'),\r\n    level: 'error',\r\n    format: logFormat,\r\n    maxsize: parseInt(process.env.LOG_MAX_SIZE || '20971520'), // 20MB\r\n    maxFiles: parseInt(process.env.LOG_MAX_FILES || '5'),\r\n  }),\r\n  // Log combinado\r\n  new winston.transports.File({\r\n    filename: path.join(logDir, 'combined.log'),\r\n    format: logFormat,\r\n    maxsize: parseInt(process.env.LOG_MAX_SIZE || '20971520'), // 20MB\r\n    maxFiles: parseInt(process.env.LOG_MAX_FILES || '5'),\r\n  }),\r\n  // Log de acesso\r\n  new winston.transports.File({\r\n    filename: path.join(logDir, 'access.log'),\r\n    level: 'http',\r\n    format: logFormat,\r\n    maxsize: parseInt(process.env.LOG_MAX_SIZE || '20971520'), // 20MB\r\n    maxFiles: parseInt(process.env.LOG_MAX_FILES || '5'),\r\n  }),\r\n);\r\n\r\n// Criar logger\r\nexport const logger = winston.createLogger({\r\n  level: process.env.LOG_LEVEL || 'info',\r\n  format: logFormat,\r\n  defaultMeta: {\r\n    service: 'contabilidade-igrejinha-api',\r\n    environment: process.env.NODE_ENV || 'development',\r\n  },\r\n  transports,\r\n  // Não sair em caso de erro\r\n  exitOnError: false,\r\n});\r\n\r\n// Adicionar console em produção se necessário\r\nif (process.env.NODE_ENV === 'production' && process.env.VERBOSE_LOGGING === 'true') {\r\n  logger.add(\r\n    new winston.transports.Console({\r\n      format: consoleFormat,\r\n      level: 'warn',\r\n    }),\r\n  );\r\n}\r\n\r\n// Stream para integração com Morgan (se necessário)\r\nexport const logStream = {\r\n  write: (message: string) => {\r\n    logger.http(message.trim());\r\n  },\r\n};\r\n\r\n// Função para log de performance\r\nexport const logPerformance = (operation: string, startTime: number, metadata?: any) => {\r\n  const duration = Date.now() - startTime;\r\n  logger.info(`Performance: ${operation}`, {\r\n    duration: `${duration}ms`,\r\n    operation,\r\n    ...metadata,\r\n  });\r\n};\r\n\r\n// Função para log de database queries (se necessário)\r\nexport const logDatabaseQuery = (query: string, duration: number, params?: any) => {\r\n  if (process.env.NODE_ENV === 'development' && process.env.DEBUG === 'true') {\r\n    logger.debug('Database Query', {\r\n      query,\r\n      duration: `${duration}ms`,\r\n      params,\r\n    });\r\n  }\r\n};\r\n\r\n// Função para log de autenticação\r\nexport const logAuth = (action: string, userId?: string, metadata?: any) => {\r\n  logger.info(`Auth: ${action}`, {\r\n    action,\r\n    userId,\r\n    timestamp: new Date().toISOString(),\r\n    ...metadata,\r\n  });\r\n};\r\n\r\n// Função para log de upload de arquivos\r\nexport const logFileUpload = (filename: string, size: number, userId?: string) => {\r\n  logger.info('File Upload', {\r\n    filename,\r\n    size: `${(size / 1024 / 1024).toFixed(2)}MB`,\r\n    userId,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n};\r\n\r\n// Função para log de email\r\nexport const logEmail = (action: string, to: string, subject?: string, error?: any) => {\r\n  if (error) {\r\n    logger.error(`Email Error: ${action}`, {\r\n      action,\r\n      to,\r\n      subject,\r\n      error: error.message,\r\n      stack: error.stack,\r\n    });\r\n  } else {\r\n    logger.info(`Email: ${action}`, {\r\n      action,\r\n      to,\r\n      subject,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  }\r\n};\r\n\r\n// Função para log de cache\r\nexport const logCache = (action: string, key: string, hit?: boolean, ttl?: number) => {\r\n  logger.debug(`Cache: ${action}`, {\r\n    action,\r\n    key,\r\n    hit,\r\n    ttl,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n};\r\n\r\nexport default logger;"],"version":3}
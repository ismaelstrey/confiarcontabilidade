{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\__tests__\\auth.integration.test.ts","mappings":";;;;;AAAA,0DAAgC;AAChC,+DAAkE;AAClE,6CAA2C;AAC3C,2CAAgD;AAEhD,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC7C,MAAM,GAAG,GAAG,IAAA,6BAAgB,GAAE,CAAC;IAE/B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,8CAA8C;QAC9C,MAAM,cAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,MAAM,aAAa,GAAG;YACpB,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,kBAAkB;YACzB,QAAQ,EAAE,cAAc;SACzB,CAAC;QAEF,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,oBAAoB,CAAC;iBAC1B,IAAI,CAAC,aAAa,CAAC;iBACnB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC1D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC9D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAE/D,qDAAqD;YACrD,MAAM,WAAW,GAAG,MAAM,cAAM,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC/C,KAAK,EAAE,EAAE,KAAK,EAAE,aAAa,CAAC,KAAK,EAAE;aACtC,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CAAC,CAAC,UAAU,EAAE,CAAC;YACjC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,WAAW,GAAG;gBAClB,GAAG,aAAa;gBAChB,KAAK,EAAE,eAAe;aACvB,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,oBAAoB,CAAC;iBAC1B,IAAI,CAAC,WAAW,CAAC;iBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,gBAAgB,GAAG;gBACvB,GAAG,aAAa;gBAChB,QAAQ,EAAE,KAAK;aAChB,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,oBAAoB,CAAC;iBAC1B,IAAI,CAAC,gBAAgB,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,2BAA2B;YAC3B,MAAM,cAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,eAAe;oBACrB,KAAK,EAAE,aAAa,CAAC,KAAK;oBAC1B,QAAQ,EAAE,MAAM,IAAA,mBAAY,EAAC,qBAAqB,CAAC;oBACnD,IAAI,EAAE,QAAQ;iBACf;aACF,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,oBAAoB,CAAC;iBAC1B,IAAI,CAAC,aAAa,CAAC;iBACnB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,cAAc,GAAG;gBACrB,IAAI,EAAE,WAAW;gBACjB,4BAA4B;aAC7B,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,oBAAoB,CAAC;iBAC1B,IAAI,CAAC,cAAc,CAAC;iBACpB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,MAAM,QAAQ,GAAG;YACf,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,kBAAkB;YACzB,QAAQ,EAAE,cAAc;SACzB,CAAC;QAEF,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,0CAA0C;YAC1C,MAAM,cAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,QAAQ,EAAE,MAAM,IAAA,mBAAY,EAAC,QAAQ,CAAC,QAAQ,CAAC;oBAC/C,IAAI,EAAE,QAAQ;iBACf;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC,SAAS,CAAC;iBACf,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC1D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAClD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC3D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,yBAAyB;gBAChC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC,SAAS,CAAC;iBACf,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,mBAAmB;aAC9B,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC,SAAS,CAAC;iBACf,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,mBAAmB;YACnB,MAAM,cAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE;aACjC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAG;gBAChB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC,SAAS,CAAC;iBACf,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,cAAc,GAAG;gBACrB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,oBAAoB;aACrB,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC,cAAc,CAAC;iBACpB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,IAAI,YAAoB,CAAC;QACzB,IAAI,MAAc,CAAC;QAEnB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,yDAAyD;YACzD,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,kBAAkB;gBACzB,QAAQ,EAAE,cAAc;aACzB,CAAC;YAEF,MAAM,IAAI,GAAG,MAAM,cAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,QAAQ,EAAE,MAAM,IAAA,mBAAY,EAAC,QAAQ,CAAC,QAAQ,CAAC;oBAC/C,IAAI,EAAE,QAAQ;iBACf;aACF,CAAC,CAAC;YAEH,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;YAEjB,MAAM,aAAa,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACrC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC,CAAC;YAEL,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACpF,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,mBAAmB,CAAC;iBACzB,IAAI,CAAC,EAAE,YAAY,EAAE,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACnD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,mBAAmB,CAAC;iBACzB,IAAI,CAAC,EAAE,YAAY,EAAE,eAAe,EAAE,CAAC;iBACvC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,mBAAmB,CAAC;iBACzB,IAAI,CAAC,EAAE,CAAC;iBACR,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAI,KAAa,CAAC;QAClB,IAAI,MAAc,CAAC;QAEnB,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,iDAAiD;YACjD,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,kBAAkB;gBACzB,QAAQ,EAAE,cAAc;aACzB,CAAC;YAEF,MAAM,IAAI,GAAG,MAAM,cAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACpC,IAAI,EAAE;oBACJ,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,QAAQ,EAAE,MAAM,IAAA,mBAAY,EAAC,QAAQ,CAAC,QAAQ,CAAC;oBAC/C,IAAI,EAAE,QAAQ;iBACf;aACF,CAAC,CAAC;YAEH,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;YAEjB,MAAM,aAAa,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACrC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;aAC5B,CAAC,CAAC;YAEL,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5E,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,kBAAkB,CAAC;iBACxB,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,kBAAkB,CAAC;iBACxB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,kBAAkB,CAAC;iBACxB,GAAG,CAAC,eAAe,EAAE,sBAAsB,CAAC;iBAC5C,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\routes\\__tests__\\auth.integration.test.ts"],"sourcesContent":["import request from 'supertest';\r\nimport { createTestServer } from '../../tests/helpers/testServer';\r\nimport { prisma } from '../../tests/setup';\r\nimport { hashPassword } from '../../utils/auth';\r\n\r\ndescribe('Auth Routes Integration Tests', () => {\r\n  const app = createTestServer();\r\n  \r\n  beforeEach(async () => {\r\n    // Limpa os dados de teste antes de cada teste\r\n    await prisma.user.deleteMany();\r\n  });\r\n\r\n  describe('POST /api/auth/register', () => {\r\n    const validUserData = {\r\n      name: 'Test User',\r\n      email: 'test@example.com',\r\n      password: 'Password123!',\r\n    };\r\n\r\n    it('should register a new user successfully', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/register')\r\n        .send(validUserData)\r\n        .expect(201);\r\n\r\n      expect(response.body).toHaveProperty('success', true);\r\n      expect(response.body).toHaveProperty('data');\r\n      expect(response.body.data).toHaveProperty('token');\r\n      expect(response.body.data).toHaveProperty('refreshToken');\r\n      expect(response.body.data).toHaveProperty('user');\r\n      expect(response.body.data.user.email).toBe(validUserData.email);\r\n      expect(response.body.data.user.name).toBe(validUserData.name);\r\n      expect(response.body.data.user).not.toHaveProperty('password');\r\n\r\n      // Verifica se o usuário foi criado no banco de dados\r\n      const createdUser = await prisma.user.findUnique({\r\n        where: { email: validUserData.email },\r\n      });\r\n      expect(createdUser).toBeTruthy();\r\n      expect(createdUser?.name).toBe(validUserData.name);\r\n    });\r\n\r\n    it('should return 400 for invalid email format', async () => {\r\n      const invalidData = {\r\n        ...validUserData,\r\n        email: 'invalid-email',\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/register')\r\n        .send(invalidData)\r\n        .expect(400);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 400 for weak password', async () => {\r\n      const weakPasswordData = {\r\n        ...validUserData,\r\n        password: '123',\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/register')\r\n        .send(weakPasswordData)\r\n        .expect(400);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 409 for existing email', async () => {\r\n      // Cria um usuário primeiro\r\n      await prisma.user.create({\r\n        data: {\r\n          name: 'Existing User',\r\n          email: validUserData.email,\r\n          password: await hashPassword('AnotherPassword123!'),\r\n          role: 'CLIENT',\r\n        },\r\n      });\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/register')\r\n        .send(validUserData)\r\n        .expect(409);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 400 for missing required fields', async () => {\r\n      const incompleteData = {\r\n        name: 'Test User',\r\n        // email e password faltando\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/register')\r\n        .send(incompleteData)\r\n        .expect(400);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/auth/login', () => {\r\n    const userData = {\r\n      name: 'Test User',\r\n      email: 'test@example.com',\r\n      password: 'Password123!',\r\n    };\r\n\r\n    beforeEach(async () => {\r\n      // Cria um usuário para os testes de login\r\n      await prisma.user.create({\r\n        data: {\r\n          name: userData.name,\r\n          email: userData.email,\r\n          password: await hashPassword(userData.password),\r\n          role: 'CLIENT',\r\n        },\r\n      });\r\n    });\r\n\r\n    it('should login successfully with valid credentials', async () => {\r\n      const loginData = {\r\n        email: userData.email,\r\n        password: userData.password,\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send(loginData)\r\n        .expect(200);\r\n\r\n      expect(response.body).toHaveProperty('success', true);\r\n      expect(response.body).toHaveProperty('data');\r\n      expect(response.body.data).toHaveProperty('token');\r\n      expect(response.body.data).toHaveProperty('refreshToken');\r\n      expect(response.body.data).toHaveProperty('user');\r\n      expect(response.body.data.user.email).toBe(userData.email);\r\n      expect(response.body.data.user).not.toHaveProperty('password');\r\n    });\r\n\r\n    it('should return 401 for invalid email', async () => {\r\n      const loginData = {\r\n        email: 'nonexistent@example.com',\r\n        password: userData.password,\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send(loginData)\r\n        .expect(401);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 401 for invalid password', async () => {\r\n      const loginData = {\r\n        email: userData.email,\r\n        password: 'WrongPassword123!',\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send(loginData)\r\n        .expect(401);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 401 for deleted user', async () => {\r\n      // Remove o usuário\r\n      await prisma.user.delete({\r\n        where: { email: userData.email },\r\n      });\r\n\r\n      const loginData = {\r\n        email: userData.email,\r\n        password: userData.password,\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send(loginData)\r\n        .expect(401);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 400 for missing credentials', async () => {\r\n      const incompleteData = {\r\n        email: userData.email,\r\n        // password faltando\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/auth/login')\r\n        .send(incompleteData)\r\n        .expect(400);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/auth/refresh', () => {\r\n    let refreshToken: string;\r\n    let userId: string;\r\n\r\n    beforeEach(async () => {\r\n      // Cria um usuário e faz login para obter o refresh token\r\n      const userData = {\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        password: 'Password123!',\r\n      };\r\n\r\n      const user = await prisma.user.create({\r\n        data: {\r\n          name: userData.name,\r\n          email: userData.email,\r\n          password: await hashPassword(userData.password),\r\n          role: 'CLIENT',\r\n        },\r\n      });\r\n\r\n      userId = user.id;\r\n\r\n      const loginResponse = await request(app)\r\n        .post('/api/auth/login')\r\n        .send({\r\n          email: userData.email,\r\n          password: userData.password,\r\n        });\r\n\r\n      console.log('Refresh login response:', JSON.stringify(loginResponse.body, null, 2));\r\n      refreshToken = loginResponse.body.data.refreshToken;\r\n    });\r\n\r\n    it('should refresh token successfully', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/refresh')\r\n        .send({ refreshToken })\r\n        .expect(200);\r\n\r\n      expect(response.body).toHaveProperty('success', true);\r\n      expect(response.body).toHaveProperty('data');\r\n      expect(response.body.data).toHaveProperty('token');\r\n      expect(response.body.data).toHaveProperty('refreshToken');\r\n    });\r\n\r\n    it('should return 401 for invalid refresh token', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/refresh')\r\n        .send({ refreshToken: 'invalid_token' })\r\n        .expect(401);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 400 for missing refresh token', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/refresh')\r\n        .send({})\r\n        .expect(400);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/auth/logout', () => {\r\n    let token: string;\r\n    let userId: string;\r\n\r\n    beforeEach(async () => {\r\n      // Cria um usuário e faz login para obter o token\r\n      const userData = {\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        password: 'Password123!',\r\n      };\r\n\r\n      const user = await prisma.user.create({\r\n        data: {\r\n          name: userData.name,\r\n          email: userData.email,\r\n          password: await hashPassword(userData.password),\r\n          role: 'CLIENT',\r\n        },\r\n      });\r\n\r\n      userId = user.id;\r\n\r\n      const loginResponse = await request(app)\r\n        .post('/api/auth/login')\r\n        .send({\r\n          email: userData.email,\r\n          password: userData.password,\r\n        });\r\n\r\n      console.log('Login response:', JSON.stringify(loginResponse.body, null, 2));\r\n      token = loginResponse.body.data.token;\r\n    });\r\n\r\n    it('should logout successfully', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/logout')\r\n        .set('Authorization', `Bearer ${token}`)\r\n        .expect(200);\r\n\r\n      expect(response.body).toHaveProperty('success', true);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 401 for missing token', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/logout')\r\n        .expect(401);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n\r\n    it('should return 401 for invalid token', async () => {\r\n      const response = await request(app)\r\n        .post('/api/auth/logout')\r\n        .set('Authorization', 'Bearer invalid_token')\r\n        .expect(401);\r\n\r\n      expect(response.body).toHaveProperty('success', false);\r\n      expect(response.body).toHaveProperty('message');\r\n    });\r\n  });\r\n});"],"version":3}
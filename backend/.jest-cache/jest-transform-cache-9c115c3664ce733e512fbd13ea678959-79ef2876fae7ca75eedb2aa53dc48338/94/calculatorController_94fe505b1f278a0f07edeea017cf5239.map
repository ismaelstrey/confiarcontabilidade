{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\calculatorController.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\calculatorController.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport logger from '../utils/logger';\n\nconst prisma = new PrismaClient();\n\n// Interface para dados de cálculo fiscal\ninterface TaxCalculationRequest {\n  income: number;\n  deductions: number;\n  taxYear: number;\n  dependents?: number;\n  medicalExpenses?: number;\n  educationExpenses?: number;\n  pensionContributions?: number;\n}\n\ninterface TaxCalculationResult {\n  grossIncome: number;\n  taxableIncome: number;\n  incomeTax: number;\n  socialSecurity: number;\n  totalTax: number;\n  netIncome: number;\n  effectiveRate: number;\n  marginalRate: number;\n  breakdown: {\n    federalTax: number;\n    stateTax: number;\n    municipalTax: number;\n  };\n}\n\n/**\n * Controller responsável pelos cálculos fiscais\n */\nexport class CalculatorController {\n  /**\n   * Calcula impostos com base nos dados fornecidos\n   */\n  async calculateTaxes(req: Request, res: Response): Promise<void> {\n    try {\n      const {\n        income,\n        deductions,\n        taxYear,\n        dependents = 0,\n        medicalExpenses = 0,\n        educationExpenses = 0,\n        pensionContributions = 0\n      }: TaxCalculationRequest = req.body;\n\n      // Validações básicas\n      if (income < 0 || deductions < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Renda e deduções devem ser valores positivos'\n        });\n        return;\n      }\n\n      if (taxYear < 2020 || taxYear > 2030) {\n        res.status(400).json({\n          success: false,\n          message: 'Ano fiscal deve estar entre 2020 e 2030'\n        });\n        return;\n      }\n\n      // Cálculo da renda tributável\n      const totalDeductions = deductions + medicalExpenses + educationExpenses + pensionContributions;\n      const dependentDeduction = dependents * 2275.08; // Valor para 2024\n      const taxableIncome = Math.max(0, income - totalDeductions - dependentDeduction);\n\n      // Cálculo do Imposto de Renda (tabela progressiva 2024)\n      let incomeTax = 0;\n      if (taxableIncome > 22847.76) {\n        if (taxableIncome <= 33919.80) {\n          incomeTax = (taxableIncome - 22847.76) * 0.075;\n        } else if (taxableIncome <= 45012.60) {\n          incomeTax = (33919.80 - 22847.76) * 0.075 + (taxableIncome - 33919.80) * 0.15;\n        } else if (taxableIncome <= 55976.16) {\n          incomeTax = (33919.80 - 22847.76) * 0.075 + (45012.60 - 33919.80) * 0.15 + (taxableIncome - 45012.60) * 0.225;\n        } else {\n          incomeTax = (33919.80 - 22847.76) * 0.075 + (45012.60 - 33919.80) * 0.15 + (55976.16 - 45012.60) * 0.225 + (taxableIncome - 55976.16) * 0.275;\n        }\n      }\n\n      // Cálculo da Previdência Social (INSS)\n      let socialSecurity = 0;\n      const inssLimit = 7507.49; // Teto INSS 2024\n      const inssBase = Math.min(income, inssLimit);\n      \n      if (inssBase <= 1412.00) {\n        socialSecurity = inssBase * 0.075;\n      } else if (inssBase <= 2666.68) {\n        socialSecurity = 1412.00 * 0.075 + (inssBase - 1412.00) * 0.09;\n      } else if (inssBase <= 4000.03) {\n        socialSecurity = 1412.00 * 0.075 + (2666.68 - 1412.00) * 0.09 + (inssBase - 2666.68) * 0.12;\n      } else {\n        socialSecurity = 1412.00 * 0.075 + (2666.68 - 1412.00) * 0.09 + (4000.03 - 2666.68) * 0.12 + (inssBase - 4000.03) * 0.14;\n      }\n\n      // Estimativa de impostos estaduais e municipais (valores aproximados)\n      const stateTax = taxableIncome * 0.02; // ICMS estimado\n      const municipalTax = taxableIncome * 0.005; // ISS estimado\n      const federalTax = incomeTax;\n\n      const totalTax = incomeTax + socialSecurity + stateTax + municipalTax;\n      const netIncome = income - totalTax;\n      const effectiveRate = income > 0 ? (totalTax / income) * 100 : 0;\n      const marginalRate = this.calculateMarginalRate(taxableIncome);\n\n      const result: TaxCalculationResult = {\n        grossIncome: income,\n        taxableIncome,\n        incomeTax,\n        socialSecurity,\n        totalTax,\n        netIncome,\n        effectiveRate: Math.round(effectiveRate * 100) / 100,\n        marginalRate,\n        breakdown: {\n          federalTax,\n          stateTax,\n          municipalTax\n        }\n      };\n\n      // Salvar histórico do cálculo\n      try {\n        await prisma.calculationHistory.create({\n          data: {\n            income,\n            deductions: totalDeductions,\n            taxYear,\n            dependents,\n            result: JSON.stringify(result),\n            ipAddress: req.ip || 'unknown',\n            userAgent: req.get('User-Agent') || 'unknown'\n          }\n        });\n      } catch (error) {\n        logger.warn('Erro ao salvar histórico de cálculo:', error);\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo realizado com sucesso',\n        data: result\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de impostos:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula a alíquota marginal\n   */\n  private calculateMarginalRate(taxableIncome: number): number {\n    if (taxableIncome <= 22847.76) return 0;\n    if (taxableIncome <= 33919.80) return 7.5;\n    if (taxableIncome <= 45012.60) return 15;\n    if (taxableIncome <= 55976.16) return 22.5;\n    return 27.5;\n  }\n\n  /**\n   * Obtém histórico de cálculos (Admin)\n   */\n  async getCalculationHistory(req: Request, res: Response): Promise<void> {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      const skip = (page - 1) * limit;\n\n      const [calculations, total] = await Promise.all([\n        prisma.calculationHistory.findMany({\n          skip,\n          take: limit,\n          orderBy: { createdAt: 'desc' },\n          select: {\n            id: true,\n            income: true,\n            deductions: true,\n            taxYear: true,\n            dependents: true,\n            result: true,\n            createdAt: true,\n            ipAddress: true\n          }\n        }),\n        prisma.calculationHistory.count()\n      ]);\n\n      const formattedCalculations = calculations.map(calc => ({\n        ...calc,\n        result: JSON.parse(calc.result as string)\n      }));\n\n      res.status(200).json({\n        success: true,\n        message: 'Histórico obtido com sucesso',\n        data: {\n          calculations: formattedCalculations,\n          pagination: {\n            page,\n            limit,\n            total,\n            pages: Math.ceil(total / limit)\n          }\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro ao obter histórico de cálculos:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Obtém estatísticas de cálculos (Admin)\n   */\n  async getCalculationStatistics(req: Request, res: Response): Promise<void> {\n    try {\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const [totalCalculations, recentCalculations, avgIncome] = await Promise.all([\n        prisma.calculationHistory.count(),\n        prisma.calculationHistory.count({\n          where: {\n            createdAt: {\n              gte: thirtyDaysAgo\n            }\n          }\n        }),\n        prisma.calculationHistory.aggregate({\n          _avg: {\n            income: true\n          }\n        })\n      ]);\n\n      // Estatísticas por ano fiscal\n      const yearlyStats = await prisma.calculationHistory.groupBy({\n        by: ['taxYear'],\n        _count: {\n          id: true\n        },\n        _avg: {\n          income: true\n        },\n        orderBy: {\n          taxYear: 'desc'\n        }\n      });\n\n      res.status(200).json({\n        success: true,\n        message: 'Estatísticas obtidas com sucesso',\n        data: {\n          totalCalculations,\n          recentCalculations,\n          averageIncome: avgIncome._avg.income || 0,\n          yearlyStatistics: yearlyStats.map(stat => ({\n            year: stat.taxYear,\n            calculations: stat._count.id,\n            averageIncome: stat._avg.income || 0\n          }))\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro ao obter estatísticas:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula impostos para pessoa jurídica\n   */\n  async calculateCompanyTax(req: Request, res: Response): Promise<void> {\n    try {\n      const { revenue, expenses, regime, employees } = req.body;\n\n      if (!revenue || revenue < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Receita deve ser um valor positivo'\n        });\n        return;\n      }\n\n      const profit = revenue - (expenses || 0);\n      let taxes = 0;\n      let breakdown = {};\n\n      switch (regime) {\n        case 'simples':\n          taxes = revenue * 0.06; // Aproximação Simples Nacional\n          breakdown = { simplesNacional: taxes };\n          break;\n        case 'lucro_presumido':\n          const irpj = profit * 0.15;\n          const csll = profit * 0.09;\n          const pis = revenue * 0.0065;\n          const cofins = revenue * 0.03;\n          taxes = irpj + csll + pis + cofins;\n          breakdown = { irpj, csll, pis, cofins };\n          break;\n        case 'lucro_real':\n          const irpjReal = profit * 0.25;\n          const csllReal = profit * 0.09;\n          const pisReal = revenue * 0.0165;\n          const cofinsReal = revenue * 0.076;\n          taxes = irpjReal + csllReal + pisReal + cofinsReal;\n          breakdown = { irpj: irpjReal, csll: csllReal, pis: pisReal, cofins: cofinsReal };\n          break;\n        default:\n          taxes = profit * 0.15;\n          breakdown = { estimado: taxes };\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo de impostos PJ realizado com sucesso',\n        data: {\n          revenue,\n          expenses: expenses || 0,\n          profit,\n          taxes,\n          netProfit: profit - taxes,\n          effectiveRate: revenue > 0 ? (taxes / revenue) * 100 : 0,\n          breakdown\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de impostos PJ:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula folha de pagamento\n   */\n  async calculatePayroll(req: Request, res: Response): Promise<void> {\n    try {\n      const { salary, benefits, employees } = req.body;\n\n      if (!salary || salary < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Salário deve ser um valor positivo'\n        });\n        return;\n      }\n\n      const employeeCount = employees || 1;\n      const totalSalary = salary * employeeCount;\n      const totalBenefits = (benefits || 0) * employeeCount;\n      \n      // Cálculos de encargos\n      const inss = totalSalary * 0.20; // INSS patronal\n      const fgts = totalSalary * 0.08;\n      const rat = totalSalary * 0.02; // Risco de Acidente de Trabalho\n      const salarioEducacao = totalSalary * 0.025;\n      const incra = totalSalary * 0.002;\n      const sebrae = totalSalary * 0.006;\n      const sesi = totalSalary * 0.015;\n      const senai = totalSalary * 0.01;\n      \n      const totalEncargos = inss + fgts + rat + salarioEducacao + incra + sebrae + sesi + senai;\n      const totalCost = totalSalary + totalBenefits + totalEncargos;\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo de folha de pagamento realizado com sucesso',\n        data: {\n          employees: employeeCount,\n          grossSalary: totalSalary,\n          benefits: totalBenefits,\n          encargos: {\n            inss,\n            fgts,\n            rat,\n            salarioEducacao,\n            incra,\n            sebrae,\n            sesi,\n            senai,\n            total: totalEncargos\n          },\n          totalCost,\n          costPerEmployee: totalCost / employeeCount\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de folha de pagamento:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula Simples Nacional\n   */\n  async calculateSimplesNacional(req: Request, res: Response): Promise<void> {\n    try {\n      const { revenue, activity, last12Months } = req.body;\n\n      if (!revenue || revenue < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Receita deve ser um valor positivo'\n        });\n        return;\n      }\n\n      const annualRevenue = last12Months || revenue * 12;\n      let aliquota = 0;\n      let anexo = 'I';\n\n      // Determinar anexo e alíquota baseado na atividade e faturamento\n      if (activity === 'comercio') {\n        anexo = 'I';\n        if (annualRevenue <= 180000) aliquota = 4.0;\n        else if (annualRevenue <= 360000) aliquota = 7.3;\n        else if (annualRevenue <= 720000) aliquota = 9.5;\n        else if (annualRevenue <= 1800000) aliquota = 10.7;\n        else if (annualRevenue <= 3600000) aliquota = 14.3;\n        else aliquota = 19.0;\n      } else if (activity === 'industria') {\n        anexo = 'II';\n        if (annualRevenue <= 180000) aliquota = 4.5;\n        else if (annualRevenue <= 360000) aliquota = 7.8;\n        else if (annualRevenue <= 720000) aliquota = 10.0;\n        else if (annualRevenue <= 1800000) aliquota = 11.2;\n        else if (annualRevenue <= 3600000) aliquota = 14.7;\n        else aliquota = 30.0;\n      } else {\n        anexo = 'III';\n        if (annualRevenue <= 180000) aliquota = 6.0;\n        else if (annualRevenue <= 360000) aliquota = 11.2;\n        else if (annualRevenue <= 720000) aliquota = 13.5;\n        else if (annualRevenue <= 1800000) aliquota = 16.0;\n        else if (annualRevenue <= 3600000) aliquota = 21.0;\n        else aliquota = 33.0;\n      }\n\n      const tax = revenue * (aliquota / 100);\n      const netRevenue = revenue - tax;\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo Simples Nacional realizado com sucesso',\n        data: {\n          revenue,\n          annualRevenue,\n          activity,\n          anexo,\n          aliquota,\n          tax,\n          netRevenue,\n          effectiveRate: aliquota\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo Simples Nacional:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula depreciação de ativos\n   */\n  async calculateDepreciation(req: Request, res: Response): Promise<void> {\n    try {\n      const { assetValue, assetType, usefulLife, method } = req.body;\n\n      if (!assetValue || assetValue < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Valor do ativo deve ser positivo'\n        });\n        return;\n      }\n\n      let years = usefulLife;\n      if (!years) {\n        // Vida útil padrão por tipo de ativo\n        switch (assetType) {\n          case 'veiculo': years = 5; break;\n          case 'equipamento': years = 10; break;\n          case 'movel': years = 10; break;\n          case 'imovel': years = 25; break;\n          case 'computador': years = 5; break;\n          default: years = 10;\n        }\n      }\n\n      let annualDepreciation = 0;\n      let monthlyDepreciation = 0;\n      let schedule = [];\n\n      if (method === 'acelerada') {\n        // Depreciação acelerada (dobro da taxa normal)\n        annualDepreciation = (assetValue / years) * 2;\n        monthlyDepreciation = annualDepreciation / 12;\n        years = Math.ceil(years / 2);\n      } else {\n        // Depreciação linear (método padrão)\n        annualDepreciation = assetValue / years;\n        monthlyDepreciation = annualDepreciation / 12;\n      }\n\n      // Gerar cronograma de depreciação\n      let remainingValue = assetValue;\n      for (let year = 1; year <= years; year++) {\n        const yearDepreciation = Math.min(annualDepreciation, remainingValue);\n        remainingValue -= yearDepreciation;\n        schedule.push({\n          year,\n          depreciation: yearDepreciation,\n          accumulatedDepreciation: assetValue - remainingValue,\n          remainingValue\n        });\n      }\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo de depreciação realizado com sucesso',\n        data: {\n          assetValue,\n          assetType,\n          usefulLife: years,\n          method: method || 'linear',\n          annualDepreciation,\n          monthlyDepreciation,\n          totalDepreciation: assetValue,\n          schedule\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de depreciação:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n\n  /**\n   * Calcula financiamento/empréstimo\n   */\n  async calculateLoan(req: Request, res: Response): Promise<void> {\n    try {\n      const { principal, interestRate, months, type } = req.body;\n\n      if (!principal || principal <= 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Valor principal deve ser positivo'\n        });\n        return;\n      }\n\n      if (!interestRate || interestRate < 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Taxa de juros deve ser positiva'\n        });\n        return;\n      }\n\n      if (!months || months <= 0) {\n        res.status(400).json({\n          success: false,\n          message: 'Número de parcelas deve ser positivo'\n        });\n        return;\n      }\n\n      const monthlyRate = interestRate / 100 / 12;\n      let monthlyPayment = 0;\n      let totalInterest = 0;\n      let schedule = [];\n\n      if (type === 'sac') {\n        // Sistema de Amortização Constante (SAC)\n        const amortization = principal / months;\n        let balance = principal;\n        \n        for (let month = 1; month <= months; month++) {\n          const interest = balance * monthlyRate;\n          const payment = amortization + interest;\n          balance -= amortization;\n          totalInterest += interest;\n          \n          schedule.push({\n            month,\n            payment: Math.round(payment * 100) / 100,\n            principal: Math.round(amortization * 100) / 100,\n            interest: Math.round(interest * 100) / 100,\n            balance: Math.round(balance * 100) / 100\n          });\n        }\n        \n        monthlyPayment = schedule[0]?.payment || 0;\n      } else {\n        // Sistema Price (parcelas fixas)\n        monthlyPayment = principal * (monthlyRate * Math.pow(1 + monthlyRate, months)) / (Math.pow(1 + monthlyRate, months) - 1);\n        let balance = principal;\n        \n        for (let month = 1; month <= months; month++) {\n          const interest = balance * monthlyRate;\n          const principalPayment = monthlyPayment - interest;\n          balance -= principalPayment;\n          totalInterest += interest;\n          \n          schedule.push({\n            month,\n            payment: Math.round(monthlyPayment * 100) / 100,\n            principal: Math.round(principalPayment * 100) / 100,\n            interest: Math.round(interest * 100) / 100,\n            balance: Math.round(Math.max(0, balance) * 100) / 100\n          });\n        }\n      }\n\n      const totalAmount = principal + totalInterest;\n\n      res.status(200).json({\n        success: true,\n        message: 'Cálculo de financiamento realizado com sucesso',\n        data: {\n          principal,\n          interestRate,\n          months,\n          type: type || 'price',\n          monthlyPayment: Math.round(monthlyPayment * 100) / 100,\n          totalInterest: Math.round(totalInterest * 100) / 100,\n          totalAmount: Math.round(totalAmount * 100) / 100,\n          schedule\n        }\n      });\n\n    } catch (error) {\n      logger.error('Erro no cálculo de financiamento:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Erro interno do servidor'\n      });\n    }\n  }\n}\n\n// Instância do controller\nexport const calculatorController = new CalculatorController();"],"version":3}
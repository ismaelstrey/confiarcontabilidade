{"file":"D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\articleController.ts","mappings":"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","names":[],"sources":["D:\\dev\\contabil\\contabil-site\\backend\\src\\controllers\\articleController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport logger from '../utils/logger';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\n// Interface para dados de artigo\r\ninterface ArticleData {\r\n  title?: string;\r\n  content?: string;\r\n  excerpt?: string;\r\n  slug?: string;\r\n  featuredImage?: string;\r\n  isPublished?: boolean;\r\n  publishedAt?: Date;\r\n  tags?: string[];\r\n  categoryId?: string;\r\n}\r\n\r\n// Interface para filtros de busca\r\ninterface ArticleFilters {\r\n  search?: string;\r\n  category?: string;\r\n  tag?: string;\r\n  isPublished?: boolean;\r\n  authorId?: string;\r\n  page?: number;\r\n  limit?: number;\r\n  sortBy?: 'createdAt' | 'publishedAt' | 'title' | 'views';\r\n  sortOrder?: 'asc' | 'desc';\r\n}\r\n\r\n/**\r\n * Controller responsável pelo gerenciamento de artigos\r\n */\r\nexport class ArticleController {\r\n  /**\r\n   * Lista todos os artigos com paginação e filtros\r\n   */\r\n  static async getArticles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        search,\r\n        category,\r\n        tag,\r\n        isPublished,\r\n        authorId,\r\n        page = 1,\r\n        limit = 10,\r\n        sortBy = 'createdAt',\r\n        sortOrder = 'desc'\r\n      }: ArticleFilters = req.query;\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Construir filtros\r\n      const where: any = {};\r\n\r\n      if (search) {\r\n        where.OR = [\r\n          { title: { contains: search, mode: 'insensitive' } },\r\n          { content: { contains: search, mode: 'insensitive' } },\r\n          { excerpt: { contains: search, mode: 'insensitive' } }\r\n        ];\r\n      }\r\n\r\n      if (category) {\r\n        where.category = {\r\n          slug: category\r\n        };\r\n      }\r\n\r\n      if (tag) {\r\n        where.tags = {\r\n          has: tag\r\n        };\r\n      }\r\n\r\n      if (isPublished !== undefined) {\r\n        where.status = isPublished ? 'PUBLISHED' : 'DRAFT';\r\n      }\r\n\r\n      if (authorId) {\r\n        where.authorId = authorId;\r\n      }\r\n\r\n      // Definir ordenação\r\n      const orderBy: any = {};\r\n      orderBy[sortBy] = sortOrder;\r\n\r\n      // Buscar artigos\r\n      const [articles, total] = await Promise.all([\r\n        prisma.article.findMany({\r\n          where,\r\n          include: {\r\n            author: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            },\r\n            categories: {\r\n              include: {\r\n                category: {\r\n                  select: {\r\n                    id: true,\r\n                    name: true,\r\n                    slug: true\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            _count: {\r\n              select: {\r\n                comments: true\r\n              }\r\n            }\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy\r\n        }),\r\n        prisma.article.count({ where })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigos listados com sucesso',\r\n        data: {\r\n          articles,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao listar artigos', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca um artigo por ID ou slug\r\n   */\r\n  static async getArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { identifier } = req.params;\r\n      const { incrementViews = 'false' } = req.query;\r\n\r\n      if (!identifier) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID ou slug do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Tentar buscar por ID primeiro, depois por slug\r\n      let article = await prisma.article.findUnique({\r\n        where: { id: identifier },\r\n        include: {\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          },\r\n          comments: {\r\n            where: { isApproved: true },\r\n            orderBy: { createdAt: 'desc' }\r\n          },\r\n          _count: {\r\n            select: {\r\n              comments: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Se não encontrou por ID, tentar por slug\r\n      if (!article) {\r\n        article = await prisma.article.findUnique({\r\n          where: { slug: identifier },\r\n          include: {\r\n            author: {\r\n              select: {\r\n                id: true,\r\n                name: true,\r\n                email: true\r\n              }\r\n            },\r\n            categories: {\r\n              include: {\r\n                category: {\r\n                  select: {\r\n                    id: true,\r\n                    name: true,\r\n                    slug: true\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            comments: {\r\n              where: { isApproved: true },\r\n              orderBy: { createdAt: 'desc' }\r\n            },\r\n            _count: {\r\n              select: {\r\n                comments: true\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (!article) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Incrementar visualizações se solicitado\r\n      if (incrementViews === 'true') {\r\n        await prisma.article.update({\r\n          where: { id: article.id },\r\n          data: { views: { increment: 1 } }\r\n        });\r\n        article.views += 1;\r\n      }\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigo encontrado',\r\n        data: { article }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar artigo', { error, identifier: req.params.identifier });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cria um novo artigo\r\n   */\r\n  static async createArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const {\r\n        title,\r\n        content,\r\n        excerpt,\r\n        slug,\r\n        featuredImage,\r\n        isPublished = false,\r\n        tags = [],\r\n        categoryId\r\n      }: ArticleData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      // Validações básicas\r\n      if (!title || !content) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Título e conteúdo são obrigatórios'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Gerar slug se não fornecido\r\n      let articleSlug = slug;\r\n      if (!articleSlug) {\r\n        articleSlug = title\r\n          .toLowerCase()\r\n          .normalize('NFD')\r\n          .replace(/[\\u0300-\\u036f]/g, '')\r\n          .replace(/[^a-z0-9\\s-]/g, '')\r\n          .replace(/\\s+/g, '-')\r\n          .replace(/-+/g, '-')\r\n          .trim();\r\n      }\r\n\r\n      // Verificar se o slug já existe\r\n      const existingArticle = await prisma.article.findUnique({\r\n        where: { slug: articleSlug }\r\n      });\r\n\r\n      if (existingArticle) {\r\n        // Adicionar timestamp ao slug para torná-lo único\r\n        articleSlug = `${articleSlug}-${Date.now()}`;\r\n      }\r\n\r\n      // Verificar se a categoria existe (se fornecida)\r\n      if (categoryId) {\r\n        const category = await prisma.category.findUnique({\r\n          where: { id: categoryId }\r\n        });\r\n\r\n        if (!category) {\r\n          res.status(400).json({\r\n            success: false,\r\n            message: 'Categoria não encontrada'\r\n          });\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Gerar excerpt se não fornecido\r\n      let articleExcerpt = excerpt;\r\n      if (!articleExcerpt) {\r\n        // Remover tags HTML e pegar os primeiros 200 caracteres\r\n        const plainText = content.replace(/<[^>]*>/g, '');\r\n        articleExcerpt = plainText.length > 200\r\n          ? plainText.substring(0, 200) + '...'\r\n          : plainText;\r\n      }\r\n\r\n      // Criar artigo\r\n      const articleData: any = {\r\n        title: title || '',\r\n        content: content || '',\r\n        excerpt: articleExcerpt,\r\n        slug: articleSlug,\r\n        featuredImage: featuredImage || undefined,\r\n        status: isPublished ? 'PUBLISHED' : 'DRAFT',\r\n        publishedAt: isPublished ? new Date() : null,\r\n        authorId: currentUser.id as string,\r\n        tags: {\r\n          create: tags?.map((tagId: string) => ({ tagId })) || []\r\n        }\r\n      };\r\n      \r\n      // Add categories if provided\r\n      if (categoryId) {\r\n        articleData.categories = {\r\n          create: [{ categoryId }]\r\n        };\r\n      }\r\n      \r\n      const article = await prisma.article.create({\r\n        data: articleData,\r\n        include: {\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true\r\n\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Artigo criado', {\r\n        articleId: article.id,\r\n        title: article.title,\r\n        authorId: currentUser.id,\r\n        status: article.status\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Artigo criado com sucesso',\r\n        data: { article }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar artigo', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Atualiza um artigo existente\r\n   */\r\n  static async updateArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const {\r\n        title,\r\n        content,\r\n        excerpt,\r\n        slug,\r\n        featuredImage,\r\n        isPublished,\r\n        tags,\r\n        categoryId\r\n      }: ArticleData = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const existingArticle = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingArticle) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permissões (autor ou admin)\r\n      if (currentUser.role !== 'ADMIN' && existingArticle.authorId !== currentUser.id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permissão para editar este artigo'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Preparar dados para atualização\r\n      const updateData: any = {};\r\n\r\n      if (title) updateData.title = title;\r\n      if (content) updateData.content = content;\r\n      if (excerpt) updateData.excerpt = excerpt;\r\n      if (featuredImage !== undefined) updateData.featuredImage = featuredImage;\r\n      \r\n      // Handle categories relationship\r\n      if (categoryId !== undefined) {\r\n        if (categoryId) {\r\n          // Verificar se a categoria existe\r\n          const category = await prisma.category.findUnique({\r\n            where: { id: categoryId }\r\n          });\r\n\r\n          if (!category) {\r\n            res.status(400).json({\r\n              success: false,\r\n              message: 'Categoria não encontrada'\r\n            });\r\n            return;\r\n          }\r\n          \r\n          updateData.categories = {\r\n            deleteMany: {},\r\n            create: [{ categoryId }]\r\n          };\r\n        } else {\r\n          updateData.categories = {\r\n            deleteMany: {}\r\n          };\r\n        }\r\n      }\r\n      \r\n      // Handle tags relationship\r\n      if (tags) {\r\n        updateData.tags = {\r\n          deleteMany: {},\r\n          create: tags.map((tagId: string) => ({ tagId }))\r\n        };\r\n      }\r\n\r\n      // Verificar slug único se fornecido\r\n      if (slug && slug !== existingArticle.slug) {\r\n        const slugInUse = await prisma.article.findFirst({\r\n          where: {\r\n            slug,\r\n            id: { not: id }\r\n          }\r\n        });\r\n\r\n        if (slugInUse) {\r\n          res.status(409).json({\r\n            success: false,\r\n            message: 'Slug já está em uso por outro artigo'\r\n          });\r\n          return;\r\n        }\r\n\r\n        updateData.slug = slug;\r\n      }\r\n\r\n      // Gerenciar publicação\r\n      if (isPublished !== undefined) {\r\n        updateData.status = isPublished ? 'PUBLISHED' : 'DRAFT';\r\n\r\n        // Se está sendo publicado pela primeira vez\r\n        if (isPublished && existingArticle.status !== 'PUBLISHED') {\r\n          updateData.publishedAt = new Date();\r\n        }\r\n\r\n        // Se está sendo despublicado\r\n        if (!isPublished && existingArticle.status === 'PUBLISHED') {\r\n          updateData.publishedAt = null;\r\n        }\r\n      }\r\n\r\n      updateData.updatedAt = new Date();\r\n\r\n      // Atualizar artigo\r\n      const updatedArticle = await prisma.article.update({\r\n        where: { id },\r\n        data: updateData,\r\n        include: {\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true,\r\n              email: true\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Artigo atualizado', {\r\n        articleId: id,\r\n        updatedBy: currentUser.id,\r\n        changes: Object.keys(updateData)\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigo atualizado com sucesso',\r\n        data: { article: updatedArticle }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao atualizar artigo', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove um artigo\r\n   */\r\n  // static async deleteArticle(req: Request, res: Response): Promise<void> {\r\n  //   try {\r\n  //     const { id } = req.params;\r\n  //     const currentUser = (req as any).user;\r\n\r\n  //     if (!id) {\r\n  //       res.status(400).json({\r\n  //         success: false,\r\n  //         message: 'ID do artigo é obrigatório'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Verificar se o artigo existe\r\n  //     const existingArticle = await prisma.article.findUnique({\r\n  //       where: { id }\r\n  //     });\r\n\r\n  //     if (!existingArticle) {\r\n  //       res.status(404).json({\r\n  //         success: false,\r\n  //         message: 'Artigo não encontrado'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Verificar permissões (autor ou admin)\r\n  //     if (currentUser.role !== 'ADMIN' && existingArticle.authorId !== currentUser.id) {\r\n  //       res.status(403).json({\r\n  //         success: false,\r\n  //         message: 'Sem permissão para deletar este artigo'\r\n  //       });\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Deletar artigo e comentários relacionados\r\n  //     await prisma.$transaction([\r\n  //       prisma.articleComment.deleteMany({\r\n  //         where: { articleId: id }\r\n  //       }),\r\n  //       prisma.article.delete({\r\n  //         where: { id }\r\n  //       })\r\n  //     ]);\r\n\r\n  //     // Log da ação\r\n  //     logger.info('Artigo deletado', {\r\n  //       articleId: id,\r\n  //       title: existingArticle.title,\r\n  //       deletedBy: currentUser.id\r\n  //     });\r\n\r\n  //     res.status(200).json({\r\n  //       success: true,\r\n  //       message: 'Artigo deletado com sucesso'\r\n  //     });\r\n  //   } catch (error) {\r\n  //     logger.error('Erro ao deletar artigo', { error, articleId: req.params.id });\r\n  //     res.status(500).json({\r\n  //       success: false,\r\n  //       message: 'Erro interno do servidor'\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Busca artigos relacionados\r\n   */\r\n  static async getRelatedArticles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { limit = 5 } = req.query;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar o artigo atual\r\n      const currentArticle = await prisma.article.findUnique({\r\n        where: { id },\r\n        select: {\r\n          categories: {\r\n            select: {\r\n              categoryId: true\r\n            }\r\n          },\r\n          tags: {\r\n            select: {\r\n              tagId: true\r\n            }\r\n          }\r\n        }\r\n      }) as { categories: { categoryId: string }[]; tags: { tagId: string }[] } | null;\r\n\r\n      if (!currentArticle) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Buscar artigos relacionados\r\n      const relatedArticles = await prisma.article.findMany({\r\n        where: {\r\n          AND: [\r\n            { id: { not: id } },\r\n            { status: 'PUBLISHED' },\r\n            {\r\n              OR: [\r\n                // Mesma categoria\r\n                currentArticle.categories.length > 0 ? {\r\n                  categories: {\r\n                    some: {\r\n                      categoryId: {\r\n                        in: currentArticle.categories.map(cat => cat.categoryId)\r\n                      }\r\n                    }\r\n                  }\r\n                } : {},\r\n                // Tags em comum\r\n                currentArticle.tags.length > 0 ? {\r\n                  tags: {\r\n                    some: {\r\n                      tagId: {\r\n                        in: currentArticle.tags.map(tag => tag.tagId)\r\n                      }\r\n                    }\r\n                  }\r\n                } : {}\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        select: {\r\n          id: true,\r\n          title: true,\r\n          excerpt: true,\r\n          slug: true,\r\n          featuredImage: true,\r\n          publishedAt: true,\r\n          views: true,\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          }\r\n        },\r\n        take: Number(limit),\r\n        orderBy: { publishedAt: 'desc' }\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigos relacionados encontrados',\r\n        data: { articles: relatedArticles }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar artigos relacionados', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Busca artigos populares\r\n   */\r\n  static async getPopularArticles(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { limit = 10, period = '30' } = req.query;\r\n\r\n      // Calcular data limite baseada no período\r\n      const periodDays = Number(period);\r\n      const dateLimit = new Date();\r\n      dateLimit.setDate(dateLimit.getDate() - periodDays);\r\n\r\n      const popularArticles = await prisma.article.findMany({\r\n        where: {\r\n          status: 'PUBLISHED',\r\n          publishedAt: {\r\n            gte: dateLimit\r\n          }\r\n        },\r\n        select: {\r\n          id: true,\r\n          title: true,\r\n          excerpt: true,\r\n          slug: true,\r\n          featuredImage: true,\r\n          publishedAt: true,\r\n          views: true,\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true\r\n            }\r\n          },\r\n          categories: {\r\n            include: {\r\n              category: {\r\n                select: {\r\n                  id: true,\r\n                  name: true,\r\n                  slug: true\r\n                }\r\n              }\r\n            }\r\n          },\r\n          _count: {\r\n            select: {\r\n              comments: true\r\n            }\r\n          }\r\n        },\r\n        take: Number(limit),\r\n        orderBy: [\r\n          { views: 'desc' },\r\n          { publishedAt: 'desc' }\r\n        ]\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigos populares encontrados',\r\n        data: { articles: popularArticles }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar artigos populares', { error });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deleta um artigo\r\n   */\r\n  static async deleteArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const existingArticle = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!existingArticle) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar permissões (autor ou admin)\r\n      if (currentUser.role !== 'ADMIN' && existingArticle.authorId !== currentUser.id) {\r\n        res.status(403).json({\r\n          success: false,\r\n          message: 'Sem permissão para deletar este artigo'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Deletar artigo (cascade irá deletar relacionamentos)\r\n      await prisma.article.delete({\r\n        where: { id }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Artigo deletado', {\r\n        articleId: id,\r\n        title: existingArticle.title,\r\n        authorId: currentUser.id\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Artigo deletado com sucesso'\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao deletar artigo', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Curtir/descurtir um artigo\r\n   */\r\n  static async likeArticle(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const article = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!article) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se já curtiu\r\n      const existingLike = await prisma.articleLike.findUnique({\r\n        where: {\r\n          userId_articleId: {\r\n            userId: currentUser.id,\r\n            articleId: id\r\n          }\r\n        }\r\n      });\r\n\r\n      let liked = false;\r\n      if (existingLike) {\r\n        // Remover curtida\r\n        await prisma.articleLike.delete({\r\n          where: {\r\n            userId_articleId: {\r\n              userId: currentUser.id,\r\n              articleId: id\r\n            }\r\n          }\r\n        });\r\n        liked = false;\r\n      } else {\r\n        // Adicionar curtida\r\n        await prisma.articleLike.create({\r\n          data: {\r\n            userId: currentUser.id,\r\n            articleId: id\r\n          }\r\n        });\r\n        liked = true;\r\n      }\r\n\r\n      // Contar total de curtidas\r\n      const likesCount = await prisma.articleLike.count({\r\n        where: { articleId: id }\r\n      });\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: liked ? 'Artigo curtido' : 'Curtida removida',\r\n        data: {\r\n          liked,\r\n          likesCount\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao curtir artigo', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Buscar comentários de um artigo\r\n   */\r\n  static async getArticleComments(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { page = 1, limit = 10, sortOrder = 'desc' } = req.query;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const article = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!article) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const skip = (Number(page) - 1) * Number(limit);\r\n      const take = Number(limit);\r\n\r\n      // Buscar comentários aprovados\r\n      const [comments, total] = await Promise.all([\r\n        prisma.comment.findMany({\r\n          where: {\r\n            articleId: id,\r\n            isApproved: true\r\n          },\r\n          include: {\r\n            author: {\r\n              select: {\r\n                id: true,\r\n                name: true\r\n              }\r\n            }\r\n          },\r\n          skip,\r\n          take,\r\n          orderBy: { createdAt: sortOrder as 'asc' | 'desc' }\r\n        }),\r\n        prisma.comment.count({\r\n          where: {\r\n            articleId: id,\r\n            isApproved: true\r\n          }\r\n        })\r\n      ]);\r\n\r\n      const totalPages = Math.ceil(total / take);\r\n\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Comentários encontrados',\r\n        data: {\r\n          comments,\r\n          pagination: {\r\n            page: Number(page),\r\n            limit: take,\r\n            total,\r\n            totalPages,\r\n            hasNext: Number(page) < totalPages,\r\n            hasPrev: Number(page) > 1\r\n          }\r\n        }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao buscar comentários', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Criar comentário em um artigo\r\n   */\r\n  static async createComment(req: Request, res: Response): Promise<void> {\r\n    try {\r\n      const { id } = req.params;\r\n      const { content } = req.body;\r\n      const currentUser = (req as any).user;\r\n\r\n      if (!id) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'ID do artigo é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!content || content.trim().length === 0) {\r\n        res.status(400).json({\r\n          success: false,\r\n          message: 'Conteúdo do comentário é obrigatório'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Verificar se o artigo existe\r\n      const article = await prisma.article.findUnique({\r\n        where: { id }\r\n      });\r\n\r\n      if (!article) {\r\n        res.status(404).json({\r\n          success: false,\r\n          message: 'Artigo não encontrado'\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Criar comentário\r\n      const comment = await prisma.comment.create({\r\n        data: {\r\n          content: content.trim(),\r\n          articleId: id,\r\n          authorId: currentUser.id,\r\n          isApproved: false // Comentários precisam de aprovação\r\n        },\r\n        include: {\r\n          author: {\r\n            select: {\r\n              id: true,\r\n              name: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      // Log da ação\r\n      logger.info('Comentário criado', {\r\n        commentId: comment.id,\r\n        articleId: id,\r\n        authorId: currentUser.id\r\n      });\r\n\r\n      res.status(201).json({\r\n        success: true,\r\n        message: 'Comentário criado com sucesso. Aguardando aprovação.',\r\n        data: { comment }\r\n      });\r\n    } catch (error) {\r\n      logger.error('Erro ao criar comentário', { error, articleId: req.params.id });\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Erro interno do servidor'\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default ArticleController;"],"version":3}